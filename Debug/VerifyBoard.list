
VerifyBoard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007e80  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000198  08008030  08008030  00018030  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080081c8  080081c8  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080081c8  080081c8  000181c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080081d0  080081d0  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080081d0  080081d0  000181d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080081d4  080081d4  000181d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080081d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          00004c08  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20004c7c  20004c7c  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001c2b2  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003b33  00000000  00000000  0003c356  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001688  00000000  00000000  0003fe90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001520  00000000  00000000  00041518  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000278a6  00000000  00000000  00042a38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001977a  00000000  00000000  0006a2de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e88d7  00000000  00000000  00083a58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0016c32f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000067d8  00000000  00000000  0016c380  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000074 	.word	0x20000074
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08008018 	.word	0x08008018

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000078 	.word	0x20000078
 80001ec:	08008018 	.word	0x08008018

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <CRCInit>:

static uint8_t MessageCNT = 0;

uint8_t crcTable[256];

void CRCInit(void) {
 8000594:	b480      	push	{r7}
 8000596:	b085      	sub	sp, #20
 8000598:	af00      	add	r7, sp, #0
	uint8_t _crc;
	for (int i = 0; i < 0x100; i++) {
 800059a:	2300      	movs	r3, #0
 800059c:	60bb      	str	r3, [r7, #8]
 800059e:	e022      	b.n	80005e6 <CRCInit+0x52>
		_crc = i;
 80005a0:	68bb      	ldr	r3, [r7, #8]
 80005a2:	73fb      	strb	r3, [r7, #15]

		for (uint8_t bit = 0; bit < 8; bit++) _crc = (_crc & 0x80) ? ((_crc << 1) ^ 0x1D) : (_crc << 1);
 80005a4:	2300      	movs	r3, #0
 80005a6:	71fb      	strb	r3, [r7, #7]
 80005a8:	e012      	b.n	80005d0 <CRCInit+0x3c>
 80005aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	da07      	bge.n	80005c2 <CRCInit+0x2e>
 80005b2:	7bfb      	ldrb	r3, [r7, #15]
 80005b4:	005b      	lsls	r3, r3, #1
 80005b6:	b25b      	sxtb	r3, r3
 80005b8:	f083 031d 	eor.w	r3, r3, #29
 80005bc:	b25b      	sxtb	r3, r3
 80005be:	b2db      	uxtb	r3, r3
 80005c0:	e002      	b.n	80005c8 <CRCInit+0x34>
 80005c2:	7bfb      	ldrb	r3, [r7, #15]
 80005c4:	005b      	lsls	r3, r3, #1
 80005c6:	b2db      	uxtb	r3, r3
 80005c8:	73fb      	strb	r3, [r7, #15]
 80005ca:	79fb      	ldrb	r3, [r7, #7]
 80005cc:	3301      	adds	r3, #1
 80005ce:	71fb      	strb	r3, [r7, #7]
 80005d0:	79fb      	ldrb	r3, [r7, #7]
 80005d2:	2b07      	cmp	r3, #7
 80005d4:	d9e9      	bls.n	80005aa <CRCInit+0x16>

		crcTable[i] = _crc;
 80005d6:	4a09      	ldr	r2, [pc, #36]	; (80005fc <CRCInit+0x68>)
 80005d8:	68bb      	ldr	r3, [r7, #8]
 80005da:	4413      	add	r3, r2
 80005dc:	7bfa      	ldrb	r2, [r7, #15]
 80005de:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 0x100; i++) {
 80005e0:	68bb      	ldr	r3, [r7, #8]
 80005e2:	3301      	adds	r3, #1
 80005e4:	60bb      	str	r3, [r7, #8]
 80005e6:	68bb      	ldr	r3, [r7, #8]
 80005e8:	2bff      	cmp	r3, #255	; 0xff
 80005ea:	ddd9      	ble.n	80005a0 <CRCInit+0xc>
	}
}
 80005ec:	bf00      	nop
 80005ee:	bf00      	nop
 80005f0:	3714      	adds	r7, #20
 80005f2:	46bd      	mov	sp, r7
 80005f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f8:	4770      	bx	lr
 80005fa:	bf00      	nop
 80005fc:	20000094 	.word	0x20000094

08000600 <CalcCRC>:
uint8_t CalcCRC(uint8_t * buf, uint8_t len) {
 8000600:	b480      	push	{r7}
 8000602:	b085      	sub	sp, #20
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
 8000608:	460b      	mov	r3, r1
 800060a:	70fb      	strb	r3, [r7, #3]
        const uint8_t * ptr = buf;
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	60fb      	str	r3, [r7, #12]
        uint8_t _crc = 0xFF;
 8000610:	23ff      	movs	r3, #255	; 0xff
 8000612:	72fb      	strb	r3, [r7, #11]

        while(len--) _crc = crcTable[_crc ^ *ptr++];
 8000614:	e00a      	b.n	800062c <CalcCRC+0x2c>
 8000616:	68fb      	ldr	r3, [r7, #12]
 8000618:	1c5a      	adds	r2, r3, #1
 800061a:	60fa      	str	r2, [r7, #12]
 800061c:	781a      	ldrb	r2, [r3, #0]
 800061e:	7afb      	ldrb	r3, [r7, #11]
 8000620:	4053      	eors	r3, r2
 8000622:	b2db      	uxtb	r3, r3
 8000624:	461a      	mov	r2, r3
 8000626:	4b08      	ldr	r3, [pc, #32]	; (8000648 <CalcCRC+0x48>)
 8000628:	5c9b      	ldrb	r3, [r3, r2]
 800062a:	72fb      	strb	r3, [r7, #11]
 800062c:	78fb      	ldrb	r3, [r7, #3]
 800062e:	1e5a      	subs	r2, r3, #1
 8000630:	70fa      	strb	r2, [r7, #3]
 8000632:	2b00      	cmp	r3, #0
 8000634:	d1ef      	bne.n	8000616 <CalcCRC+0x16>

        return ~_crc;
 8000636:	7afb      	ldrb	r3, [r7, #11]
 8000638:	43db      	mvns	r3, r3
 800063a:	b2db      	uxtb	r3, r3
}
 800063c:	4618      	mov	r0, r3
 800063e:	3714      	adds	r7, #20
 8000640:	46bd      	mov	sp, r7
 8000642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000646:	4770      	bx	lr
 8000648:	20000094 	.word	0x20000094

0800064c <CAN_ConfigFilter>:

static void CAN_ConfigFilter(CAN_HandleTypeDef* hcan)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b08c      	sub	sp, #48	; 0x30
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
	CAN_FilterTypeDef Filter;
	Filter.FilterActivation = CAN_FILTER_ENABLE;
 8000654:	2301      	movs	r3, #1
 8000656:	62bb      	str	r3, [r7, #40]	; 0x28
	Filter.FilterIdHigh = CANRcvID<<5;
 8000658:	f44f 7310 	mov.w	r3, #576	; 0x240
 800065c:	60bb      	str	r3, [r7, #8]
	Filter.FilterMode = CAN_FILTERMODE_IDLIST;
 800065e:	2301      	movs	r3, #1
 8000660:	623b      	str	r3, [r7, #32]
	Filter.FilterScale = CAN_FILTERSCALE_16BIT;
 8000662:	2300      	movs	r3, #0
 8000664:	627b      	str	r3, [r7, #36]	; 0x24
	Filter.FilterBank = 1;
 8000666:	2301      	movs	r3, #1
 8000668:	61fb      	str	r3, [r7, #28]
	Filter.FilterFIFOAssignment = CAN_FilterFIFO0;
 800066a:	2300      	movs	r3, #0
 800066c:	61bb      	str	r3, [r7, #24]
	Filter.SlaveStartFilterBank =20;
 800066e:	2314      	movs	r3, #20
 8000670:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_CAN_ConfigFilter(hcan, &Filter);
 8000672:	f107 0308 	add.w	r3, r7, #8
 8000676:	4619      	mov	r1, r3
 8000678:	6878      	ldr	r0, [r7, #4]
 800067a:	f000 fe05 	bl	8001288 <HAL_CAN_ConfigFilter>

}
 800067e:	bf00      	nop
 8000680:	3730      	adds	r7, #48	; 0x30
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}

08000686 <CAN_Config>:

void CAN_Config(CAN_HandleTypeDef* hcan)
{
 8000686:	b580      	push	{r7, lr}
 8000688:	b082      	sub	sp, #8
 800068a:	af00      	add	r7, sp, #0
 800068c:	6078      	str	r0, [r7, #4]
	CRCInit();
 800068e:	f7ff ff81 	bl	8000594 <CRCInit>
	CAN_ConfigFilter(hcan);
 8000692:	6878      	ldr	r0, [r7, #4]
 8000694:	f7ff ffda 	bl	800064c <CAN_ConfigFilter>
	HAL_CAN_Start(hcan);
 8000698:	6878      	ldr	r0, [r7, #4]
 800069a:	f000 fed5 	bl	8001448 <HAL_CAN_Start>
}
 800069e:	bf00      	nop
 80006a0:	3708      	adds	r7, #8
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
	...

080006a8 <CAN_Receive>:

void CAN_Receive(CAN_HandleTypeDef* hcan)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b08e      	sub	sp, #56	; 0x38
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef Status;
	CAN_RxHeaderTypeDef Can_Header = {0};
 80006b0:	f107 0314 	add.w	r3, r7, #20
 80006b4:	2200      	movs	r2, #0
 80006b6:	601a      	str	r2, [r3, #0]
 80006b8:	605a      	str	r2, [r3, #4]
 80006ba:	609a      	str	r2, [r3, #8]
 80006bc:	60da      	str	r2, [r3, #12]
 80006be:	611a      	str	r2, [r3, #16]
 80006c0:	615a      	str	r2, [r3, #20]
 80006c2:	619a      	str	r2, [r3, #24]
	uint32_t FreeLevel;
	FreeLevel = HAL_CAN_GetRxFifoFillLevel(hcan, CAN_FILTER_FIFO0);
 80006c4:	2100      	movs	r1, #0
 80006c6:	6878      	ldr	r0, [r7, #4]
 80006c8:	f001 f924 	bl	8001914 <HAL_CAN_GetRxFifoFillLevel>
 80006cc:	6378      	str	r0, [r7, #52]	; 0x34
	uint8_t RcvBuffer[8] = {0};
 80006ce:	2300      	movs	r3, #0
 80006d0:	60fb      	str	r3, [r7, #12]
 80006d2:	2300      	movs	r3, #0
 80006d4:	613b      	str	r3, [r7, #16]
	while(FreeLevel > 0)
 80006d6:	e043      	b.n	8000760 <CAN_Receive+0xb8>
	{
		Status = HAL_CAN_GetRxMessage(hcan, CAN_FILTER_FIFO0, &Can_Header, RcvBuffer);
 80006d8:	f107 030c 	add.w	r3, r7, #12
 80006dc:	f107 0214 	add.w	r2, r7, #20
 80006e0:	2100      	movs	r1, #0
 80006e2:	6878      	ldr	r0, [r7, #4]
 80006e4:	f001 f804 	bl	80016f0 <HAL_CAN_GetRxMessage>
 80006e8:	4603      	mov	r3, r0
 80006ea:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
		if(Status != HAL_OK) return;
 80006ee:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d138      	bne.n	8000768 <CAN_Receive+0xc0>

//		MyPrintf("Verify Rcv ID = %.8lx Len = %ld \r\n", Can_Header.StdId, Can_Header.DLC);
		for(uint8_t i = 0; i< Can_Header.DLC ;++i)
 80006f6:	2300      	movs	r3, #0
 80006f8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80006fc:	e00e      	b.n	800071c <CAN_Receive+0x74>
		{
			MyPrintf("%d ", RcvBuffer[i]);
 80006fe:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000702:	3338      	adds	r3, #56	; 0x38
 8000704:	443b      	add	r3, r7
 8000706:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800070a:	4619      	mov	r1, r3
 800070c:	4818      	ldr	r0, [pc, #96]	; (8000770 <CAN_Receive+0xc8>)
 800070e:	f000 f897 	bl	8000840 <MyPrintf>
		for(uint8_t i = 0; i< Can_Header.DLC ;++i)
 8000712:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000716:	3301      	adds	r3, #1
 8000718:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800071c:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8000720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000722:	429a      	cmp	r2, r3
 8000724:	d3eb      	bcc.n	80006fe <CAN_Receive+0x56>
		}
//		MyPrintf("\r\n");
		if(Can_Header.StdId == CANRcvID)
 8000726:	697b      	ldr	r3, [r7, #20]
 8000728:	2b12      	cmp	r3, #18
 800072a:	d114      	bne.n	8000756 <CAN_Receive+0xae>
		{
			uint8_t check = CalcCRC(RcvBuffer, 7);
 800072c:	f107 030c 	add.w	r3, r7, #12
 8000730:	2107      	movs	r1, #7
 8000732:	4618      	mov	r0, r3
 8000734:	f7ff ff64 	bl	8000600 <CalcCRC>
 8000738:	4603      	mov	r3, r0
 800073a:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
			if(check == RcvBuffer[7])
 800073e:	7cfb      	ldrb	r3, [r7, #19]
 8000740:	f897 2031 	ldrb.w	r2, [r7, #49]	; 0x31
 8000744:	429a      	cmp	r2, r3
 8000746:	d103      	bne.n	8000750 <CAN_Receive+0xa8>
			{
				MyPrintf("CRC Valid\r\n");
 8000748:	480a      	ldr	r0, [pc, #40]	; (8000774 <CAN_Receive+0xcc>)
 800074a:	f000 f879 	bl	8000840 <MyPrintf>
 800074e:	e002      	b.n	8000756 <CAN_Receive+0xae>
			}else
			{
				MyPrintf("Unvalid CRC\r\n");
 8000750:	4809      	ldr	r0, [pc, #36]	; (8000778 <CAN_Receive+0xd0>)
 8000752:	f000 f875 	bl	8000840 <MyPrintf>
			}
		}
		FreeLevel = HAL_CAN_GetRxFifoFillLevel(hcan, CAN_FILTER_FIFO0);
 8000756:	2100      	movs	r1, #0
 8000758:	6878      	ldr	r0, [r7, #4]
 800075a:	f001 f8db 	bl	8001914 <HAL_CAN_GetRxFifoFillLevel>
 800075e:	6378      	str	r0, [r7, #52]	; 0x34
	while(FreeLevel > 0)
 8000760:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000762:	2b00      	cmp	r3, #0
 8000764:	d1b8      	bne.n	80006d8 <CAN_Receive+0x30>
 8000766:	e000      	b.n	800076a <CAN_Receive+0xc2>
		if(Status != HAL_OK) return;
 8000768:	bf00      	nop
	}
}
 800076a:	3738      	adds	r7, #56	; 0x38
 800076c:	46bd      	mov	sp, r7
 800076e:	bd80      	pop	{r7, pc}
 8000770:	08008030 	.word	0x08008030
 8000774:	08008034 	.word	0x08008034
 8000778:	08008040 	.word	0x08008040

0800077c <CAN_Transmit>:

void CAN_Transmit(CAN_HandleTypeDef* hcan)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b08e      	sub	sp, #56	; 0x38
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
	CAN_TxHeaderTypeDef Can_Header = {0};
 8000784:	f107 0318 	add.w	r3, r7, #24
 8000788:	2200      	movs	r2, #0
 800078a:	601a      	str	r2, [r3, #0]
 800078c:	605a      	str	r2, [r3, #4]
 800078e:	609a      	str	r2, [r3, #8]
 8000790:	60da      	str	r2, [r3, #12]
 8000792:	611a      	str	r2, [r3, #16]
 8000794:	615a      	str	r2, [r3, #20]
	HAL_StatusTypeDef Status;
	uint32_t Mailbox = 0;
 8000796:	2300      	movs	r3, #0
 8000798:	617b      	str	r3, [r7, #20]
	uint32_t FreeLevel = HAL_CAN_GetTxMailboxesFreeLevel(hcan);
 800079a:	6878      	ldr	r0, [r7, #4]
 800079c:	f000 ff73 	bl	8001686 <HAL_CAN_GetTxMailboxesFreeLevel>
 80007a0:	6378      	str	r0, [r7, #52]	; 0x34
	if(FreeLevel == 0) return;
 80007a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d034      	beq.n	8000812 <CAN_Transmit+0x96>
	uint8_t Data[8]= {10,MessageCNT,0,0,0,0,MessageCNT,0};
 80007a8:	230a      	movs	r3, #10
 80007aa:	733b      	strb	r3, [r7, #12]
 80007ac:	4b1b      	ldr	r3, [pc, #108]	; (800081c <CAN_Transmit+0xa0>)
 80007ae:	781b      	ldrb	r3, [r3, #0]
 80007b0:	737b      	strb	r3, [r7, #13]
 80007b2:	2300      	movs	r3, #0
 80007b4:	73bb      	strb	r3, [r7, #14]
 80007b6:	2300      	movs	r3, #0
 80007b8:	73fb      	strb	r3, [r7, #15]
 80007ba:	2300      	movs	r3, #0
 80007bc:	743b      	strb	r3, [r7, #16]
 80007be:	2300      	movs	r3, #0
 80007c0:	747b      	strb	r3, [r7, #17]
 80007c2:	4b16      	ldr	r3, [pc, #88]	; (800081c <CAN_Transmit+0xa0>)
 80007c4:	781b      	ldrb	r3, [r3, #0]
 80007c6:	74bb      	strb	r3, [r7, #18]
 80007c8:	2300      	movs	r3, #0
 80007ca:	74fb      	strb	r3, [r7, #19]
	MessageCNT++;
 80007cc:	4b13      	ldr	r3, [pc, #76]	; (800081c <CAN_Transmit+0xa0>)
 80007ce:	781b      	ldrb	r3, [r3, #0]
 80007d0:	3301      	adds	r3, #1
 80007d2:	b2da      	uxtb	r2, r3
 80007d4:	4b11      	ldr	r3, [pc, #68]	; (800081c <CAN_Transmit+0xa0>)
 80007d6:	701a      	strb	r2, [r3, #0]

	Can_Header.DLC = 8;
 80007d8:	2308      	movs	r3, #8
 80007da:	62bb      	str	r3, [r7, #40]	; 0x28
	Can_Header.StdId = CANTransmitID;
 80007dc:	23a2      	movs	r3, #162	; 0xa2
 80007de:	61bb      	str	r3, [r7, #24]

	Status = HAL_CAN_AddTxMessage(hcan, &Can_Header, Data, &Mailbox);
 80007e0:	f107 0314 	add.w	r3, r7, #20
 80007e4:	f107 020c 	add.w	r2, r7, #12
 80007e8:	f107 0118 	add.w	r1, r7, #24
 80007ec:	6878      	ldr	r0, [r7, #4]
 80007ee:	f000 fe6f 	bl	80014d0 <HAL_CAN_AddTxMessage>
 80007f2:	4603      	mov	r3, r0
 80007f4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

	if(Status == HAL_OK)
 80007f8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d009      	beq.n	8000814 <CAN_Transmit+0x98>
	{
//		printf("Message in mailbox %ld \r\n", Mailbox);
	}
	else
	{
		printf("Transmit Error Status %d Code = 0x%.8lx \r\n", Status, hcan->ErrorCode);
 8000800:	f897 1033 	ldrb.w	r1, [r7, #51]	; 0x33
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000808:	461a      	mov	r2, r3
 800080a:	4805      	ldr	r0, [pc, #20]	; (8000820 <CAN_Transmit+0xa4>)
 800080c:	f006 fbac 	bl	8006f68 <iprintf>
 8000810:	e000      	b.n	8000814 <CAN_Transmit+0x98>
	if(FreeLevel == 0) return;
 8000812:	bf00      	nop
	}
}
 8000814:	3738      	adds	r7, #56	; 0x38
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	20000090 	.word	0x20000090
 8000820:	08008050 	.word	0x08008050

08000824 <MyPrintf_Init>:
  NULL,                // memory for control block
  0U                   // size for control block
};

void 	MyPrintf_Init()
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
	PrintfMutex = osMutexNew(&PrintfMutex_attr);
 8000828:	4803      	ldr	r0, [pc, #12]	; (8000838 <MyPrintf_Init+0x14>)
 800082a:	f003 f893 	bl	8003954 <osMutexNew>
 800082e:	4603      	mov	r3, r0
 8000830:	4a02      	ldr	r2, [pc, #8]	; (800083c <MyPrintf_Init+0x18>)
 8000832:	6013      	str	r3, [r2, #0]
}
 8000834:	bf00      	nop
 8000836:	bd80      	pop	{r7, pc}
 8000838:	080080d4 	.word	0x080080d4
 800083c:	20000194 	.word	0x20000194

08000840 <MyPrintf>:

int	MyPrintf (const char *__restrict format, ...)
{
 8000840:	b40f      	push	{r0, r1, r2, r3}
 8000842:	b580      	push	{r7, lr}
 8000844:	b09c      	sub	sp, #112	; 0x70
 8000846:	af00      	add	r7, sp, #0
	osMutexAcquire(PrintfMutex, 0);
 8000848:	4b1c      	ldr	r3, [pc, #112]	; (80008bc <MyPrintf+0x7c>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	2100      	movs	r1, #0
 800084e:	4618      	mov	r0, r3
 8000850:	f003 f906 	bl	8003a60 <osMutexAcquire>

	va_list arg;
	char Buffer[PrintBufferSize]={0};
 8000854:	2300      	movs	r3, #0
 8000856:	607b      	str	r3, [r7, #4]
 8000858:	f107 0308 	add.w	r3, r7, #8
 800085c:	2260      	movs	r2, #96	; 0x60
 800085e:	2100      	movs	r1, #0
 8000860:	4618      	mov	r0, r3
 8000862:	f006 fae4 	bl	8006e2e <memset>
	size_t size=sizeof(Buffer);
 8000866:	2364      	movs	r3, #100	; 0x64
 8000868:	603b      	str	r3, [r7, #0]
	va_start(arg,format);
 800086a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800086e:	66bb      	str	r3, [r7, #104]	; 0x68
	char* Output  = vasnprintf(Buffer,&size,format,arg);
 8000870:	4639      	mov	r1, r7
 8000872:	1d38      	adds	r0, r7, #4
 8000874:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000876:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8000878:	f006 fc7c 	bl	8007174 <vasniprintf>
 800087c:	66f8      	str	r0, [r7, #108]	; 0x6c
	va_end(arg);
	if(Output != NULL)
 800087e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000880:	2b00      	cmp	r3, #0
 8000882:	d00d      	beq.n	80008a0 <MyPrintf+0x60>
	{
		HAL_UART_Transmit(&DebugUART,(uint8_t*) Output, size, 10);
 8000884:	683b      	ldr	r3, [r7, #0]
 8000886:	b29a      	uxth	r2, r3
 8000888:	230a      	movs	r3, #10
 800088a:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800088c:	480c      	ldr	r0, [pc, #48]	; (80008c0 <MyPrintf+0x80>)
 800088e:	f002 fb0c 	bl	8002eaa <HAL_UART_Transmit>

		if(Output != Buffer)
 8000892:	1d3b      	adds	r3, r7, #4
 8000894:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8000896:	429a      	cmp	r2, r3
 8000898:	d002      	beq.n	80008a0 <MyPrintf+0x60>
		{

			vPortFree(Output);
 800089a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800089c:	f006 f878 	bl	8006990 <vPortFree>
		}
	}
	osMutexRelease(PrintfMutex);
 80008a0:	4b06      	ldr	r3, [pc, #24]	; (80008bc <MyPrintf+0x7c>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	4618      	mov	r0, r3
 80008a6:	f003 f926 	bl	8003af6 <osMutexRelease>

	return size;
 80008aa:	683b      	ldr	r3, [r7, #0]
}
 80008ac:	4618      	mov	r0, r3
 80008ae:	3770      	adds	r7, #112	; 0x70
 80008b0:	46bd      	mov	sp, r7
 80008b2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80008b6:	b004      	add	sp, #16
 80008b8:	4770      	bx	lr
 80008ba:	bf00      	nop
 80008bc:	20000194 	.word	0x20000194
 80008c0:	200001c0 	.word	0x200001c0

080008c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008c8:	f000 fba0 	bl	800100c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008cc:	f000 f836 	bl	800093c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008d0:	f000 f906 	bl	8000ae0 <MX_GPIO_Init>
  MX_CAN1_Init();
 80008d4:	f000 f8a2 	bl	8000a1c <MX_CAN1_Init>
  MX_USART1_UART_Init();
 80008d8:	f000 f8d8 	bl	8000a8c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80008dc:	f002 fe9e 	bl	800361c <osKernelInitialize>
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of CANTransmit_Timer */
  CANTransmit_TimerHandle = osTimerNew(CANTransmit_Timer_cb, osTimerPeriodic, NULL, &CANTransmit_Timer_attributes);
 80008e0:	4b0f      	ldr	r3, [pc, #60]	; (8000920 <main+0x5c>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	2101      	movs	r1, #1
 80008e6:	480f      	ldr	r0, [pc, #60]	; (8000924 <main+0x60>)
 80008e8:	f002 ff8a 	bl	8003800 <osTimerNew>
 80008ec:	4603      	mov	r3, r0
 80008ee:	4a0e      	ldr	r2, [pc, #56]	; (8000928 <main+0x64>)
 80008f0:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  MyPrintf_Init();
 80008f2:	f7ff ff97 	bl	8000824 <MyPrintf_Init>
  CAN_Config(&hcan1);
 80008f6:	480d      	ldr	r0, [pc, #52]	; (800092c <main+0x68>)
 80008f8:	f7ff fec5 	bl	8000686 <CAN_Config>
  osTimerStart(CANTransmit_TimerHandle, 20);
 80008fc:	4b0a      	ldr	r3, [pc, #40]	; (8000928 <main+0x64>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	2114      	movs	r1, #20
 8000902:	4618      	mov	r0, r3
 8000904:	f002 fff8 	bl	80038f8 <osTimerStart>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of CANRcvTask */
  CANRcvTaskHandle = osThreadNew(CANRcv, NULL, &CANRcvTask_attributes);
 8000908:	4a09      	ldr	r2, [pc, #36]	; (8000930 <main+0x6c>)
 800090a:	2100      	movs	r1, #0
 800090c:	4809      	ldr	r0, [pc, #36]	; (8000934 <main+0x70>)
 800090e:	f002 fecf 	bl	80036b0 <osThreadNew>
 8000912:	4603      	mov	r3, r0
 8000914:	4a08      	ldr	r2, [pc, #32]	; (8000938 <main+0x74>)
 8000916:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000918:	f002 fea4 	bl	8003664 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800091c:	e7fe      	b.n	800091c <main+0x58>
 800091e:	bf00      	nop
 8000920:	08008108 	.word	0x08008108
 8000924:	08000b51 	.word	0x08000b51
 8000928:	20000208 	.word	0x20000208
 800092c:	20000198 	.word	0x20000198
 8000930:	080080e4 	.word	0x080080e4
 8000934:	08000b31 	.word	0x08000b31
 8000938:	20000204 	.word	0x20000204

0800093c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b094      	sub	sp, #80	; 0x50
 8000940:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000942:	f107 0320 	add.w	r3, r7, #32
 8000946:	2230      	movs	r2, #48	; 0x30
 8000948:	2100      	movs	r1, #0
 800094a:	4618      	mov	r0, r3
 800094c:	f006 fa6f 	bl	8006e2e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000950:	f107 030c 	add.w	r3, r7, #12
 8000954:	2200      	movs	r2, #0
 8000956:	601a      	str	r2, [r3, #0]
 8000958:	605a      	str	r2, [r3, #4]
 800095a:	609a      	str	r2, [r3, #8]
 800095c:	60da      	str	r2, [r3, #12]
 800095e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000960:	2300      	movs	r3, #0
 8000962:	60bb      	str	r3, [r7, #8]
 8000964:	4b2b      	ldr	r3, [pc, #172]	; (8000a14 <SystemClock_Config+0xd8>)
 8000966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000968:	4a2a      	ldr	r2, [pc, #168]	; (8000a14 <SystemClock_Config+0xd8>)
 800096a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800096e:	6413      	str	r3, [r2, #64]	; 0x40
 8000970:	4b28      	ldr	r3, [pc, #160]	; (8000a14 <SystemClock_Config+0xd8>)
 8000972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000974:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000978:	60bb      	str	r3, [r7, #8]
 800097a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800097c:	2300      	movs	r3, #0
 800097e:	607b      	str	r3, [r7, #4]
 8000980:	4b25      	ldr	r3, [pc, #148]	; (8000a18 <SystemClock_Config+0xdc>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	4a24      	ldr	r2, [pc, #144]	; (8000a18 <SystemClock_Config+0xdc>)
 8000986:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800098a:	6013      	str	r3, [r2, #0]
 800098c:	4b22      	ldr	r3, [pc, #136]	; (8000a18 <SystemClock_Config+0xdc>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000994:	607b      	str	r3, [r7, #4]
 8000996:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000998:	2301      	movs	r3, #1
 800099a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800099c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009a0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009a2:	2302      	movs	r3, #2
 80009a4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009a6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80009aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80009ac:	2304      	movs	r3, #4
 80009ae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 80009b0:	23b4      	movs	r3, #180	; 0xb4
 80009b2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009b4:	2302      	movs	r3, #2
 80009b6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80009b8:	2304      	movs	r3, #4
 80009ba:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009bc:	f107 0320 	add.w	r3, r7, #32
 80009c0:	4618      	mov	r0, r3
 80009c2:	f001 faad 	bl	8001f20 <HAL_RCC_OscConfig>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d001      	beq.n	80009d0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80009cc:	f000 f8e0 	bl	8000b90 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80009d0:	f001 fa56 	bl	8001e80 <HAL_PWREx_EnableOverDrive>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d001      	beq.n	80009de <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80009da:	f000 f8d9 	bl	8000b90 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009de:	230f      	movs	r3, #15
 80009e0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009e2:	2302      	movs	r3, #2
 80009e4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009e6:	2300      	movs	r3, #0
 80009e8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80009ea:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80009ee:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80009f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009f4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80009f6:	f107 030c 	add.w	r3, r7, #12
 80009fa:	2105      	movs	r1, #5
 80009fc:	4618      	mov	r0, r3
 80009fe:	f001 fd07 	bl	8002410 <HAL_RCC_ClockConfig>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d001      	beq.n	8000a0c <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000a08:	f000 f8c2 	bl	8000b90 <Error_Handler>
  }
}
 8000a0c:	bf00      	nop
 8000a0e:	3750      	adds	r7, #80	; 0x50
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	40023800 	.word	0x40023800
 8000a18:	40007000 	.word	0x40007000

08000a1c <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000a20:	4b18      	ldr	r3, [pc, #96]	; (8000a84 <MX_CAN1_Init+0x68>)
 8000a22:	4a19      	ldr	r2, [pc, #100]	; (8000a88 <MX_CAN1_Init+0x6c>)
 8000a24:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 5;
 8000a26:	4b17      	ldr	r3, [pc, #92]	; (8000a84 <MX_CAN1_Init+0x68>)
 8000a28:	2205      	movs	r2, #5
 8000a2a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000a2c:	4b15      	ldr	r3, [pc, #84]	; (8000a84 <MX_CAN1_Init+0x68>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_2TQ;
 8000a32:	4b14      	ldr	r3, [pc, #80]	; (8000a84 <MX_CAN1_Init+0x68>)
 8000a34:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000a38:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 8000a3a:	4b12      	ldr	r3, [pc, #72]	; (8000a84 <MX_CAN1_Init+0x68>)
 8000a3c:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8000a40:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 8000a42:	4b10      	ldr	r3, [pc, #64]	; (8000a84 <MX_CAN1_Init+0x68>)
 8000a44:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8000a48:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000a4a:	4b0e      	ldr	r3, [pc, #56]	; (8000a84 <MX_CAN1_Init+0x68>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000a50:	4b0c      	ldr	r3, [pc, #48]	; (8000a84 <MX_CAN1_Init+0x68>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000a56:	4b0b      	ldr	r3, [pc, #44]	; (8000a84 <MX_CAN1_Init+0x68>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000a5c:	4b09      	ldr	r3, [pc, #36]	; (8000a84 <MX_CAN1_Init+0x68>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000a62:	4b08      	ldr	r3, [pc, #32]	; (8000a84 <MX_CAN1_Init+0x68>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000a68:	4b06      	ldr	r3, [pc, #24]	; (8000a84 <MX_CAN1_Init+0x68>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000a6e:	4805      	ldr	r0, [pc, #20]	; (8000a84 <MX_CAN1_Init+0x68>)
 8000a70:	f000 fb0e 	bl	8001090 <HAL_CAN_Init>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d001      	beq.n	8000a7e <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 8000a7a:	f000 f889 	bl	8000b90 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000a7e:	bf00      	nop
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	20000198 	.word	0x20000198
 8000a88:	40006400 	.word	0x40006400

08000a8c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a90:	4b11      	ldr	r3, [pc, #68]	; (8000ad8 <MX_USART1_UART_Init+0x4c>)
 8000a92:	4a12      	ldr	r2, [pc, #72]	; (8000adc <MX_USART1_UART_Init+0x50>)
 8000a94:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000a96:	4b10      	ldr	r3, [pc, #64]	; (8000ad8 <MX_USART1_UART_Init+0x4c>)
 8000a98:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a9c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a9e:	4b0e      	ldr	r3, [pc, #56]	; (8000ad8 <MX_USART1_UART_Init+0x4c>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000aa4:	4b0c      	ldr	r3, [pc, #48]	; (8000ad8 <MX_USART1_UART_Init+0x4c>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000aaa:	4b0b      	ldr	r3, [pc, #44]	; (8000ad8 <MX_USART1_UART_Init+0x4c>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ab0:	4b09      	ldr	r3, [pc, #36]	; (8000ad8 <MX_USART1_UART_Init+0x4c>)
 8000ab2:	220c      	movs	r2, #12
 8000ab4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ab6:	4b08      	ldr	r3, [pc, #32]	; (8000ad8 <MX_USART1_UART_Init+0x4c>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000abc:	4b06      	ldr	r3, [pc, #24]	; (8000ad8 <MX_USART1_UART_Init+0x4c>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ac2:	4805      	ldr	r0, [pc, #20]	; (8000ad8 <MX_USART1_UART_Init+0x4c>)
 8000ac4:	f002 f9a4 	bl	8002e10 <HAL_UART_Init>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d001      	beq.n	8000ad2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000ace:	f000 f85f 	bl	8000b90 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000ad2:	bf00      	nop
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	200001c0 	.word	0x200001c0
 8000adc:	40011000 	.word	0x40011000

08000ae0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	b083      	sub	sp, #12
 8000ae4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	607b      	str	r3, [r7, #4]
 8000aea:	4b10      	ldr	r3, [pc, #64]	; (8000b2c <MX_GPIO_Init+0x4c>)
 8000aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aee:	4a0f      	ldr	r2, [pc, #60]	; (8000b2c <MX_GPIO_Init+0x4c>)
 8000af0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000af4:	6313      	str	r3, [r2, #48]	; 0x30
 8000af6:	4b0d      	ldr	r3, [pc, #52]	; (8000b2c <MX_GPIO_Init+0x4c>)
 8000af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000afe:	607b      	str	r3, [r7, #4]
 8000b00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b02:	2300      	movs	r3, #0
 8000b04:	603b      	str	r3, [r7, #0]
 8000b06:	4b09      	ldr	r3, [pc, #36]	; (8000b2c <MX_GPIO_Init+0x4c>)
 8000b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0a:	4a08      	ldr	r2, [pc, #32]	; (8000b2c <MX_GPIO_Init+0x4c>)
 8000b0c:	f043 0301 	orr.w	r3, r3, #1
 8000b10:	6313      	str	r3, [r2, #48]	; 0x30
 8000b12:	4b06      	ldr	r3, [pc, #24]	; (8000b2c <MX_GPIO_Init+0x4c>)
 8000b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b16:	f003 0301 	and.w	r3, r3, #1
 8000b1a:	603b      	str	r3, [r7, #0]
 8000b1c:	683b      	ldr	r3, [r7, #0]

}
 8000b1e:	bf00      	nop
 8000b20:	370c      	adds	r7, #12
 8000b22:	46bd      	mov	sp, r7
 8000b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop
 8000b2c:	40023800 	.word	0x40023800

08000b30 <CANRcv>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_CANRcv */
void CANRcv(void *argument)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b082      	sub	sp, #8
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
	MyPrintf("Verify Start Rcv \r\n");
 8000b38:	4803      	ldr	r0, [pc, #12]	; (8000b48 <CANRcv+0x18>)
 8000b3a:	f7ff fe81 	bl	8000840 <MyPrintf>
  for(;;)
  {
//	  osDelay(1);
	  CAN_Receive(&hcan1);
 8000b3e:	4803      	ldr	r0, [pc, #12]	; (8000b4c <CANRcv+0x1c>)
 8000b40:	f7ff fdb2 	bl	80006a8 <CAN_Receive>
 8000b44:	e7fb      	b.n	8000b3e <CANRcv+0xe>
 8000b46:	bf00      	nop
 8000b48:	080080a8 	.word	0x080080a8
 8000b4c:	20000198 	.word	0x20000198

08000b50 <CANTransmit_Timer_cb>:
  /* USER CODE END 5 */
}

/* CANTransmit_Timer_cb function */
void CANTransmit_Timer_cb(void *argument)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CANTransmit_Timer_cb */
//	MyPrintf("Verify Transmit \r\n");
	CAN_Transmit(&hcan1);
 8000b58:	4803      	ldr	r0, [pc, #12]	; (8000b68 <CANTransmit_Timer_cb+0x18>)
 8000b5a:	f7ff fe0f 	bl	800077c <CAN_Transmit>
  /* USER CODE END CANTransmit_Timer_cb */
}
 8000b5e:	bf00      	nop
 8000b60:	3708      	adds	r7, #8
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	20000198 	.word	0x20000198

08000b6c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b082      	sub	sp, #8
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	4a04      	ldr	r2, [pc, #16]	; (8000b8c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b7a:	4293      	cmp	r3, r2
 8000b7c:	d101      	bne.n	8000b82 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b7e:	f000 fa67 	bl	8001050 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b82:	bf00      	nop
 8000b84:	3708      	adds	r7, #8
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	40001000 	.word	0x40001000

08000b90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b94:	b672      	cpsid	i
}
 8000b96:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b98:	e7fe      	b.n	8000b98 <Error_Handler+0x8>
	...

08000b9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b082      	sub	sp, #8
 8000ba0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	607b      	str	r3, [r7, #4]
 8000ba6:	4b12      	ldr	r3, [pc, #72]	; (8000bf0 <HAL_MspInit+0x54>)
 8000ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000baa:	4a11      	ldr	r2, [pc, #68]	; (8000bf0 <HAL_MspInit+0x54>)
 8000bac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bb0:	6453      	str	r3, [r2, #68]	; 0x44
 8000bb2:	4b0f      	ldr	r3, [pc, #60]	; (8000bf0 <HAL_MspInit+0x54>)
 8000bb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bba:	607b      	str	r3, [r7, #4]
 8000bbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	603b      	str	r3, [r7, #0]
 8000bc2:	4b0b      	ldr	r3, [pc, #44]	; (8000bf0 <HAL_MspInit+0x54>)
 8000bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bc6:	4a0a      	ldr	r2, [pc, #40]	; (8000bf0 <HAL_MspInit+0x54>)
 8000bc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bcc:	6413      	str	r3, [r2, #64]	; 0x40
 8000bce:	4b08      	ldr	r3, [pc, #32]	; (8000bf0 <HAL_MspInit+0x54>)
 8000bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bd6:	603b      	str	r3, [r7, #0]
 8000bd8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000bda:	2200      	movs	r2, #0
 8000bdc:	210f      	movs	r1, #15
 8000bde:	f06f 0001 	mvn.w	r0, #1
 8000be2:	f000 ff77 	bl	8001ad4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000be6:	bf00      	nop
 8000be8:	3708      	adds	r7, #8
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	40023800 	.word	0x40023800

08000bf4 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b08a      	sub	sp, #40	; 0x28
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bfc:	f107 0314 	add.w	r3, r7, #20
 8000c00:	2200      	movs	r2, #0
 8000c02:	601a      	str	r2, [r3, #0]
 8000c04:	605a      	str	r2, [r3, #4]
 8000c06:	609a      	str	r2, [r3, #8]
 8000c08:	60da      	str	r2, [r3, #12]
 8000c0a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	4a19      	ldr	r2, [pc, #100]	; (8000c78 <HAL_CAN_MspInit+0x84>)
 8000c12:	4293      	cmp	r3, r2
 8000c14:	d12c      	bne.n	8000c70 <HAL_CAN_MspInit+0x7c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000c16:	2300      	movs	r3, #0
 8000c18:	613b      	str	r3, [r7, #16]
 8000c1a:	4b18      	ldr	r3, [pc, #96]	; (8000c7c <HAL_CAN_MspInit+0x88>)
 8000c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c1e:	4a17      	ldr	r2, [pc, #92]	; (8000c7c <HAL_CAN_MspInit+0x88>)
 8000c20:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c24:	6413      	str	r3, [r2, #64]	; 0x40
 8000c26:	4b15      	ldr	r3, [pc, #84]	; (8000c7c <HAL_CAN_MspInit+0x88>)
 8000c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c2e:	613b      	str	r3, [r7, #16]
 8000c30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c32:	2300      	movs	r3, #0
 8000c34:	60fb      	str	r3, [r7, #12]
 8000c36:	4b11      	ldr	r3, [pc, #68]	; (8000c7c <HAL_CAN_MspInit+0x88>)
 8000c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3a:	4a10      	ldr	r2, [pc, #64]	; (8000c7c <HAL_CAN_MspInit+0x88>)
 8000c3c:	f043 0301 	orr.w	r3, r3, #1
 8000c40:	6313      	str	r3, [r2, #48]	; 0x30
 8000c42:	4b0e      	ldr	r3, [pc, #56]	; (8000c7c <HAL_CAN_MspInit+0x88>)
 8000c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c46:	f003 0301 	and.w	r3, r3, #1
 8000c4a:	60fb      	str	r3, [r7, #12]
 8000c4c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000c4e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000c52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c54:	2302      	movs	r3, #2
 8000c56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c5c:	2303      	movs	r3, #3
 8000c5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000c60:	2309      	movs	r3, #9
 8000c62:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c64:	f107 0314 	add.w	r3, r7, #20
 8000c68:	4619      	mov	r1, r3
 8000c6a:	4805      	ldr	r0, [pc, #20]	; (8000c80 <HAL_CAN_MspInit+0x8c>)
 8000c6c:	f000 ff5c 	bl	8001b28 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000c70:	bf00      	nop
 8000c72:	3728      	adds	r7, #40	; 0x28
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	40006400 	.word	0x40006400
 8000c7c:	40023800 	.word	0x40023800
 8000c80:	40020000 	.word	0x40020000

08000c84 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b08a      	sub	sp, #40	; 0x28
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c8c:	f107 0314 	add.w	r3, r7, #20
 8000c90:	2200      	movs	r2, #0
 8000c92:	601a      	str	r2, [r3, #0]
 8000c94:	605a      	str	r2, [r3, #4]
 8000c96:	609a      	str	r2, [r3, #8]
 8000c98:	60da      	str	r2, [r3, #12]
 8000c9a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	4a19      	ldr	r2, [pc, #100]	; (8000d08 <HAL_UART_MspInit+0x84>)
 8000ca2:	4293      	cmp	r3, r2
 8000ca4:	d12c      	bne.n	8000d00 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	613b      	str	r3, [r7, #16]
 8000caa:	4b18      	ldr	r3, [pc, #96]	; (8000d0c <HAL_UART_MspInit+0x88>)
 8000cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cae:	4a17      	ldr	r2, [pc, #92]	; (8000d0c <HAL_UART_MspInit+0x88>)
 8000cb0:	f043 0310 	orr.w	r3, r3, #16
 8000cb4:	6453      	str	r3, [r2, #68]	; 0x44
 8000cb6:	4b15      	ldr	r3, [pc, #84]	; (8000d0c <HAL_UART_MspInit+0x88>)
 8000cb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cba:	f003 0310 	and.w	r3, r3, #16
 8000cbe:	613b      	str	r3, [r7, #16]
 8000cc0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	60fb      	str	r3, [r7, #12]
 8000cc6:	4b11      	ldr	r3, [pc, #68]	; (8000d0c <HAL_UART_MspInit+0x88>)
 8000cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cca:	4a10      	ldr	r2, [pc, #64]	; (8000d0c <HAL_UART_MspInit+0x88>)
 8000ccc:	f043 0301 	orr.w	r3, r3, #1
 8000cd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cd2:	4b0e      	ldr	r3, [pc, #56]	; (8000d0c <HAL_UART_MspInit+0x88>)
 8000cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd6:	f003 0301 	and.w	r3, r3, #1
 8000cda:	60fb      	str	r3, [r7, #12]
 8000cdc:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000cde:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000ce2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce4:	2302      	movs	r3, #2
 8000ce6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cec:	2303      	movs	r3, #3
 8000cee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000cf0:	2307      	movs	r3, #7
 8000cf2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cf4:	f107 0314 	add.w	r3, r7, #20
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	4805      	ldr	r0, [pc, #20]	; (8000d10 <HAL_UART_MspInit+0x8c>)
 8000cfc:	f000 ff14 	bl	8001b28 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000d00:	bf00      	nop
 8000d02:	3728      	adds	r7, #40	; 0x28
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	40011000 	.word	0x40011000
 8000d0c:	40023800 	.word	0x40023800
 8000d10:	40020000 	.word	0x40020000

08000d14 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b08e      	sub	sp, #56	; 0x38
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000d20:	2300      	movs	r3, #0
 8000d22:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000d24:	2300      	movs	r3, #0
 8000d26:	60fb      	str	r3, [r7, #12]
 8000d28:	4b33      	ldr	r3, [pc, #204]	; (8000df8 <HAL_InitTick+0xe4>)
 8000d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d2c:	4a32      	ldr	r2, [pc, #200]	; (8000df8 <HAL_InitTick+0xe4>)
 8000d2e:	f043 0310 	orr.w	r3, r3, #16
 8000d32:	6413      	str	r3, [r2, #64]	; 0x40
 8000d34:	4b30      	ldr	r3, [pc, #192]	; (8000df8 <HAL_InitTick+0xe4>)
 8000d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d38:	f003 0310 	and.w	r3, r3, #16
 8000d3c:	60fb      	str	r3, [r7, #12]
 8000d3e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d40:	f107 0210 	add.w	r2, r7, #16
 8000d44:	f107 0314 	add.w	r3, r7, #20
 8000d48:	4611      	mov	r1, r2
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f001 fd80 	bl	8002850 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000d50:	6a3b      	ldr	r3, [r7, #32]
 8000d52:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000d54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d103      	bne.n	8000d62 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000d5a:	f001 fd51 	bl	8002800 <HAL_RCC_GetPCLK1Freq>
 8000d5e:	6378      	str	r0, [r7, #52]	; 0x34
 8000d60:	e004      	b.n	8000d6c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000d62:	f001 fd4d 	bl	8002800 <HAL_RCC_GetPCLK1Freq>
 8000d66:	4603      	mov	r3, r0
 8000d68:	005b      	lsls	r3, r3, #1
 8000d6a:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d6e:	4a23      	ldr	r2, [pc, #140]	; (8000dfc <HAL_InitTick+0xe8>)
 8000d70:	fba2 2303 	umull	r2, r3, r2, r3
 8000d74:	0c9b      	lsrs	r3, r3, #18
 8000d76:	3b01      	subs	r3, #1
 8000d78:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000d7a:	4b21      	ldr	r3, [pc, #132]	; (8000e00 <HAL_InitTick+0xec>)
 8000d7c:	4a21      	ldr	r2, [pc, #132]	; (8000e04 <HAL_InitTick+0xf0>)
 8000d7e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000d80:	4b1f      	ldr	r3, [pc, #124]	; (8000e00 <HAL_InitTick+0xec>)
 8000d82:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d86:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000d88:	4a1d      	ldr	r2, [pc, #116]	; (8000e00 <HAL_InitTick+0xec>)
 8000d8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d8c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000d8e:	4b1c      	ldr	r3, [pc, #112]	; (8000e00 <HAL_InitTick+0xec>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d94:	4b1a      	ldr	r3, [pc, #104]	; (8000e00 <HAL_InitTick+0xec>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d9a:	4b19      	ldr	r3, [pc, #100]	; (8000e00 <HAL_InitTick+0xec>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000da0:	4817      	ldr	r0, [pc, #92]	; (8000e00 <HAL_InitTick+0xec>)
 8000da2:	f001 fd87 	bl	80028b4 <HAL_TIM_Base_Init>
 8000da6:	4603      	mov	r3, r0
 8000da8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000dac:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d11b      	bne.n	8000dec <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000db4:	4812      	ldr	r0, [pc, #72]	; (8000e00 <HAL_InitTick+0xec>)
 8000db6:	f001 fdd7 	bl	8002968 <HAL_TIM_Base_Start_IT>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000dc0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d111      	bne.n	8000dec <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000dc8:	2036      	movs	r0, #54	; 0x36
 8000dca:	f000 fe9f 	bl	8001b0c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	2b0f      	cmp	r3, #15
 8000dd2:	d808      	bhi.n	8000de6 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	6879      	ldr	r1, [r7, #4]
 8000dd8:	2036      	movs	r0, #54	; 0x36
 8000dda:	f000 fe7b 	bl	8001ad4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000dde:	4a0a      	ldr	r2, [pc, #40]	; (8000e08 <HAL_InitTick+0xf4>)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	6013      	str	r3, [r2, #0]
 8000de4:	e002      	b.n	8000dec <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000de6:	2301      	movs	r3, #1
 8000de8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000dec:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000df0:	4618      	mov	r0, r3
 8000df2:	3738      	adds	r7, #56	; 0x38
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	40023800 	.word	0x40023800
 8000dfc:	431bde83 	.word	0x431bde83
 8000e00:	2000020c 	.word	0x2000020c
 8000e04:	40001000 	.word	0x40001000
 8000e08:	20000004 	.word	0x20000004

08000e0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e10:	e7fe      	b.n	8000e10 <NMI_Handler+0x4>

08000e12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e12:	b480      	push	{r7}
 8000e14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e16:	e7fe      	b.n	8000e16 <HardFault_Handler+0x4>

08000e18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e1c:	e7fe      	b.n	8000e1c <MemManage_Handler+0x4>

08000e1e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e1e:	b480      	push	{r7}
 8000e20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e22:	e7fe      	b.n	8000e22 <BusFault_Handler+0x4>

08000e24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e28:	e7fe      	b.n	8000e28 <UsageFault_Handler+0x4>

08000e2a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e2a:	b480      	push	{r7}
 8000e2c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e2e:	bf00      	nop
 8000e30:	46bd      	mov	sp, r7
 8000e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e36:	4770      	bx	lr

08000e38 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000e3c:	4802      	ldr	r0, [pc, #8]	; (8000e48 <TIM6_DAC_IRQHandler+0x10>)
 8000e3e:	f001 fe03 	bl	8002a48 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000e42:	bf00      	nop
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	2000020c 	.word	0x2000020c

08000e4c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b086      	sub	sp, #24
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	60f8      	str	r0, [r7, #12]
 8000e54:	60b9      	str	r1, [r7, #8]
 8000e56:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e58:	2300      	movs	r3, #0
 8000e5a:	617b      	str	r3, [r7, #20]
 8000e5c:	e00a      	b.n	8000e74 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000e5e:	f3af 8000 	nop.w
 8000e62:	4601      	mov	r1, r0
 8000e64:	68bb      	ldr	r3, [r7, #8]
 8000e66:	1c5a      	adds	r2, r3, #1
 8000e68:	60ba      	str	r2, [r7, #8]
 8000e6a:	b2ca      	uxtb	r2, r1
 8000e6c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e6e:	697b      	ldr	r3, [r7, #20]
 8000e70:	3301      	adds	r3, #1
 8000e72:	617b      	str	r3, [r7, #20]
 8000e74:	697a      	ldr	r2, [r7, #20]
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	429a      	cmp	r2, r3
 8000e7a:	dbf0      	blt.n	8000e5e <_read+0x12>
	}

return len;
 8000e7c:	687b      	ldr	r3, [r7, #4]
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	3718      	adds	r7, #24
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}

08000e86 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e86:	b580      	push	{r7, lr}
 8000e88:	b086      	sub	sp, #24
 8000e8a:	af00      	add	r7, sp, #0
 8000e8c:	60f8      	str	r0, [r7, #12]
 8000e8e:	60b9      	str	r1, [r7, #8]
 8000e90:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e92:	2300      	movs	r3, #0
 8000e94:	617b      	str	r3, [r7, #20]
 8000e96:	e009      	b.n	8000eac <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000e98:	68bb      	ldr	r3, [r7, #8]
 8000e9a:	1c5a      	adds	r2, r3, #1
 8000e9c:	60ba      	str	r2, [r7, #8]
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ea6:	697b      	ldr	r3, [r7, #20]
 8000ea8:	3301      	adds	r3, #1
 8000eaa:	617b      	str	r3, [r7, #20]
 8000eac:	697a      	ldr	r2, [r7, #20]
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	429a      	cmp	r2, r3
 8000eb2:	dbf1      	blt.n	8000e98 <_write+0x12>
	}
	return len;
 8000eb4:	687b      	ldr	r3, [r7, #4]
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	3718      	adds	r7, #24
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}

08000ebe <_close>:

int _close(int file)
{
 8000ebe:	b480      	push	{r7}
 8000ec0:	b083      	sub	sp, #12
 8000ec2:	af00      	add	r7, sp, #0
 8000ec4:	6078      	str	r0, [r7, #4]
	return -1;
 8000ec6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000eca:	4618      	mov	r0, r3
 8000ecc:	370c      	adds	r7, #12
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr

08000ed6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ed6:	b480      	push	{r7}
 8000ed8:	b083      	sub	sp, #12
 8000eda:	af00      	add	r7, sp, #0
 8000edc:	6078      	str	r0, [r7, #4]
 8000ede:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ee6:	605a      	str	r2, [r3, #4]
	return 0;
 8000ee8:	2300      	movs	r3, #0
}
 8000eea:	4618      	mov	r0, r3
 8000eec:	370c      	adds	r7, #12
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr

08000ef6 <_isatty>:

int _isatty(int file)
{
 8000ef6:	b480      	push	{r7}
 8000ef8:	b083      	sub	sp, #12
 8000efa:	af00      	add	r7, sp, #0
 8000efc:	6078      	str	r0, [r7, #4]
	return 1;
 8000efe:	2301      	movs	r3, #1
}
 8000f00:	4618      	mov	r0, r3
 8000f02:	370c      	adds	r7, #12
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr

08000f0c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b085      	sub	sp, #20
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	60f8      	str	r0, [r7, #12]
 8000f14:	60b9      	str	r1, [r7, #8]
 8000f16:	607a      	str	r2, [r7, #4]
	return 0;
 8000f18:	2300      	movs	r3, #0
}
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	3714      	adds	r7, #20
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr
	...

08000f28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b086      	sub	sp, #24
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f30:	4a14      	ldr	r2, [pc, #80]	; (8000f84 <_sbrk+0x5c>)
 8000f32:	4b15      	ldr	r3, [pc, #84]	; (8000f88 <_sbrk+0x60>)
 8000f34:	1ad3      	subs	r3, r2, r3
 8000f36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f38:	697b      	ldr	r3, [r7, #20]
 8000f3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f3c:	4b13      	ldr	r3, [pc, #76]	; (8000f8c <_sbrk+0x64>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d102      	bne.n	8000f4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f44:	4b11      	ldr	r3, [pc, #68]	; (8000f8c <_sbrk+0x64>)
 8000f46:	4a12      	ldr	r2, [pc, #72]	; (8000f90 <_sbrk+0x68>)
 8000f48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f4a:	4b10      	ldr	r3, [pc, #64]	; (8000f8c <_sbrk+0x64>)
 8000f4c:	681a      	ldr	r2, [r3, #0]
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	4413      	add	r3, r2
 8000f52:	693a      	ldr	r2, [r7, #16]
 8000f54:	429a      	cmp	r2, r3
 8000f56:	d207      	bcs.n	8000f68 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f58:	f005 fe38 	bl	8006bcc <__errno>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	220c      	movs	r2, #12
 8000f60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f62:	f04f 33ff 	mov.w	r3, #4294967295
 8000f66:	e009      	b.n	8000f7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f68:	4b08      	ldr	r3, [pc, #32]	; (8000f8c <_sbrk+0x64>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f6e:	4b07      	ldr	r3, [pc, #28]	; (8000f8c <_sbrk+0x64>)
 8000f70:	681a      	ldr	r2, [r3, #0]
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	4413      	add	r3, r2
 8000f76:	4a05      	ldr	r2, [pc, #20]	; (8000f8c <_sbrk+0x64>)
 8000f78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f7a:	68fb      	ldr	r3, [r7, #12]
}
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	3718      	adds	r7, #24
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	20030000 	.word	0x20030000
 8000f88:	00000400 	.word	0x00000400
 8000f8c:	20000254 	.word	0x20000254
 8000f90:	20004c80 	.word	0x20004c80

08000f94 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f98:	4b06      	ldr	r3, [pc, #24]	; (8000fb4 <SystemInit+0x20>)
 8000f9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f9e:	4a05      	ldr	r2, [pc, #20]	; (8000fb4 <SystemInit+0x20>)
 8000fa0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fa4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fa8:	bf00      	nop
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop
 8000fb4:	e000ed00 	.word	0xe000ed00

08000fb8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000fb8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ff0 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000fbc:	480d      	ldr	r0, [pc, #52]	; (8000ff4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000fbe:	490e      	ldr	r1, [pc, #56]	; (8000ff8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000fc0:	4a0e      	ldr	r2, [pc, #56]	; (8000ffc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000fc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fc4:	e002      	b.n	8000fcc <LoopCopyDataInit>

08000fc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fca:	3304      	adds	r3, #4

08000fcc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fcc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fd0:	d3f9      	bcc.n	8000fc6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fd2:	4a0b      	ldr	r2, [pc, #44]	; (8001000 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000fd4:	4c0b      	ldr	r4, [pc, #44]	; (8001004 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000fd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fd8:	e001      	b.n	8000fde <LoopFillZerobss>

08000fda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fdc:	3204      	adds	r2, #4

08000fde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fe0:	d3fb      	bcc.n	8000fda <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000fe2:	f7ff ffd7 	bl	8000f94 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fe6:	f005 feed 	bl	8006dc4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fea:	f7ff fc6b 	bl	80008c4 <main>
  bx  lr    
 8000fee:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000ff0:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000ff4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ff8:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000ffc:	080081d8 	.word	0x080081d8
  ldr r2, =_sbss
 8001000:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001004:	20004c7c 	.word	0x20004c7c

08001008 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001008:	e7fe      	b.n	8001008 <ADC_IRQHandler>
	...

0800100c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001010:	4b0e      	ldr	r3, [pc, #56]	; (800104c <HAL_Init+0x40>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a0d      	ldr	r2, [pc, #52]	; (800104c <HAL_Init+0x40>)
 8001016:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800101a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800101c:	4b0b      	ldr	r3, [pc, #44]	; (800104c <HAL_Init+0x40>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4a0a      	ldr	r2, [pc, #40]	; (800104c <HAL_Init+0x40>)
 8001022:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001026:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001028:	4b08      	ldr	r3, [pc, #32]	; (800104c <HAL_Init+0x40>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a07      	ldr	r2, [pc, #28]	; (800104c <HAL_Init+0x40>)
 800102e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001032:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001034:	2003      	movs	r0, #3
 8001036:	f000 fd42 	bl	8001abe <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800103a:	200f      	movs	r0, #15
 800103c:	f7ff fe6a 	bl	8000d14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001040:	f7ff fdac 	bl	8000b9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001044:	2300      	movs	r3, #0
}
 8001046:	4618      	mov	r0, r3
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	40023c00 	.word	0x40023c00

08001050 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001054:	4b06      	ldr	r3, [pc, #24]	; (8001070 <HAL_IncTick+0x20>)
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	461a      	mov	r2, r3
 800105a:	4b06      	ldr	r3, [pc, #24]	; (8001074 <HAL_IncTick+0x24>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	4413      	add	r3, r2
 8001060:	4a04      	ldr	r2, [pc, #16]	; (8001074 <HAL_IncTick+0x24>)
 8001062:	6013      	str	r3, [r2, #0]
}
 8001064:	bf00      	nop
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop
 8001070:	20000008 	.word	0x20000008
 8001074:	20000258 	.word	0x20000258

08001078 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
  return uwTick;
 800107c:	4b03      	ldr	r3, [pc, #12]	; (800108c <HAL_GetTick+0x14>)
 800107e:	681b      	ldr	r3, [r3, #0]
}
 8001080:	4618      	mov	r0, r3
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr
 800108a:	bf00      	nop
 800108c:	20000258 	.word	0x20000258

08001090 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b084      	sub	sp, #16
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d101      	bne.n	80010a2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800109e:	2301      	movs	r3, #1
 80010a0:	e0ed      	b.n	800127e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80010a8:	b2db      	uxtb	r3, r3
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d102      	bne.n	80010b4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80010ae:	6878      	ldr	r0, [r7, #4]
 80010b0:	f7ff fda0 	bl	8000bf4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	681a      	ldr	r2, [r3, #0]
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	f042 0201 	orr.w	r2, r2, #1
 80010c2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80010c4:	f7ff ffd8 	bl	8001078 <HAL_GetTick>
 80010c8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80010ca:	e012      	b.n	80010f2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80010cc:	f7ff ffd4 	bl	8001078 <HAL_GetTick>
 80010d0:	4602      	mov	r2, r0
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	1ad3      	subs	r3, r2, r3
 80010d6:	2b0a      	cmp	r3, #10
 80010d8:	d90b      	bls.n	80010f2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010de:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	2205      	movs	r2, #5
 80010ea:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80010ee:	2301      	movs	r3, #1
 80010f0:	e0c5      	b.n	800127e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	f003 0301 	and.w	r3, r3, #1
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d0e5      	beq.n	80010cc <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	681a      	ldr	r2, [r3, #0]
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f022 0202 	bic.w	r2, r2, #2
 800110e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001110:	f7ff ffb2 	bl	8001078 <HAL_GetTick>
 8001114:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001116:	e012      	b.n	800113e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001118:	f7ff ffae 	bl	8001078 <HAL_GetTick>
 800111c:	4602      	mov	r2, r0
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	1ad3      	subs	r3, r2, r3
 8001122:	2b0a      	cmp	r3, #10
 8001124:	d90b      	bls.n	800113e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800112a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	2205      	movs	r2, #5
 8001136:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800113a:	2301      	movs	r3, #1
 800113c:	e09f      	b.n	800127e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	f003 0302 	and.w	r3, r3, #2
 8001148:	2b00      	cmp	r3, #0
 800114a:	d1e5      	bne.n	8001118 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	7e1b      	ldrb	r3, [r3, #24]
 8001150:	2b01      	cmp	r3, #1
 8001152:	d108      	bne.n	8001166 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	681a      	ldr	r2, [r3, #0]
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001162:	601a      	str	r2, [r3, #0]
 8001164:	e007      	b.n	8001176 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	681a      	ldr	r2, [r3, #0]
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001174:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	7e5b      	ldrb	r3, [r3, #25]
 800117a:	2b01      	cmp	r3, #1
 800117c:	d108      	bne.n	8001190 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	681a      	ldr	r2, [r3, #0]
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800118c:	601a      	str	r2, [r3, #0]
 800118e:	e007      	b.n	80011a0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	681a      	ldr	r2, [r3, #0]
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800119e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	7e9b      	ldrb	r3, [r3, #26]
 80011a4:	2b01      	cmp	r3, #1
 80011a6:	d108      	bne.n	80011ba <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	681a      	ldr	r2, [r3, #0]
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f042 0220 	orr.w	r2, r2, #32
 80011b6:	601a      	str	r2, [r3, #0]
 80011b8:	e007      	b.n	80011ca <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	681a      	ldr	r2, [r3, #0]
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f022 0220 	bic.w	r2, r2, #32
 80011c8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	7edb      	ldrb	r3, [r3, #27]
 80011ce:	2b01      	cmp	r3, #1
 80011d0:	d108      	bne.n	80011e4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	681a      	ldr	r2, [r3, #0]
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f022 0210 	bic.w	r2, r2, #16
 80011e0:	601a      	str	r2, [r3, #0]
 80011e2:	e007      	b.n	80011f4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	681a      	ldr	r2, [r3, #0]
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f042 0210 	orr.w	r2, r2, #16
 80011f2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	7f1b      	ldrb	r3, [r3, #28]
 80011f8:	2b01      	cmp	r3, #1
 80011fa:	d108      	bne.n	800120e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	681a      	ldr	r2, [r3, #0]
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f042 0208 	orr.w	r2, r2, #8
 800120a:	601a      	str	r2, [r3, #0]
 800120c:	e007      	b.n	800121e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	681a      	ldr	r2, [r3, #0]
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f022 0208 	bic.w	r2, r2, #8
 800121c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	7f5b      	ldrb	r3, [r3, #29]
 8001222:	2b01      	cmp	r3, #1
 8001224:	d108      	bne.n	8001238 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	681a      	ldr	r2, [r3, #0]
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f042 0204 	orr.w	r2, r2, #4
 8001234:	601a      	str	r2, [r3, #0]
 8001236:	e007      	b.n	8001248 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	681a      	ldr	r2, [r3, #0]
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f022 0204 	bic.w	r2, r2, #4
 8001246:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	689a      	ldr	r2, [r3, #8]
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	68db      	ldr	r3, [r3, #12]
 8001250:	431a      	orrs	r2, r3
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	691b      	ldr	r3, [r3, #16]
 8001256:	431a      	orrs	r2, r3
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	695b      	ldr	r3, [r3, #20]
 800125c:	ea42 0103 	orr.w	r1, r2, r3
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	1e5a      	subs	r2, r3, #1
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	430a      	orrs	r2, r1
 800126c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	2200      	movs	r2, #0
 8001272:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	2201      	movs	r2, #1
 8001278:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800127c:	2300      	movs	r3, #0
}
 800127e:	4618      	mov	r0, r3
 8001280:	3710      	adds	r7, #16
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
	...

08001288 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001288:	b480      	push	{r7}
 800128a:	b087      	sub	sp, #28
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
 8001290:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800129e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80012a0:	7cfb      	ldrb	r3, [r7, #19]
 80012a2:	2b01      	cmp	r3, #1
 80012a4:	d003      	beq.n	80012ae <HAL_CAN_ConfigFilter+0x26>
 80012a6:	7cfb      	ldrb	r3, [r7, #19]
 80012a8:	2b02      	cmp	r3, #2
 80012aa:	f040 80be 	bne.w	800142a <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80012ae:	4b65      	ldr	r3, [pc, #404]	; (8001444 <HAL_CAN_ConfigFilter+0x1bc>)
 80012b0:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80012b2:	697b      	ldr	r3, [r7, #20]
 80012b4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80012b8:	f043 0201 	orr.w	r2, r3, #1
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80012c2:	697b      	ldr	r3, [r7, #20]
 80012c4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80012c8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80012d2:	697b      	ldr	r3, [r7, #20]
 80012d4:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012dc:	021b      	lsls	r3, r3, #8
 80012de:	431a      	orrs	r2, r3
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	695b      	ldr	r3, [r3, #20]
 80012ea:	f003 031f 	and.w	r3, r3, #31
 80012ee:	2201      	movs	r2, #1
 80012f0:	fa02 f303 	lsl.w	r3, r2, r3
 80012f4:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80012f6:	697b      	ldr	r3, [r7, #20]
 80012f8:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	43db      	mvns	r3, r3
 8001300:	401a      	ands	r2, r3
 8001302:	697b      	ldr	r3, [r7, #20]
 8001304:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	69db      	ldr	r3, [r3, #28]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d123      	bne.n	8001358 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	43db      	mvns	r3, r3
 800131a:	401a      	ands	r2, r3
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	68db      	ldr	r3, [r3, #12]
 8001326:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800132e:	683a      	ldr	r2, [r7, #0]
 8001330:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001332:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	3248      	adds	r2, #72	; 0x48
 8001338:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	689b      	ldr	r3, [r3, #8]
 8001340:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800134c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800134e:	6979      	ldr	r1, [r7, #20]
 8001350:	3348      	adds	r3, #72	; 0x48
 8001352:	00db      	lsls	r3, r3, #3
 8001354:	440b      	add	r3, r1
 8001356:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	69db      	ldr	r3, [r3, #28]
 800135c:	2b01      	cmp	r3, #1
 800135e:	d122      	bne.n	80013a6 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001360:	697b      	ldr	r3, [r7, #20]
 8001362:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	431a      	orrs	r2, r3
 800136a:	697b      	ldr	r3, [r7, #20]
 800136c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800137c:	683a      	ldr	r2, [r7, #0]
 800137e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001380:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001382:	697b      	ldr	r3, [r7, #20]
 8001384:	3248      	adds	r2, #72	; 0x48
 8001386:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	689b      	ldr	r3, [r3, #8]
 800138e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	68db      	ldr	r3, [r3, #12]
 8001394:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800139a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800139c:	6979      	ldr	r1, [r7, #20]
 800139e:	3348      	adds	r3, #72	; 0x48
 80013a0:	00db      	lsls	r3, r3, #3
 80013a2:	440b      	add	r3, r1
 80013a4:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	699b      	ldr	r3, [r3, #24]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d109      	bne.n	80013c2 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	43db      	mvns	r3, r3
 80013b8:	401a      	ands	r2, r3
 80013ba:	697b      	ldr	r3, [r7, #20]
 80013bc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80013c0:	e007      	b.n	80013d2 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80013c2:	697b      	ldr	r3, [r7, #20]
 80013c4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	431a      	orrs	r2, r3
 80013cc:	697b      	ldr	r3, [r7, #20]
 80013ce:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	691b      	ldr	r3, [r3, #16]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d109      	bne.n	80013ee <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80013da:	697b      	ldr	r3, [r7, #20]
 80013dc:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	43db      	mvns	r3, r3
 80013e4:	401a      	ands	r2, r3
 80013e6:	697b      	ldr	r3, [r7, #20]
 80013e8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80013ec:	e007      	b.n	80013fe <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80013ee:	697b      	ldr	r3, [r7, #20]
 80013f0:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	431a      	orrs	r2, r3
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	6a1b      	ldr	r3, [r3, #32]
 8001402:	2b01      	cmp	r3, #1
 8001404:	d107      	bne.n	8001416 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001406:	697b      	ldr	r3, [r7, #20]
 8001408:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	431a      	orrs	r2, r3
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001416:	697b      	ldr	r3, [r7, #20]
 8001418:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800141c:	f023 0201 	bic.w	r2, r3, #1
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001426:	2300      	movs	r3, #0
 8001428:	e006      	b.n	8001438 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800142e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001436:	2301      	movs	r3, #1
  }
}
 8001438:	4618      	mov	r0, r3
 800143a:	371c      	adds	r7, #28
 800143c:	46bd      	mov	sp, r7
 800143e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001442:	4770      	bx	lr
 8001444:	40006400 	.word	0x40006400

08001448 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b084      	sub	sp, #16
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001456:	b2db      	uxtb	r3, r3
 8001458:	2b01      	cmp	r3, #1
 800145a:	d12e      	bne.n	80014ba <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2202      	movs	r2, #2
 8001460:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	681a      	ldr	r2, [r3, #0]
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f022 0201 	bic.w	r2, r2, #1
 8001472:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001474:	f7ff fe00 	bl	8001078 <HAL_GetTick>
 8001478:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800147a:	e012      	b.n	80014a2 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800147c:	f7ff fdfc 	bl	8001078 <HAL_GetTick>
 8001480:	4602      	mov	r2, r0
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	1ad3      	subs	r3, r2, r3
 8001486:	2b0a      	cmp	r3, #10
 8001488:	d90b      	bls.n	80014a2 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800148e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	2205      	movs	r2, #5
 800149a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800149e:	2301      	movs	r3, #1
 80014a0:	e012      	b.n	80014c8 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	f003 0301 	and.w	r3, r3, #1
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d1e5      	bne.n	800147c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2200      	movs	r2, #0
 80014b4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80014b6:	2300      	movs	r3, #0
 80014b8:	e006      	b.n	80014c8 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014be:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80014c6:	2301      	movs	r3, #1
  }
}
 80014c8:	4618      	mov	r0, r3
 80014ca:	3710      	adds	r7, #16
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}

080014d0 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b089      	sub	sp, #36	; 0x24
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	60f8      	str	r0, [r7, #12]
 80014d8:	60b9      	str	r1, [r7, #8]
 80014da:	607a      	str	r2, [r7, #4]
 80014dc:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014e4:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	689b      	ldr	r3, [r3, #8]
 80014ec:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80014ee:	7ffb      	ldrb	r3, [r7, #31]
 80014f0:	2b01      	cmp	r3, #1
 80014f2:	d003      	beq.n	80014fc <HAL_CAN_AddTxMessage+0x2c>
 80014f4:	7ffb      	ldrb	r3, [r7, #31]
 80014f6:	2b02      	cmp	r3, #2
 80014f8:	f040 80b8 	bne.w	800166c <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80014fc:	69bb      	ldr	r3, [r7, #24]
 80014fe:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001502:	2b00      	cmp	r3, #0
 8001504:	d10a      	bne.n	800151c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001506:	69bb      	ldr	r3, [r7, #24]
 8001508:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800150c:	2b00      	cmp	r3, #0
 800150e:	d105      	bne.n	800151c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001510:	69bb      	ldr	r3, [r7, #24]
 8001512:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001516:	2b00      	cmp	r3, #0
 8001518:	f000 80a0 	beq.w	800165c <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800151c:	69bb      	ldr	r3, [r7, #24]
 800151e:	0e1b      	lsrs	r3, r3, #24
 8001520:	f003 0303 	and.w	r3, r3, #3
 8001524:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8001526:	697b      	ldr	r3, [r7, #20]
 8001528:	2b02      	cmp	r3, #2
 800152a:	d907      	bls.n	800153c <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001530:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001538:	2301      	movs	r3, #1
 800153a:	e09e      	b.n	800167a <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800153c:	2201      	movs	r2, #1
 800153e:	697b      	ldr	r3, [r7, #20]
 8001540:	409a      	lsls	r2, r3
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001546:	68bb      	ldr	r3, [r7, #8]
 8001548:	689b      	ldr	r3, [r3, #8]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d10d      	bne.n	800156a <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800154e:	68bb      	ldr	r3, [r7, #8]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001554:	68bb      	ldr	r3, [r7, #8]
 8001556:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001558:	68f9      	ldr	r1, [r7, #12]
 800155a:	6809      	ldr	r1, [r1, #0]
 800155c:	431a      	orrs	r2, r3
 800155e:	697b      	ldr	r3, [r7, #20]
 8001560:	3318      	adds	r3, #24
 8001562:	011b      	lsls	r3, r3, #4
 8001564:	440b      	add	r3, r1
 8001566:	601a      	str	r2, [r3, #0]
 8001568:	e00f      	b.n	800158a <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800156a:	68bb      	ldr	r3, [r7, #8]
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001570:	68bb      	ldr	r3, [r7, #8]
 8001572:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001574:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001576:	68bb      	ldr	r3, [r7, #8]
 8001578:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800157a:	68f9      	ldr	r1, [r7, #12]
 800157c:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800157e:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	3318      	adds	r3, #24
 8001584:	011b      	lsls	r3, r3, #4
 8001586:	440b      	add	r3, r1
 8001588:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	6819      	ldr	r1, [r3, #0]
 800158e:	68bb      	ldr	r3, [r7, #8]
 8001590:	691a      	ldr	r2, [r3, #16]
 8001592:	697b      	ldr	r3, [r7, #20]
 8001594:	3318      	adds	r3, #24
 8001596:	011b      	lsls	r3, r3, #4
 8001598:	440b      	add	r3, r1
 800159a:	3304      	adds	r3, #4
 800159c:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800159e:	68bb      	ldr	r3, [r7, #8]
 80015a0:	7d1b      	ldrb	r3, [r3, #20]
 80015a2:	2b01      	cmp	r3, #1
 80015a4:	d111      	bne.n	80015ca <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	681a      	ldr	r2, [r3, #0]
 80015aa:	697b      	ldr	r3, [r7, #20]
 80015ac:	3318      	adds	r3, #24
 80015ae:	011b      	lsls	r3, r3, #4
 80015b0:	4413      	add	r3, r2
 80015b2:	3304      	adds	r3, #4
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	68fa      	ldr	r2, [r7, #12]
 80015b8:	6811      	ldr	r1, [r2, #0]
 80015ba:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80015be:	697b      	ldr	r3, [r7, #20]
 80015c0:	3318      	adds	r3, #24
 80015c2:	011b      	lsls	r3, r3, #4
 80015c4:	440b      	add	r3, r1
 80015c6:	3304      	adds	r3, #4
 80015c8:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	3307      	adds	r3, #7
 80015ce:	781b      	ldrb	r3, [r3, #0]
 80015d0:	061a      	lsls	r2, r3, #24
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	3306      	adds	r3, #6
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	041b      	lsls	r3, r3, #16
 80015da:	431a      	orrs	r2, r3
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	3305      	adds	r3, #5
 80015e0:	781b      	ldrb	r3, [r3, #0]
 80015e2:	021b      	lsls	r3, r3, #8
 80015e4:	4313      	orrs	r3, r2
 80015e6:	687a      	ldr	r2, [r7, #4]
 80015e8:	3204      	adds	r2, #4
 80015ea:	7812      	ldrb	r2, [r2, #0]
 80015ec:	4610      	mov	r0, r2
 80015ee:	68fa      	ldr	r2, [r7, #12]
 80015f0:	6811      	ldr	r1, [r2, #0]
 80015f2:	ea43 0200 	orr.w	r2, r3, r0
 80015f6:	697b      	ldr	r3, [r7, #20]
 80015f8:	011b      	lsls	r3, r3, #4
 80015fa:	440b      	add	r3, r1
 80015fc:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001600:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	3303      	adds	r3, #3
 8001606:	781b      	ldrb	r3, [r3, #0]
 8001608:	061a      	lsls	r2, r3, #24
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	3302      	adds	r3, #2
 800160e:	781b      	ldrb	r3, [r3, #0]
 8001610:	041b      	lsls	r3, r3, #16
 8001612:	431a      	orrs	r2, r3
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	3301      	adds	r3, #1
 8001618:	781b      	ldrb	r3, [r3, #0]
 800161a:	021b      	lsls	r3, r3, #8
 800161c:	4313      	orrs	r3, r2
 800161e:	687a      	ldr	r2, [r7, #4]
 8001620:	7812      	ldrb	r2, [r2, #0]
 8001622:	4610      	mov	r0, r2
 8001624:	68fa      	ldr	r2, [r7, #12]
 8001626:	6811      	ldr	r1, [r2, #0]
 8001628:	ea43 0200 	orr.w	r2, r3, r0
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	011b      	lsls	r3, r3, #4
 8001630:	440b      	add	r3, r1
 8001632:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001636:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	681a      	ldr	r2, [r3, #0]
 800163c:	697b      	ldr	r3, [r7, #20]
 800163e:	3318      	adds	r3, #24
 8001640:	011b      	lsls	r3, r3, #4
 8001642:	4413      	add	r3, r2
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	68fa      	ldr	r2, [r7, #12]
 8001648:	6811      	ldr	r1, [r2, #0]
 800164a:	f043 0201 	orr.w	r2, r3, #1
 800164e:	697b      	ldr	r3, [r7, #20]
 8001650:	3318      	adds	r3, #24
 8001652:	011b      	lsls	r3, r3, #4
 8001654:	440b      	add	r3, r1
 8001656:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001658:	2300      	movs	r3, #0
 800165a:	e00e      	b.n	800167a <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001660:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001668:	2301      	movs	r3, #1
 800166a:	e006      	b.n	800167a <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001670:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001678:	2301      	movs	r3, #1
  }
}
 800167a:	4618      	mov	r0, r3
 800167c:	3724      	adds	r7, #36	; 0x24
 800167e:	46bd      	mov	sp, r7
 8001680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001684:	4770      	bx	lr

08001686 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 8001686:	b480      	push	{r7}
 8001688:	b085      	sub	sp, #20
 800168a:	af00      	add	r7, sp, #0
 800168c:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 800168e:	2300      	movs	r3, #0
 8001690:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001698:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 800169a:	7afb      	ldrb	r3, [r7, #11]
 800169c:	2b01      	cmp	r3, #1
 800169e:	d002      	beq.n	80016a6 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 80016a0:	7afb      	ldrb	r3, [r7, #11]
 80016a2:	2b02      	cmp	r3, #2
 80016a4:	d11d      	bne.n	80016e2 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	689b      	ldr	r3, [r3, #8]
 80016ac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d002      	beq.n	80016ba <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	3301      	adds	r3, #1
 80016b8:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	689b      	ldr	r3, [r3, #8]
 80016c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d002      	beq.n	80016ce <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	3301      	adds	r3, #1
 80016cc:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	689b      	ldr	r3, [r3, #8]
 80016d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d002      	beq.n	80016e2 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	3301      	adds	r3, #1
 80016e0:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 80016e2:	68fb      	ldr	r3, [r7, #12]
}
 80016e4:	4618      	mov	r0, r3
 80016e6:	3714      	adds	r7, #20
 80016e8:	46bd      	mov	sp, r7
 80016ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ee:	4770      	bx	lr

080016f0 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80016f0:	b480      	push	{r7}
 80016f2:	b087      	sub	sp, #28
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	60f8      	str	r0, [r7, #12]
 80016f8:	60b9      	str	r1, [r7, #8]
 80016fa:	607a      	str	r2, [r7, #4]
 80016fc:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001704:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001706:	7dfb      	ldrb	r3, [r7, #23]
 8001708:	2b01      	cmp	r3, #1
 800170a:	d003      	beq.n	8001714 <HAL_CAN_GetRxMessage+0x24>
 800170c:	7dfb      	ldrb	r3, [r7, #23]
 800170e:	2b02      	cmp	r3, #2
 8001710:	f040 80f3 	bne.w	80018fa <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001714:	68bb      	ldr	r3, [r7, #8]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d10e      	bne.n	8001738 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	68db      	ldr	r3, [r3, #12]
 8001720:	f003 0303 	and.w	r3, r3, #3
 8001724:	2b00      	cmp	r3, #0
 8001726:	d116      	bne.n	8001756 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800172c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001734:	2301      	movs	r3, #1
 8001736:	e0e7      	b.n	8001908 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	691b      	ldr	r3, [r3, #16]
 800173e:	f003 0303 	and.w	r3, r3, #3
 8001742:	2b00      	cmp	r3, #0
 8001744:	d107      	bne.n	8001756 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800174a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001752:	2301      	movs	r3, #1
 8001754:	e0d8      	b.n	8001908 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	681a      	ldr	r2, [r3, #0]
 800175a:	68bb      	ldr	r3, [r7, #8]
 800175c:	331b      	adds	r3, #27
 800175e:	011b      	lsls	r3, r3, #4
 8001760:	4413      	add	r3, r2
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f003 0204 	and.w	r2, r3, #4
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	689b      	ldr	r3, [r3, #8]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d10c      	bne.n	800178e <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	681a      	ldr	r2, [r3, #0]
 8001778:	68bb      	ldr	r3, [r7, #8]
 800177a:	331b      	adds	r3, #27
 800177c:	011b      	lsls	r3, r3, #4
 800177e:	4413      	add	r3, r2
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	0d5b      	lsrs	r3, r3, #21
 8001784:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	601a      	str	r2, [r3, #0]
 800178c:	e00b      	b.n	80017a6 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	681a      	ldr	r2, [r3, #0]
 8001792:	68bb      	ldr	r3, [r7, #8]
 8001794:	331b      	adds	r3, #27
 8001796:	011b      	lsls	r3, r3, #4
 8001798:	4413      	add	r3, r2
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	08db      	lsrs	r3, r3, #3
 800179e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	681a      	ldr	r2, [r3, #0]
 80017aa:	68bb      	ldr	r3, [r7, #8]
 80017ac:	331b      	adds	r3, #27
 80017ae:	011b      	lsls	r3, r3, #4
 80017b0:	4413      	add	r3, r2
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f003 0202 	and.w	r2, r3, #2
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	681a      	ldr	r2, [r3, #0]
 80017c0:	68bb      	ldr	r3, [r7, #8]
 80017c2:	331b      	adds	r3, #27
 80017c4:	011b      	lsls	r3, r3, #4
 80017c6:	4413      	add	r3, r2
 80017c8:	3304      	adds	r3, #4
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f003 020f 	and.w	r2, r3, #15
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	681a      	ldr	r2, [r3, #0]
 80017d8:	68bb      	ldr	r3, [r7, #8]
 80017da:	331b      	adds	r3, #27
 80017dc:	011b      	lsls	r3, r3, #4
 80017de:	4413      	add	r3, r2
 80017e0:	3304      	adds	r3, #4
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	0a1b      	lsrs	r3, r3, #8
 80017e6:	b2da      	uxtb	r2, r3
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	681a      	ldr	r2, [r3, #0]
 80017f0:	68bb      	ldr	r3, [r7, #8]
 80017f2:	331b      	adds	r3, #27
 80017f4:	011b      	lsls	r3, r3, #4
 80017f6:	4413      	add	r3, r2
 80017f8:	3304      	adds	r3, #4
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	0c1b      	lsrs	r3, r3, #16
 80017fe:	b29a      	uxth	r2, r3
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	681a      	ldr	r2, [r3, #0]
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	011b      	lsls	r3, r3, #4
 800180c:	4413      	add	r3, r2
 800180e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	b2da      	uxtb	r2, r3
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	681a      	ldr	r2, [r3, #0]
 800181e:	68bb      	ldr	r3, [r7, #8]
 8001820:	011b      	lsls	r3, r3, #4
 8001822:	4413      	add	r3, r2
 8001824:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	0a1a      	lsrs	r2, r3, #8
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	3301      	adds	r3, #1
 8001830:	b2d2      	uxtb	r2, r2
 8001832:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	681a      	ldr	r2, [r3, #0]
 8001838:	68bb      	ldr	r3, [r7, #8]
 800183a:	011b      	lsls	r3, r3, #4
 800183c:	4413      	add	r3, r2
 800183e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	0c1a      	lsrs	r2, r3, #16
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	3302      	adds	r3, #2
 800184a:	b2d2      	uxtb	r2, r2
 800184c:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	681a      	ldr	r2, [r3, #0]
 8001852:	68bb      	ldr	r3, [r7, #8]
 8001854:	011b      	lsls	r3, r3, #4
 8001856:	4413      	add	r3, r2
 8001858:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	0e1a      	lsrs	r2, r3, #24
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	3303      	adds	r3, #3
 8001864:	b2d2      	uxtb	r2, r2
 8001866:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	681a      	ldr	r2, [r3, #0]
 800186c:	68bb      	ldr	r3, [r7, #8]
 800186e:	011b      	lsls	r3, r3, #4
 8001870:	4413      	add	r3, r2
 8001872:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001876:	681a      	ldr	r2, [r3, #0]
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	3304      	adds	r3, #4
 800187c:	b2d2      	uxtb	r2, r2
 800187e:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	681a      	ldr	r2, [r3, #0]
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	011b      	lsls	r3, r3, #4
 8001888:	4413      	add	r3, r2
 800188a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	0a1a      	lsrs	r2, r3, #8
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	3305      	adds	r3, #5
 8001896:	b2d2      	uxtb	r2, r2
 8001898:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	681a      	ldr	r2, [r3, #0]
 800189e:	68bb      	ldr	r3, [r7, #8]
 80018a0:	011b      	lsls	r3, r3, #4
 80018a2:	4413      	add	r3, r2
 80018a4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	0c1a      	lsrs	r2, r3, #16
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	3306      	adds	r3, #6
 80018b0:	b2d2      	uxtb	r2, r2
 80018b2:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	681a      	ldr	r2, [r3, #0]
 80018b8:	68bb      	ldr	r3, [r7, #8]
 80018ba:	011b      	lsls	r3, r3, #4
 80018bc:	4413      	add	r3, r2
 80018be:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	0e1a      	lsrs	r2, r3, #24
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	3307      	adds	r3, #7
 80018ca:	b2d2      	uxtb	r2, r2
 80018cc:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80018ce:	68bb      	ldr	r3, [r7, #8]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d108      	bne.n	80018e6 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	68da      	ldr	r2, [r3, #12]
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f042 0220 	orr.w	r2, r2, #32
 80018e2:	60da      	str	r2, [r3, #12]
 80018e4:	e007      	b.n	80018f6 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	691a      	ldr	r2, [r3, #16]
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f042 0220 	orr.w	r2, r2, #32
 80018f4:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80018f6:	2300      	movs	r3, #0
 80018f8:	e006      	b.n	8001908 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018fe:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001906:	2301      	movs	r3, #1
  }
}
 8001908:	4618      	mov	r0, r3
 800190a:	371c      	adds	r7, #28
 800190c:	46bd      	mov	sp, r7
 800190e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001912:	4770      	bx	lr

08001914 <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 8001914:	b480      	push	{r7}
 8001916:	b085      	sub	sp, #20
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
 800191c:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 800191e:	2300      	movs	r3, #0
 8001920:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001928:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800192a:	7afb      	ldrb	r3, [r7, #11]
 800192c:	2b01      	cmp	r3, #1
 800192e:	d002      	beq.n	8001936 <HAL_CAN_GetRxFifoFillLevel+0x22>
 8001930:	7afb      	ldrb	r3, [r7, #11]
 8001932:	2b02      	cmp	r3, #2
 8001934:	d10f      	bne.n	8001956 <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d106      	bne.n	800194a <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	68db      	ldr	r3, [r3, #12]
 8001942:	f003 0303 	and.w	r3, r3, #3
 8001946:	60fb      	str	r3, [r7, #12]
 8001948:	e005      	b.n	8001956 <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	691b      	ldr	r3, [r3, #16]
 8001950:	f003 0303 	and.w	r3, r3, #3
 8001954:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 8001956:	68fb      	ldr	r3, [r7, #12]
}
 8001958:	4618      	mov	r0, r3
 800195a:	3714      	adds	r7, #20
 800195c:	46bd      	mov	sp, r7
 800195e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001962:	4770      	bx	lr

08001964 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001964:	b480      	push	{r7}
 8001966:	b085      	sub	sp, #20
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	f003 0307 	and.w	r3, r3, #7
 8001972:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001974:	4b0c      	ldr	r3, [pc, #48]	; (80019a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001976:	68db      	ldr	r3, [r3, #12]
 8001978:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800197a:	68ba      	ldr	r2, [r7, #8]
 800197c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001980:	4013      	ands	r3, r2
 8001982:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001988:	68bb      	ldr	r3, [r7, #8]
 800198a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800198c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001990:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001994:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001996:	4a04      	ldr	r2, [pc, #16]	; (80019a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001998:	68bb      	ldr	r3, [r7, #8]
 800199a:	60d3      	str	r3, [r2, #12]
}
 800199c:	bf00      	nop
 800199e:	3714      	adds	r7, #20
 80019a0:	46bd      	mov	sp, r7
 80019a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a6:	4770      	bx	lr
 80019a8:	e000ed00 	.word	0xe000ed00

080019ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019ac:	b480      	push	{r7}
 80019ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019b0:	4b04      	ldr	r3, [pc, #16]	; (80019c4 <__NVIC_GetPriorityGrouping+0x18>)
 80019b2:	68db      	ldr	r3, [r3, #12]
 80019b4:	0a1b      	lsrs	r3, r3, #8
 80019b6:	f003 0307 	and.w	r3, r3, #7
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	46bd      	mov	sp, r7
 80019be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c2:	4770      	bx	lr
 80019c4:	e000ed00 	.word	0xe000ed00

080019c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b083      	sub	sp, #12
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	4603      	mov	r3, r0
 80019d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	db0b      	blt.n	80019f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019da:	79fb      	ldrb	r3, [r7, #7]
 80019dc:	f003 021f 	and.w	r2, r3, #31
 80019e0:	4907      	ldr	r1, [pc, #28]	; (8001a00 <__NVIC_EnableIRQ+0x38>)
 80019e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019e6:	095b      	lsrs	r3, r3, #5
 80019e8:	2001      	movs	r0, #1
 80019ea:	fa00 f202 	lsl.w	r2, r0, r2
 80019ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80019f2:	bf00      	nop
 80019f4:	370c      	adds	r7, #12
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr
 80019fe:	bf00      	nop
 8001a00:	e000e100 	.word	0xe000e100

08001a04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b083      	sub	sp, #12
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	6039      	str	r1, [r7, #0]
 8001a0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	db0a      	blt.n	8001a2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	b2da      	uxtb	r2, r3
 8001a1c:	490c      	ldr	r1, [pc, #48]	; (8001a50 <__NVIC_SetPriority+0x4c>)
 8001a1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a22:	0112      	lsls	r2, r2, #4
 8001a24:	b2d2      	uxtb	r2, r2
 8001a26:	440b      	add	r3, r1
 8001a28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a2c:	e00a      	b.n	8001a44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	b2da      	uxtb	r2, r3
 8001a32:	4908      	ldr	r1, [pc, #32]	; (8001a54 <__NVIC_SetPriority+0x50>)
 8001a34:	79fb      	ldrb	r3, [r7, #7]
 8001a36:	f003 030f 	and.w	r3, r3, #15
 8001a3a:	3b04      	subs	r3, #4
 8001a3c:	0112      	lsls	r2, r2, #4
 8001a3e:	b2d2      	uxtb	r2, r2
 8001a40:	440b      	add	r3, r1
 8001a42:	761a      	strb	r2, [r3, #24]
}
 8001a44:	bf00      	nop
 8001a46:	370c      	adds	r7, #12
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4e:	4770      	bx	lr
 8001a50:	e000e100 	.word	0xe000e100
 8001a54:	e000ed00 	.word	0xe000ed00

08001a58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b089      	sub	sp, #36	; 0x24
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	60f8      	str	r0, [r7, #12]
 8001a60:	60b9      	str	r1, [r7, #8]
 8001a62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	f003 0307 	and.w	r3, r3, #7
 8001a6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a6c:	69fb      	ldr	r3, [r7, #28]
 8001a6e:	f1c3 0307 	rsb	r3, r3, #7
 8001a72:	2b04      	cmp	r3, #4
 8001a74:	bf28      	it	cs
 8001a76:	2304      	movcs	r3, #4
 8001a78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a7a:	69fb      	ldr	r3, [r7, #28]
 8001a7c:	3304      	adds	r3, #4
 8001a7e:	2b06      	cmp	r3, #6
 8001a80:	d902      	bls.n	8001a88 <NVIC_EncodePriority+0x30>
 8001a82:	69fb      	ldr	r3, [r7, #28]
 8001a84:	3b03      	subs	r3, #3
 8001a86:	e000      	b.n	8001a8a <NVIC_EncodePriority+0x32>
 8001a88:	2300      	movs	r3, #0
 8001a8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a8c:	f04f 32ff 	mov.w	r2, #4294967295
 8001a90:	69bb      	ldr	r3, [r7, #24]
 8001a92:	fa02 f303 	lsl.w	r3, r2, r3
 8001a96:	43da      	mvns	r2, r3
 8001a98:	68bb      	ldr	r3, [r7, #8]
 8001a9a:	401a      	ands	r2, r3
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001aa0:	f04f 31ff 	mov.w	r1, #4294967295
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	fa01 f303 	lsl.w	r3, r1, r3
 8001aaa:	43d9      	mvns	r1, r3
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ab0:	4313      	orrs	r3, r2
         );
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	3724      	adds	r7, #36	; 0x24
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr

08001abe <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001abe:	b580      	push	{r7, lr}
 8001ac0:	b082      	sub	sp, #8
 8001ac2:	af00      	add	r7, sp, #0
 8001ac4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ac6:	6878      	ldr	r0, [r7, #4]
 8001ac8:	f7ff ff4c 	bl	8001964 <__NVIC_SetPriorityGrouping>
}
 8001acc:	bf00      	nop
 8001ace:	3708      	adds	r7, #8
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}

08001ad4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b086      	sub	sp, #24
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	4603      	mov	r3, r0
 8001adc:	60b9      	str	r1, [r7, #8]
 8001ade:	607a      	str	r2, [r7, #4]
 8001ae0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ae6:	f7ff ff61 	bl	80019ac <__NVIC_GetPriorityGrouping>
 8001aea:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001aec:	687a      	ldr	r2, [r7, #4]
 8001aee:	68b9      	ldr	r1, [r7, #8]
 8001af0:	6978      	ldr	r0, [r7, #20]
 8001af2:	f7ff ffb1 	bl	8001a58 <NVIC_EncodePriority>
 8001af6:	4602      	mov	r2, r0
 8001af8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001afc:	4611      	mov	r1, r2
 8001afe:	4618      	mov	r0, r3
 8001b00:	f7ff ff80 	bl	8001a04 <__NVIC_SetPriority>
}
 8001b04:	bf00      	nop
 8001b06:	3718      	adds	r7, #24
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}

08001b0c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b082      	sub	sp, #8
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	4603      	mov	r3, r0
 8001b14:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f7ff ff54 	bl	80019c8 <__NVIC_EnableIRQ>
}
 8001b20:	bf00      	nop
 8001b22:	3708      	adds	r7, #8
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}

08001b28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b089      	sub	sp, #36	; 0x24
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
 8001b30:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b32:	2300      	movs	r3, #0
 8001b34:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b36:	2300      	movs	r3, #0
 8001b38:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b3e:	2300      	movs	r3, #0
 8001b40:	61fb      	str	r3, [r7, #28]
 8001b42:	e177      	b.n	8001e34 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b44:	2201      	movs	r2, #1
 8001b46:	69fb      	ldr	r3, [r7, #28]
 8001b48:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	697a      	ldr	r2, [r7, #20]
 8001b54:	4013      	ands	r3, r2
 8001b56:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b58:	693a      	ldr	r2, [r7, #16]
 8001b5a:	697b      	ldr	r3, [r7, #20]
 8001b5c:	429a      	cmp	r2, r3
 8001b5e:	f040 8166 	bne.w	8001e2e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	f003 0303 	and.w	r3, r3, #3
 8001b6a:	2b01      	cmp	r3, #1
 8001b6c:	d005      	beq.n	8001b7a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b76:	2b02      	cmp	r3, #2
 8001b78:	d130      	bne.n	8001bdc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	689b      	ldr	r3, [r3, #8]
 8001b7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b80:	69fb      	ldr	r3, [r7, #28]
 8001b82:	005b      	lsls	r3, r3, #1
 8001b84:	2203      	movs	r2, #3
 8001b86:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8a:	43db      	mvns	r3, r3
 8001b8c:	69ba      	ldr	r2, [r7, #24]
 8001b8e:	4013      	ands	r3, r2
 8001b90:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	68da      	ldr	r2, [r3, #12]
 8001b96:	69fb      	ldr	r3, [r7, #28]
 8001b98:	005b      	lsls	r3, r3, #1
 8001b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9e:	69ba      	ldr	r2, [r7, #24]
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	69ba      	ldr	r2, [r7, #24]
 8001ba8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	69fb      	ldr	r3, [r7, #28]
 8001bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb8:	43db      	mvns	r3, r3
 8001bba:	69ba      	ldr	r2, [r7, #24]
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	091b      	lsrs	r3, r3, #4
 8001bc6:	f003 0201 	and.w	r2, r3, #1
 8001bca:	69fb      	ldr	r3, [r7, #28]
 8001bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd0:	69ba      	ldr	r2, [r7, #24]
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	69ba      	ldr	r2, [r7, #24]
 8001bda:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	f003 0303 	and.w	r3, r3, #3
 8001be4:	2b03      	cmp	r3, #3
 8001be6:	d017      	beq.n	8001c18 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	68db      	ldr	r3, [r3, #12]
 8001bec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001bee:	69fb      	ldr	r3, [r7, #28]
 8001bf0:	005b      	lsls	r3, r3, #1
 8001bf2:	2203      	movs	r2, #3
 8001bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf8:	43db      	mvns	r3, r3
 8001bfa:	69ba      	ldr	r2, [r7, #24]
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	689a      	ldr	r2, [r3, #8]
 8001c04:	69fb      	ldr	r3, [r7, #28]
 8001c06:	005b      	lsls	r3, r3, #1
 8001c08:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0c:	69ba      	ldr	r2, [r7, #24]
 8001c0e:	4313      	orrs	r3, r2
 8001c10:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	69ba      	ldr	r2, [r7, #24]
 8001c16:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	f003 0303 	and.w	r3, r3, #3
 8001c20:	2b02      	cmp	r3, #2
 8001c22:	d123      	bne.n	8001c6c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c24:	69fb      	ldr	r3, [r7, #28]
 8001c26:	08da      	lsrs	r2, r3, #3
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	3208      	adds	r2, #8
 8001c2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c30:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c32:	69fb      	ldr	r3, [r7, #28]
 8001c34:	f003 0307 	and.w	r3, r3, #7
 8001c38:	009b      	lsls	r3, r3, #2
 8001c3a:	220f      	movs	r2, #15
 8001c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c40:	43db      	mvns	r3, r3
 8001c42:	69ba      	ldr	r2, [r7, #24]
 8001c44:	4013      	ands	r3, r2
 8001c46:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	691a      	ldr	r2, [r3, #16]
 8001c4c:	69fb      	ldr	r3, [r7, #28]
 8001c4e:	f003 0307 	and.w	r3, r3, #7
 8001c52:	009b      	lsls	r3, r3, #2
 8001c54:	fa02 f303 	lsl.w	r3, r2, r3
 8001c58:	69ba      	ldr	r2, [r7, #24]
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c5e:	69fb      	ldr	r3, [r7, #28]
 8001c60:	08da      	lsrs	r2, r3, #3
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	3208      	adds	r2, #8
 8001c66:	69b9      	ldr	r1, [r7, #24]
 8001c68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c72:	69fb      	ldr	r3, [r7, #28]
 8001c74:	005b      	lsls	r3, r3, #1
 8001c76:	2203      	movs	r2, #3
 8001c78:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7c:	43db      	mvns	r3, r3
 8001c7e:	69ba      	ldr	r2, [r7, #24]
 8001c80:	4013      	ands	r3, r2
 8001c82:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	f003 0203 	and.w	r2, r3, #3
 8001c8c:	69fb      	ldr	r3, [r7, #28]
 8001c8e:	005b      	lsls	r3, r3, #1
 8001c90:	fa02 f303 	lsl.w	r3, r2, r3
 8001c94:	69ba      	ldr	r2, [r7, #24]
 8001c96:	4313      	orrs	r3, r2
 8001c98:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	69ba      	ldr	r2, [r7, #24]
 8001c9e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	f000 80c0 	beq.w	8001e2e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cae:	2300      	movs	r3, #0
 8001cb0:	60fb      	str	r3, [r7, #12]
 8001cb2:	4b66      	ldr	r3, [pc, #408]	; (8001e4c <HAL_GPIO_Init+0x324>)
 8001cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cb6:	4a65      	ldr	r2, [pc, #404]	; (8001e4c <HAL_GPIO_Init+0x324>)
 8001cb8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cbc:	6453      	str	r3, [r2, #68]	; 0x44
 8001cbe:	4b63      	ldr	r3, [pc, #396]	; (8001e4c <HAL_GPIO_Init+0x324>)
 8001cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cc6:	60fb      	str	r3, [r7, #12]
 8001cc8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001cca:	4a61      	ldr	r2, [pc, #388]	; (8001e50 <HAL_GPIO_Init+0x328>)
 8001ccc:	69fb      	ldr	r3, [r7, #28]
 8001cce:	089b      	lsrs	r3, r3, #2
 8001cd0:	3302      	adds	r3, #2
 8001cd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001cd8:	69fb      	ldr	r3, [r7, #28]
 8001cda:	f003 0303 	and.w	r3, r3, #3
 8001cde:	009b      	lsls	r3, r3, #2
 8001ce0:	220f      	movs	r2, #15
 8001ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce6:	43db      	mvns	r3, r3
 8001ce8:	69ba      	ldr	r2, [r7, #24]
 8001cea:	4013      	ands	r3, r2
 8001cec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	4a58      	ldr	r2, [pc, #352]	; (8001e54 <HAL_GPIO_Init+0x32c>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d037      	beq.n	8001d66 <HAL_GPIO_Init+0x23e>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	4a57      	ldr	r2, [pc, #348]	; (8001e58 <HAL_GPIO_Init+0x330>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d031      	beq.n	8001d62 <HAL_GPIO_Init+0x23a>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	4a56      	ldr	r2, [pc, #344]	; (8001e5c <HAL_GPIO_Init+0x334>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d02b      	beq.n	8001d5e <HAL_GPIO_Init+0x236>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	4a55      	ldr	r2, [pc, #340]	; (8001e60 <HAL_GPIO_Init+0x338>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d025      	beq.n	8001d5a <HAL_GPIO_Init+0x232>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	4a54      	ldr	r2, [pc, #336]	; (8001e64 <HAL_GPIO_Init+0x33c>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d01f      	beq.n	8001d56 <HAL_GPIO_Init+0x22e>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	4a53      	ldr	r2, [pc, #332]	; (8001e68 <HAL_GPIO_Init+0x340>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d019      	beq.n	8001d52 <HAL_GPIO_Init+0x22a>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	4a52      	ldr	r2, [pc, #328]	; (8001e6c <HAL_GPIO_Init+0x344>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d013      	beq.n	8001d4e <HAL_GPIO_Init+0x226>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	4a51      	ldr	r2, [pc, #324]	; (8001e70 <HAL_GPIO_Init+0x348>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d00d      	beq.n	8001d4a <HAL_GPIO_Init+0x222>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	4a50      	ldr	r2, [pc, #320]	; (8001e74 <HAL_GPIO_Init+0x34c>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d007      	beq.n	8001d46 <HAL_GPIO_Init+0x21e>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	4a4f      	ldr	r2, [pc, #316]	; (8001e78 <HAL_GPIO_Init+0x350>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d101      	bne.n	8001d42 <HAL_GPIO_Init+0x21a>
 8001d3e:	2309      	movs	r3, #9
 8001d40:	e012      	b.n	8001d68 <HAL_GPIO_Init+0x240>
 8001d42:	230a      	movs	r3, #10
 8001d44:	e010      	b.n	8001d68 <HAL_GPIO_Init+0x240>
 8001d46:	2308      	movs	r3, #8
 8001d48:	e00e      	b.n	8001d68 <HAL_GPIO_Init+0x240>
 8001d4a:	2307      	movs	r3, #7
 8001d4c:	e00c      	b.n	8001d68 <HAL_GPIO_Init+0x240>
 8001d4e:	2306      	movs	r3, #6
 8001d50:	e00a      	b.n	8001d68 <HAL_GPIO_Init+0x240>
 8001d52:	2305      	movs	r3, #5
 8001d54:	e008      	b.n	8001d68 <HAL_GPIO_Init+0x240>
 8001d56:	2304      	movs	r3, #4
 8001d58:	e006      	b.n	8001d68 <HAL_GPIO_Init+0x240>
 8001d5a:	2303      	movs	r3, #3
 8001d5c:	e004      	b.n	8001d68 <HAL_GPIO_Init+0x240>
 8001d5e:	2302      	movs	r3, #2
 8001d60:	e002      	b.n	8001d68 <HAL_GPIO_Init+0x240>
 8001d62:	2301      	movs	r3, #1
 8001d64:	e000      	b.n	8001d68 <HAL_GPIO_Init+0x240>
 8001d66:	2300      	movs	r3, #0
 8001d68:	69fa      	ldr	r2, [r7, #28]
 8001d6a:	f002 0203 	and.w	r2, r2, #3
 8001d6e:	0092      	lsls	r2, r2, #2
 8001d70:	4093      	lsls	r3, r2
 8001d72:	69ba      	ldr	r2, [r7, #24]
 8001d74:	4313      	orrs	r3, r2
 8001d76:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d78:	4935      	ldr	r1, [pc, #212]	; (8001e50 <HAL_GPIO_Init+0x328>)
 8001d7a:	69fb      	ldr	r3, [r7, #28]
 8001d7c:	089b      	lsrs	r3, r3, #2
 8001d7e:	3302      	adds	r3, #2
 8001d80:	69ba      	ldr	r2, [r7, #24]
 8001d82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d86:	4b3d      	ldr	r3, [pc, #244]	; (8001e7c <HAL_GPIO_Init+0x354>)
 8001d88:	689b      	ldr	r3, [r3, #8]
 8001d8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d8c:	693b      	ldr	r3, [r7, #16]
 8001d8e:	43db      	mvns	r3, r3
 8001d90:	69ba      	ldr	r2, [r7, #24]
 8001d92:	4013      	ands	r3, r2
 8001d94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d003      	beq.n	8001daa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001da2:	69ba      	ldr	r2, [r7, #24]
 8001da4:	693b      	ldr	r3, [r7, #16]
 8001da6:	4313      	orrs	r3, r2
 8001da8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001daa:	4a34      	ldr	r2, [pc, #208]	; (8001e7c <HAL_GPIO_Init+0x354>)
 8001dac:	69bb      	ldr	r3, [r7, #24]
 8001dae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001db0:	4b32      	ldr	r3, [pc, #200]	; (8001e7c <HAL_GPIO_Init+0x354>)
 8001db2:	68db      	ldr	r3, [r3, #12]
 8001db4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	43db      	mvns	r3, r3
 8001dba:	69ba      	ldr	r2, [r7, #24]
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d003      	beq.n	8001dd4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001dcc:	69ba      	ldr	r2, [r7, #24]
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001dd4:	4a29      	ldr	r2, [pc, #164]	; (8001e7c <HAL_GPIO_Init+0x354>)
 8001dd6:	69bb      	ldr	r3, [r7, #24]
 8001dd8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001dda:	4b28      	ldr	r3, [pc, #160]	; (8001e7c <HAL_GPIO_Init+0x354>)
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001de0:	693b      	ldr	r3, [r7, #16]
 8001de2:	43db      	mvns	r3, r3
 8001de4:	69ba      	ldr	r2, [r7, #24]
 8001de6:	4013      	ands	r3, r2
 8001de8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d003      	beq.n	8001dfe <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001df6:	69ba      	ldr	r2, [r7, #24]
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	4313      	orrs	r3, r2
 8001dfc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001dfe:	4a1f      	ldr	r2, [pc, #124]	; (8001e7c <HAL_GPIO_Init+0x354>)
 8001e00:	69bb      	ldr	r3, [r7, #24]
 8001e02:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e04:	4b1d      	ldr	r3, [pc, #116]	; (8001e7c <HAL_GPIO_Init+0x354>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	43db      	mvns	r3, r3
 8001e0e:	69ba      	ldr	r2, [r7, #24]
 8001e10:	4013      	ands	r3, r2
 8001e12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d003      	beq.n	8001e28 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001e20:	69ba      	ldr	r2, [r7, #24]
 8001e22:	693b      	ldr	r3, [r7, #16]
 8001e24:	4313      	orrs	r3, r2
 8001e26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e28:	4a14      	ldr	r2, [pc, #80]	; (8001e7c <HAL_GPIO_Init+0x354>)
 8001e2a:	69bb      	ldr	r3, [r7, #24]
 8001e2c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e2e:	69fb      	ldr	r3, [r7, #28]
 8001e30:	3301      	adds	r3, #1
 8001e32:	61fb      	str	r3, [r7, #28]
 8001e34:	69fb      	ldr	r3, [r7, #28]
 8001e36:	2b0f      	cmp	r3, #15
 8001e38:	f67f ae84 	bls.w	8001b44 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e3c:	bf00      	nop
 8001e3e:	bf00      	nop
 8001e40:	3724      	adds	r7, #36	; 0x24
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr
 8001e4a:	bf00      	nop
 8001e4c:	40023800 	.word	0x40023800
 8001e50:	40013800 	.word	0x40013800
 8001e54:	40020000 	.word	0x40020000
 8001e58:	40020400 	.word	0x40020400
 8001e5c:	40020800 	.word	0x40020800
 8001e60:	40020c00 	.word	0x40020c00
 8001e64:	40021000 	.word	0x40021000
 8001e68:	40021400 	.word	0x40021400
 8001e6c:	40021800 	.word	0x40021800
 8001e70:	40021c00 	.word	0x40021c00
 8001e74:	40022000 	.word	0x40022000
 8001e78:	40022400 	.word	0x40022400
 8001e7c:	40013c00 	.word	0x40013c00

08001e80 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b082      	sub	sp, #8
 8001e84:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8001e86:	2300      	movs	r3, #0
 8001e88:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	603b      	str	r3, [r7, #0]
 8001e8e:	4b20      	ldr	r3, [pc, #128]	; (8001f10 <HAL_PWREx_EnableOverDrive+0x90>)
 8001e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e92:	4a1f      	ldr	r2, [pc, #124]	; (8001f10 <HAL_PWREx_EnableOverDrive+0x90>)
 8001e94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e98:	6413      	str	r3, [r2, #64]	; 0x40
 8001e9a:	4b1d      	ldr	r3, [pc, #116]	; (8001f10 <HAL_PWREx_EnableOverDrive+0x90>)
 8001e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ea2:	603b      	str	r3, [r7, #0]
 8001ea4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001ea6:	4b1b      	ldr	r3, [pc, #108]	; (8001f14 <HAL_PWREx_EnableOverDrive+0x94>)
 8001ea8:	2201      	movs	r2, #1
 8001eaa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001eac:	f7ff f8e4 	bl	8001078 <HAL_GetTick>
 8001eb0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001eb2:	e009      	b.n	8001ec8 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001eb4:	f7ff f8e0 	bl	8001078 <HAL_GetTick>
 8001eb8:	4602      	mov	r2, r0
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	1ad3      	subs	r3, r2, r3
 8001ebe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001ec2:	d901      	bls.n	8001ec8 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001ec4:	2303      	movs	r3, #3
 8001ec6:	e01f      	b.n	8001f08 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001ec8:	4b13      	ldr	r3, [pc, #76]	; (8001f18 <HAL_PWREx_EnableOverDrive+0x98>)
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ed0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ed4:	d1ee      	bne.n	8001eb4 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001ed6:	4b11      	ldr	r3, [pc, #68]	; (8001f1c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001ed8:	2201      	movs	r2, #1
 8001eda:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001edc:	f7ff f8cc 	bl	8001078 <HAL_GetTick>
 8001ee0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001ee2:	e009      	b.n	8001ef8 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001ee4:	f7ff f8c8 	bl	8001078 <HAL_GetTick>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	1ad3      	subs	r3, r2, r3
 8001eee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001ef2:	d901      	bls.n	8001ef8 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001ef4:	2303      	movs	r3, #3
 8001ef6:	e007      	b.n	8001f08 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001ef8:	4b07      	ldr	r3, [pc, #28]	; (8001f18 <HAL_PWREx_EnableOverDrive+0x98>)
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f00:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001f04:	d1ee      	bne.n	8001ee4 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8001f06:	2300      	movs	r3, #0
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	3708      	adds	r7, #8
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}
 8001f10:	40023800 	.word	0x40023800
 8001f14:	420e0040 	.word	0x420e0040
 8001f18:	40007000 	.word	0x40007000
 8001f1c:	420e0044 	.word	0x420e0044

08001f20 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b086      	sub	sp, #24
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d101      	bne.n	8001f32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e267      	b.n	8002402 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f003 0301 	and.w	r3, r3, #1
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d075      	beq.n	800202a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001f3e:	4b88      	ldr	r3, [pc, #544]	; (8002160 <HAL_RCC_OscConfig+0x240>)
 8001f40:	689b      	ldr	r3, [r3, #8]
 8001f42:	f003 030c 	and.w	r3, r3, #12
 8001f46:	2b04      	cmp	r3, #4
 8001f48:	d00c      	beq.n	8001f64 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f4a:	4b85      	ldr	r3, [pc, #532]	; (8002160 <HAL_RCC_OscConfig+0x240>)
 8001f4c:	689b      	ldr	r3, [r3, #8]
 8001f4e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001f52:	2b08      	cmp	r3, #8
 8001f54:	d112      	bne.n	8001f7c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f56:	4b82      	ldr	r3, [pc, #520]	; (8002160 <HAL_RCC_OscConfig+0x240>)
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f5e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f62:	d10b      	bne.n	8001f7c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f64:	4b7e      	ldr	r3, [pc, #504]	; (8002160 <HAL_RCC_OscConfig+0x240>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d05b      	beq.n	8002028 <HAL_RCC_OscConfig+0x108>
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d157      	bne.n	8002028 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001f78:	2301      	movs	r3, #1
 8001f7a:	e242      	b.n	8002402 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f84:	d106      	bne.n	8001f94 <HAL_RCC_OscConfig+0x74>
 8001f86:	4b76      	ldr	r3, [pc, #472]	; (8002160 <HAL_RCC_OscConfig+0x240>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4a75      	ldr	r2, [pc, #468]	; (8002160 <HAL_RCC_OscConfig+0x240>)
 8001f8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f90:	6013      	str	r3, [r2, #0]
 8001f92:	e01d      	b.n	8001fd0 <HAL_RCC_OscConfig+0xb0>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f9c:	d10c      	bne.n	8001fb8 <HAL_RCC_OscConfig+0x98>
 8001f9e:	4b70      	ldr	r3, [pc, #448]	; (8002160 <HAL_RCC_OscConfig+0x240>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4a6f      	ldr	r2, [pc, #444]	; (8002160 <HAL_RCC_OscConfig+0x240>)
 8001fa4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fa8:	6013      	str	r3, [r2, #0]
 8001faa:	4b6d      	ldr	r3, [pc, #436]	; (8002160 <HAL_RCC_OscConfig+0x240>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4a6c      	ldr	r2, [pc, #432]	; (8002160 <HAL_RCC_OscConfig+0x240>)
 8001fb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fb4:	6013      	str	r3, [r2, #0]
 8001fb6:	e00b      	b.n	8001fd0 <HAL_RCC_OscConfig+0xb0>
 8001fb8:	4b69      	ldr	r3, [pc, #420]	; (8002160 <HAL_RCC_OscConfig+0x240>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a68      	ldr	r2, [pc, #416]	; (8002160 <HAL_RCC_OscConfig+0x240>)
 8001fbe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fc2:	6013      	str	r3, [r2, #0]
 8001fc4:	4b66      	ldr	r3, [pc, #408]	; (8002160 <HAL_RCC_OscConfig+0x240>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a65      	ldr	r2, [pc, #404]	; (8002160 <HAL_RCC_OscConfig+0x240>)
 8001fca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d013      	beq.n	8002000 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fd8:	f7ff f84e 	bl	8001078 <HAL_GetTick>
 8001fdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fde:	e008      	b.n	8001ff2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001fe0:	f7ff f84a 	bl	8001078 <HAL_GetTick>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	693b      	ldr	r3, [r7, #16]
 8001fe8:	1ad3      	subs	r3, r2, r3
 8001fea:	2b64      	cmp	r3, #100	; 0x64
 8001fec:	d901      	bls.n	8001ff2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001fee:	2303      	movs	r3, #3
 8001ff0:	e207      	b.n	8002402 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ff2:	4b5b      	ldr	r3, [pc, #364]	; (8002160 <HAL_RCC_OscConfig+0x240>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d0f0      	beq.n	8001fe0 <HAL_RCC_OscConfig+0xc0>
 8001ffe:	e014      	b.n	800202a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002000:	f7ff f83a 	bl	8001078 <HAL_GetTick>
 8002004:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002006:	e008      	b.n	800201a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002008:	f7ff f836 	bl	8001078 <HAL_GetTick>
 800200c:	4602      	mov	r2, r0
 800200e:	693b      	ldr	r3, [r7, #16]
 8002010:	1ad3      	subs	r3, r2, r3
 8002012:	2b64      	cmp	r3, #100	; 0x64
 8002014:	d901      	bls.n	800201a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002016:	2303      	movs	r3, #3
 8002018:	e1f3      	b.n	8002402 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800201a:	4b51      	ldr	r3, [pc, #324]	; (8002160 <HAL_RCC_OscConfig+0x240>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002022:	2b00      	cmp	r3, #0
 8002024:	d1f0      	bne.n	8002008 <HAL_RCC_OscConfig+0xe8>
 8002026:	e000      	b.n	800202a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002028:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f003 0302 	and.w	r3, r3, #2
 8002032:	2b00      	cmp	r3, #0
 8002034:	d063      	beq.n	80020fe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002036:	4b4a      	ldr	r3, [pc, #296]	; (8002160 <HAL_RCC_OscConfig+0x240>)
 8002038:	689b      	ldr	r3, [r3, #8]
 800203a:	f003 030c 	and.w	r3, r3, #12
 800203e:	2b00      	cmp	r3, #0
 8002040:	d00b      	beq.n	800205a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002042:	4b47      	ldr	r3, [pc, #284]	; (8002160 <HAL_RCC_OscConfig+0x240>)
 8002044:	689b      	ldr	r3, [r3, #8]
 8002046:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800204a:	2b08      	cmp	r3, #8
 800204c:	d11c      	bne.n	8002088 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800204e:	4b44      	ldr	r3, [pc, #272]	; (8002160 <HAL_RCC_OscConfig+0x240>)
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002056:	2b00      	cmp	r3, #0
 8002058:	d116      	bne.n	8002088 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800205a:	4b41      	ldr	r3, [pc, #260]	; (8002160 <HAL_RCC_OscConfig+0x240>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f003 0302 	and.w	r3, r3, #2
 8002062:	2b00      	cmp	r3, #0
 8002064:	d005      	beq.n	8002072 <HAL_RCC_OscConfig+0x152>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	68db      	ldr	r3, [r3, #12]
 800206a:	2b01      	cmp	r3, #1
 800206c:	d001      	beq.n	8002072 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800206e:	2301      	movs	r3, #1
 8002070:	e1c7      	b.n	8002402 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002072:	4b3b      	ldr	r3, [pc, #236]	; (8002160 <HAL_RCC_OscConfig+0x240>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	691b      	ldr	r3, [r3, #16]
 800207e:	00db      	lsls	r3, r3, #3
 8002080:	4937      	ldr	r1, [pc, #220]	; (8002160 <HAL_RCC_OscConfig+0x240>)
 8002082:	4313      	orrs	r3, r2
 8002084:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002086:	e03a      	b.n	80020fe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	68db      	ldr	r3, [r3, #12]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d020      	beq.n	80020d2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002090:	4b34      	ldr	r3, [pc, #208]	; (8002164 <HAL_RCC_OscConfig+0x244>)
 8002092:	2201      	movs	r2, #1
 8002094:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002096:	f7fe ffef 	bl	8001078 <HAL_GetTick>
 800209a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800209c:	e008      	b.n	80020b0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800209e:	f7fe ffeb 	bl	8001078 <HAL_GetTick>
 80020a2:	4602      	mov	r2, r0
 80020a4:	693b      	ldr	r3, [r7, #16]
 80020a6:	1ad3      	subs	r3, r2, r3
 80020a8:	2b02      	cmp	r3, #2
 80020aa:	d901      	bls.n	80020b0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80020ac:	2303      	movs	r3, #3
 80020ae:	e1a8      	b.n	8002402 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020b0:	4b2b      	ldr	r3, [pc, #172]	; (8002160 <HAL_RCC_OscConfig+0x240>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f003 0302 	and.w	r3, r3, #2
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d0f0      	beq.n	800209e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020bc:	4b28      	ldr	r3, [pc, #160]	; (8002160 <HAL_RCC_OscConfig+0x240>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	691b      	ldr	r3, [r3, #16]
 80020c8:	00db      	lsls	r3, r3, #3
 80020ca:	4925      	ldr	r1, [pc, #148]	; (8002160 <HAL_RCC_OscConfig+0x240>)
 80020cc:	4313      	orrs	r3, r2
 80020ce:	600b      	str	r3, [r1, #0]
 80020d0:	e015      	b.n	80020fe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020d2:	4b24      	ldr	r3, [pc, #144]	; (8002164 <HAL_RCC_OscConfig+0x244>)
 80020d4:	2200      	movs	r2, #0
 80020d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020d8:	f7fe ffce 	bl	8001078 <HAL_GetTick>
 80020dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020de:	e008      	b.n	80020f2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020e0:	f7fe ffca 	bl	8001078 <HAL_GetTick>
 80020e4:	4602      	mov	r2, r0
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	1ad3      	subs	r3, r2, r3
 80020ea:	2b02      	cmp	r3, #2
 80020ec:	d901      	bls.n	80020f2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80020ee:	2303      	movs	r3, #3
 80020f0:	e187      	b.n	8002402 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020f2:	4b1b      	ldr	r3, [pc, #108]	; (8002160 <HAL_RCC_OscConfig+0x240>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f003 0302 	and.w	r3, r3, #2
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d1f0      	bne.n	80020e0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f003 0308 	and.w	r3, r3, #8
 8002106:	2b00      	cmp	r3, #0
 8002108:	d036      	beq.n	8002178 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	695b      	ldr	r3, [r3, #20]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d016      	beq.n	8002140 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002112:	4b15      	ldr	r3, [pc, #84]	; (8002168 <HAL_RCC_OscConfig+0x248>)
 8002114:	2201      	movs	r2, #1
 8002116:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002118:	f7fe ffae 	bl	8001078 <HAL_GetTick>
 800211c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800211e:	e008      	b.n	8002132 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002120:	f7fe ffaa 	bl	8001078 <HAL_GetTick>
 8002124:	4602      	mov	r2, r0
 8002126:	693b      	ldr	r3, [r7, #16]
 8002128:	1ad3      	subs	r3, r2, r3
 800212a:	2b02      	cmp	r3, #2
 800212c:	d901      	bls.n	8002132 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800212e:	2303      	movs	r3, #3
 8002130:	e167      	b.n	8002402 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002132:	4b0b      	ldr	r3, [pc, #44]	; (8002160 <HAL_RCC_OscConfig+0x240>)
 8002134:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002136:	f003 0302 	and.w	r3, r3, #2
 800213a:	2b00      	cmp	r3, #0
 800213c:	d0f0      	beq.n	8002120 <HAL_RCC_OscConfig+0x200>
 800213e:	e01b      	b.n	8002178 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002140:	4b09      	ldr	r3, [pc, #36]	; (8002168 <HAL_RCC_OscConfig+0x248>)
 8002142:	2200      	movs	r2, #0
 8002144:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002146:	f7fe ff97 	bl	8001078 <HAL_GetTick>
 800214a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800214c:	e00e      	b.n	800216c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800214e:	f7fe ff93 	bl	8001078 <HAL_GetTick>
 8002152:	4602      	mov	r2, r0
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	1ad3      	subs	r3, r2, r3
 8002158:	2b02      	cmp	r3, #2
 800215a:	d907      	bls.n	800216c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800215c:	2303      	movs	r3, #3
 800215e:	e150      	b.n	8002402 <HAL_RCC_OscConfig+0x4e2>
 8002160:	40023800 	.word	0x40023800
 8002164:	42470000 	.word	0x42470000
 8002168:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800216c:	4b88      	ldr	r3, [pc, #544]	; (8002390 <HAL_RCC_OscConfig+0x470>)
 800216e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002170:	f003 0302 	and.w	r3, r3, #2
 8002174:	2b00      	cmp	r3, #0
 8002176:	d1ea      	bne.n	800214e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f003 0304 	and.w	r3, r3, #4
 8002180:	2b00      	cmp	r3, #0
 8002182:	f000 8097 	beq.w	80022b4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002186:	2300      	movs	r3, #0
 8002188:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800218a:	4b81      	ldr	r3, [pc, #516]	; (8002390 <HAL_RCC_OscConfig+0x470>)
 800218c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800218e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002192:	2b00      	cmp	r3, #0
 8002194:	d10f      	bne.n	80021b6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002196:	2300      	movs	r3, #0
 8002198:	60bb      	str	r3, [r7, #8]
 800219a:	4b7d      	ldr	r3, [pc, #500]	; (8002390 <HAL_RCC_OscConfig+0x470>)
 800219c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800219e:	4a7c      	ldr	r2, [pc, #496]	; (8002390 <HAL_RCC_OscConfig+0x470>)
 80021a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021a4:	6413      	str	r3, [r2, #64]	; 0x40
 80021a6:	4b7a      	ldr	r3, [pc, #488]	; (8002390 <HAL_RCC_OscConfig+0x470>)
 80021a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021ae:	60bb      	str	r3, [r7, #8]
 80021b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021b2:	2301      	movs	r3, #1
 80021b4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021b6:	4b77      	ldr	r3, [pc, #476]	; (8002394 <HAL_RCC_OscConfig+0x474>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d118      	bne.n	80021f4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021c2:	4b74      	ldr	r3, [pc, #464]	; (8002394 <HAL_RCC_OscConfig+0x474>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a73      	ldr	r2, [pc, #460]	; (8002394 <HAL_RCC_OscConfig+0x474>)
 80021c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021ce:	f7fe ff53 	bl	8001078 <HAL_GetTick>
 80021d2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021d4:	e008      	b.n	80021e8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021d6:	f7fe ff4f 	bl	8001078 <HAL_GetTick>
 80021da:	4602      	mov	r2, r0
 80021dc:	693b      	ldr	r3, [r7, #16]
 80021de:	1ad3      	subs	r3, r2, r3
 80021e0:	2b02      	cmp	r3, #2
 80021e2:	d901      	bls.n	80021e8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80021e4:	2303      	movs	r3, #3
 80021e6:	e10c      	b.n	8002402 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021e8:	4b6a      	ldr	r3, [pc, #424]	; (8002394 <HAL_RCC_OscConfig+0x474>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d0f0      	beq.n	80021d6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	689b      	ldr	r3, [r3, #8]
 80021f8:	2b01      	cmp	r3, #1
 80021fa:	d106      	bne.n	800220a <HAL_RCC_OscConfig+0x2ea>
 80021fc:	4b64      	ldr	r3, [pc, #400]	; (8002390 <HAL_RCC_OscConfig+0x470>)
 80021fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002200:	4a63      	ldr	r2, [pc, #396]	; (8002390 <HAL_RCC_OscConfig+0x470>)
 8002202:	f043 0301 	orr.w	r3, r3, #1
 8002206:	6713      	str	r3, [r2, #112]	; 0x70
 8002208:	e01c      	b.n	8002244 <HAL_RCC_OscConfig+0x324>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	689b      	ldr	r3, [r3, #8]
 800220e:	2b05      	cmp	r3, #5
 8002210:	d10c      	bne.n	800222c <HAL_RCC_OscConfig+0x30c>
 8002212:	4b5f      	ldr	r3, [pc, #380]	; (8002390 <HAL_RCC_OscConfig+0x470>)
 8002214:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002216:	4a5e      	ldr	r2, [pc, #376]	; (8002390 <HAL_RCC_OscConfig+0x470>)
 8002218:	f043 0304 	orr.w	r3, r3, #4
 800221c:	6713      	str	r3, [r2, #112]	; 0x70
 800221e:	4b5c      	ldr	r3, [pc, #368]	; (8002390 <HAL_RCC_OscConfig+0x470>)
 8002220:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002222:	4a5b      	ldr	r2, [pc, #364]	; (8002390 <HAL_RCC_OscConfig+0x470>)
 8002224:	f043 0301 	orr.w	r3, r3, #1
 8002228:	6713      	str	r3, [r2, #112]	; 0x70
 800222a:	e00b      	b.n	8002244 <HAL_RCC_OscConfig+0x324>
 800222c:	4b58      	ldr	r3, [pc, #352]	; (8002390 <HAL_RCC_OscConfig+0x470>)
 800222e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002230:	4a57      	ldr	r2, [pc, #348]	; (8002390 <HAL_RCC_OscConfig+0x470>)
 8002232:	f023 0301 	bic.w	r3, r3, #1
 8002236:	6713      	str	r3, [r2, #112]	; 0x70
 8002238:	4b55      	ldr	r3, [pc, #340]	; (8002390 <HAL_RCC_OscConfig+0x470>)
 800223a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800223c:	4a54      	ldr	r2, [pc, #336]	; (8002390 <HAL_RCC_OscConfig+0x470>)
 800223e:	f023 0304 	bic.w	r3, r3, #4
 8002242:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	689b      	ldr	r3, [r3, #8]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d015      	beq.n	8002278 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800224c:	f7fe ff14 	bl	8001078 <HAL_GetTick>
 8002250:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002252:	e00a      	b.n	800226a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002254:	f7fe ff10 	bl	8001078 <HAL_GetTick>
 8002258:	4602      	mov	r2, r0
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	1ad3      	subs	r3, r2, r3
 800225e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002262:	4293      	cmp	r3, r2
 8002264:	d901      	bls.n	800226a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002266:	2303      	movs	r3, #3
 8002268:	e0cb      	b.n	8002402 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800226a:	4b49      	ldr	r3, [pc, #292]	; (8002390 <HAL_RCC_OscConfig+0x470>)
 800226c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800226e:	f003 0302 	and.w	r3, r3, #2
 8002272:	2b00      	cmp	r3, #0
 8002274:	d0ee      	beq.n	8002254 <HAL_RCC_OscConfig+0x334>
 8002276:	e014      	b.n	80022a2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002278:	f7fe fefe 	bl	8001078 <HAL_GetTick>
 800227c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800227e:	e00a      	b.n	8002296 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002280:	f7fe fefa 	bl	8001078 <HAL_GetTick>
 8002284:	4602      	mov	r2, r0
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	1ad3      	subs	r3, r2, r3
 800228a:	f241 3288 	movw	r2, #5000	; 0x1388
 800228e:	4293      	cmp	r3, r2
 8002290:	d901      	bls.n	8002296 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002292:	2303      	movs	r3, #3
 8002294:	e0b5      	b.n	8002402 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002296:	4b3e      	ldr	r3, [pc, #248]	; (8002390 <HAL_RCC_OscConfig+0x470>)
 8002298:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800229a:	f003 0302 	and.w	r3, r3, #2
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d1ee      	bne.n	8002280 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80022a2:	7dfb      	ldrb	r3, [r7, #23]
 80022a4:	2b01      	cmp	r3, #1
 80022a6:	d105      	bne.n	80022b4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022a8:	4b39      	ldr	r3, [pc, #228]	; (8002390 <HAL_RCC_OscConfig+0x470>)
 80022aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ac:	4a38      	ldr	r2, [pc, #224]	; (8002390 <HAL_RCC_OscConfig+0x470>)
 80022ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022b2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	699b      	ldr	r3, [r3, #24]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	f000 80a1 	beq.w	8002400 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80022be:	4b34      	ldr	r3, [pc, #208]	; (8002390 <HAL_RCC_OscConfig+0x470>)
 80022c0:	689b      	ldr	r3, [r3, #8]
 80022c2:	f003 030c 	and.w	r3, r3, #12
 80022c6:	2b08      	cmp	r3, #8
 80022c8:	d05c      	beq.n	8002384 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	699b      	ldr	r3, [r3, #24]
 80022ce:	2b02      	cmp	r3, #2
 80022d0:	d141      	bne.n	8002356 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022d2:	4b31      	ldr	r3, [pc, #196]	; (8002398 <HAL_RCC_OscConfig+0x478>)
 80022d4:	2200      	movs	r2, #0
 80022d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022d8:	f7fe fece 	bl	8001078 <HAL_GetTick>
 80022dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022de:	e008      	b.n	80022f2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022e0:	f7fe feca 	bl	8001078 <HAL_GetTick>
 80022e4:	4602      	mov	r2, r0
 80022e6:	693b      	ldr	r3, [r7, #16]
 80022e8:	1ad3      	subs	r3, r2, r3
 80022ea:	2b02      	cmp	r3, #2
 80022ec:	d901      	bls.n	80022f2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80022ee:	2303      	movs	r3, #3
 80022f0:	e087      	b.n	8002402 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022f2:	4b27      	ldr	r3, [pc, #156]	; (8002390 <HAL_RCC_OscConfig+0x470>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d1f0      	bne.n	80022e0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	69da      	ldr	r2, [r3, #28]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6a1b      	ldr	r3, [r3, #32]
 8002306:	431a      	orrs	r2, r3
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800230c:	019b      	lsls	r3, r3, #6
 800230e:	431a      	orrs	r2, r3
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002314:	085b      	lsrs	r3, r3, #1
 8002316:	3b01      	subs	r3, #1
 8002318:	041b      	lsls	r3, r3, #16
 800231a:	431a      	orrs	r2, r3
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002320:	061b      	lsls	r3, r3, #24
 8002322:	491b      	ldr	r1, [pc, #108]	; (8002390 <HAL_RCC_OscConfig+0x470>)
 8002324:	4313      	orrs	r3, r2
 8002326:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002328:	4b1b      	ldr	r3, [pc, #108]	; (8002398 <HAL_RCC_OscConfig+0x478>)
 800232a:	2201      	movs	r2, #1
 800232c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800232e:	f7fe fea3 	bl	8001078 <HAL_GetTick>
 8002332:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002334:	e008      	b.n	8002348 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002336:	f7fe fe9f 	bl	8001078 <HAL_GetTick>
 800233a:	4602      	mov	r2, r0
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	1ad3      	subs	r3, r2, r3
 8002340:	2b02      	cmp	r3, #2
 8002342:	d901      	bls.n	8002348 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002344:	2303      	movs	r3, #3
 8002346:	e05c      	b.n	8002402 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002348:	4b11      	ldr	r3, [pc, #68]	; (8002390 <HAL_RCC_OscConfig+0x470>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002350:	2b00      	cmp	r3, #0
 8002352:	d0f0      	beq.n	8002336 <HAL_RCC_OscConfig+0x416>
 8002354:	e054      	b.n	8002400 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002356:	4b10      	ldr	r3, [pc, #64]	; (8002398 <HAL_RCC_OscConfig+0x478>)
 8002358:	2200      	movs	r2, #0
 800235a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800235c:	f7fe fe8c 	bl	8001078 <HAL_GetTick>
 8002360:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002362:	e008      	b.n	8002376 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002364:	f7fe fe88 	bl	8001078 <HAL_GetTick>
 8002368:	4602      	mov	r2, r0
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	1ad3      	subs	r3, r2, r3
 800236e:	2b02      	cmp	r3, #2
 8002370:	d901      	bls.n	8002376 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002372:	2303      	movs	r3, #3
 8002374:	e045      	b.n	8002402 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002376:	4b06      	ldr	r3, [pc, #24]	; (8002390 <HAL_RCC_OscConfig+0x470>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800237e:	2b00      	cmp	r3, #0
 8002380:	d1f0      	bne.n	8002364 <HAL_RCC_OscConfig+0x444>
 8002382:	e03d      	b.n	8002400 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	699b      	ldr	r3, [r3, #24]
 8002388:	2b01      	cmp	r3, #1
 800238a:	d107      	bne.n	800239c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800238c:	2301      	movs	r3, #1
 800238e:	e038      	b.n	8002402 <HAL_RCC_OscConfig+0x4e2>
 8002390:	40023800 	.word	0x40023800
 8002394:	40007000 	.word	0x40007000
 8002398:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800239c:	4b1b      	ldr	r3, [pc, #108]	; (800240c <HAL_RCC_OscConfig+0x4ec>)
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	699b      	ldr	r3, [r3, #24]
 80023a6:	2b01      	cmp	r3, #1
 80023a8:	d028      	beq.n	80023fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80023b4:	429a      	cmp	r2, r3
 80023b6:	d121      	bne.n	80023fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023c2:	429a      	cmp	r2, r3
 80023c4:	d11a      	bne.n	80023fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80023c6:	68fa      	ldr	r2, [r7, #12]
 80023c8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80023cc:	4013      	ands	r3, r2
 80023ce:	687a      	ldr	r2, [r7, #4]
 80023d0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80023d2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d111      	bne.n	80023fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023e2:	085b      	lsrs	r3, r3, #1
 80023e4:	3b01      	subs	r3, #1
 80023e6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80023e8:	429a      	cmp	r2, r3
 80023ea:	d107      	bne.n	80023fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023f6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80023f8:	429a      	cmp	r2, r3
 80023fa:	d001      	beq.n	8002400 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80023fc:	2301      	movs	r3, #1
 80023fe:	e000      	b.n	8002402 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002400:	2300      	movs	r3, #0
}
 8002402:	4618      	mov	r0, r3
 8002404:	3718      	adds	r7, #24
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}
 800240a:	bf00      	nop
 800240c:	40023800 	.word	0x40023800

08002410 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b084      	sub	sp, #16
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
 8002418:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d101      	bne.n	8002424 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002420:	2301      	movs	r3, #1
 8002422:	e0cc      	b.n	80025be <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002424:	4b68      	ldr	r3, [pc, #416]	; (80025c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f003 030f 	and.w	r3, r3, #15
 800242c:	683a      	ldr	r2, [r7, #0]
 800242e:	429a      	cmp	r2, r3
 8002430:	d90c      	bls.n	800244c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002432:	4b65      	ldr	r3, [pc, #404]	; (80025c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002434:	683a      	ldr	r2, [r7, #0]
 8002436:	b2d2      	uxtb	r2, r2
 8002438:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800243a:	4b63      	ldr	r3, [pc, #396]	; (80025c8 <HAL_RCC_ClockConfig+0x1b8>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f003 030f 	and.w	r3, r3, #15
 8002442:	683a      	ldr	r2, [r7, #0]
 8002444:	429a      	cmp	r2, r3
 8002446:	d001      	beq.n	800244c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002448:	2301      	movs	r3, #1
 800244a:	e0b8      	b.n	80025be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f003 0302 	and.w	r3, r3, #2
 8002454:	2b00      	cmp	r3, #0
 8002456:	d020      	beq.n	800249a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f003 0304 	and.w	r3, r3, #4
 8002460:	2b00      	cmp	r3, #0
 8002462:	d005      	beq.n	8002470 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002464:	4b59      	ldr	r3, [pc, #356]	; (80025cc <HAL_RCC_ClockConfig+0x1bc>)
 8002466:	689b      	ldr	r3, [r3, #8]
 8002468:	4a58      	ldr	r2, [pc, #352]	; (80025cc <HAL_RCC_ClockConfig+0x1bc>)
 800246a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800246e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f003 0308 	and.w	r3, r3, #8
 8002478:	2b00      	cmp	r3, #0
 800247a:	d005      	beq.n	8002488 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800247c:	4b53      	ldr	r3, [pc, #332]	; (80025cc <HAL_RCC_ClockConfig+0x1bc>)
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	4a52      	ldr	r2, [pc, #328]	; (80025cc <HAL_RCC_ClockConfig+0x1bc>)
 8002482:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002486:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002488:	4b50      	ldr	r3, [pc, #320]	; (80025cc <HAL_RCC_ClockConfig+0x1bc>)
 800248a:	689b      	ldr	r3, [r3, #8]
 800248c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	689b      	ldr	r3, [r3, #8]
 8002494:	494d      	ldr	r1, [pc, #308]	; (80025cc <HAL_RCC_ClockConfig+0x1bc>)
 8002496:	4313      	orrs	r3, r2
 8002498:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f003 0301 	and.w	r3, r3, #1
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d044      	beq.n	8002530 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	2b01      	cmp	r3, #1
 80024ac:	d107      	bne.n	80024be <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024ae:	4b47      	ldr	r3, [pc, #284]	; (80025cc <HAL_RCC_ClockConfig+0x1bc>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d119      	bne.n	80024ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	e07f      	b.n	80025be <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	2b02      	cmp	r3, #2
 80024c4:	d003      	beq.n	80024ce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80024ca:	2b03      	cmp	r3, #3
 80024cc:	d107      	bne.n	80024de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024ce:	4b3f      	ldr	r3, [pc, #252]	; (80025cc <HAL_RCC_ClockConfig+0x1bc>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d109      	bne.n	80024ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024da:	2301      	movs	r3, #1
 80024dc:	e06f      	b.n	80025be <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024de:	4b3b      	ldr	r3, [pc, #236]	; (80025cc <HAL_RCC_ClockConfig+0x1bc>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f003 0302 	and.w	r3, r3, #2
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d101      	bne.n	80024ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	e067      	b.n	80025be <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024ee:	4b37      	ldr	r3, [pc, #220]	; (80025cc <HAL_RCC_ClockConfig+0x1bc>)
 80024f0:	689b      	ldr	r3, [r3, #8]
 80024f2:	f023 0203 	bic.w	r2, r3, #3
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	4934      	ldr	r1, [pc, #208]	; (80025cc <HAL_RCC_ClockConfig+0x1bc>)
 80024fc:	4313      	orrs	r3, r2
 80024fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002500:	f7fe fdba 	bl	8001078 <HAL_GetTick>
 8002504:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002506:	e00a      	b.n	800251e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002508:	f7fe fdb6 	bl	8001078 <HAL_GetTick>
 800250c:	4602      	mov	r2, r0
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	1ad3      	subs	r3, r2, r3
 8002512:	f241 3288 	movw	r2, #5000	; 0x1388
 8002516:	4293      	cmp	r3, r2
 8002518:	d901      	bls.n	800251e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800251a:	2303      	movs	r3, #3
 800251c:	e04f      	b.n	80025be <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800251e:	4b2b      	ldr	r3, [pc, #172]	; (80025cc <HAL_RCC_ClockConfig+0x1bc>)
 8002520:	689b      	ldr	r3, [r3, #8]
 8002522:	f003 020c 	and.w	r2, r3, #12
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	009b      	lsls	r3, r3, #2
 800252c:	429a      	cmp	r2, r3
 800252e:	d1eb      	bne.n	8002508 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002530:	4b25      	ldr	r3, [pc, #148]	; (80025c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f003 030f 	and.w	r3, r3, #15
 8002538:	683a      	ldr	r2, [r7, #0]
 800253a:	429a      	cmp	r2, r3
 800253c:	d20c      	bcs.n	8002558 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800253e:	4b22      	ldr	r3, [pc, #136]	; (80025c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002540:	683a      	ldr	r2, [r7, #0]
 8002542:	b2d2      	uxtb	r2, r2
 8002544:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002546:	4b20      	ldr	r3, [pc, #128]	; (80025c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 030f 	and.w	r3, r3, #15
 800254e:	683a      	ldr	r2, [r7, #0]
 8002550:	429a      	cmp	r2, r3
 8002552:	d001      	beq.n	8002558 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002554:	2301      	movs	r3, #1
 8002556:	e032      	b.n	80025be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f003 0304 	and.w	r3, r3, #4
 8002560:	2b00      	cmp	r3, #0
 8002562:	d008      	beq.n	8002576 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002564:	4b19      	ldr	r3, [pc, #100]	; (80025cc <HAL_RCC_ClockConfig+0x1bc>)
 8002566:	689b      	ldr	r3, [r3, #8]
 8002568:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	68db      	ldr	r3, [r3, #12]
 8002570:	4916      	ldr	r1, [pc, #88]	; (80025cc <HAL_RCC_ClockConfig+0x1bc>)
 8002572:	4313      	orrs	r3, r2
 8002574:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f003 0308 	and.w	r3, r3, #8
 800257e:	2b00      	cmp	r3, #0
 8002580:	d009      	beq.n	8002596 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002582:	4b12      	ldr	r3, [pc, #72]	; (80025cc <HAL_RCC_ClockConfig+0x1bc>)
 8002584:	689b      	ldr	r3, [r3, #8]
 8002586:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	691b      	ldr	r3, [r3, #16]
 800258e:	00db      	lsls	r3, r3, #3
 8002590:	490e      	ldr	r1, [pc, #56]	; (80025cc <HAL_RCC_ClockConfig+0x1bc>)
 8002592:	4313      	orrs	r3, r2
 8002594:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002596:	f000 f821 	bl	80025dc <HAL_RCC_GetSysClockFreq>
 800259a:	4602      	mov	r2, r0
 800259c:	4b0b      	ldr	r3, [pc, #44]	; (80025cc <HAL_RCC_ClockConfig+0x1bc>)
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	091b      	lsrs	r3, r3, #4
 80025a2:	f003 030f 	and.w	r3, r3, #15
 80025a6:	490a      	ldr	r1, [pc, #40]	; (80025d0 <HAL_RCC_ClockConfig+0x1c0>)
 80025a8:	5ccb      	ldrb	r3, [r1, r3]
 80025aa:	fa22 f303 	lsr.w	r3, r2, r3
 80025ae:	4a09      	ldr	r2, [pc, #36]	; (80025d4 <HAL_RCC_ClockConfig+0x1c4>)
 80025b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80025b2:	4b09      	ldr	r3, [pc, #36]	; (80025d8 <HAL_RCC_ClockConfig+0x1c8>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4618      	mov	r0, r3
 80025b8:	f7fe fbac 	bl	8000d14 <HAL_InitTick>

  return HAL_OK;
 80025bc:	2300      	movs	r3, #0
}
 80025be:	4618      	mov	r0, r3
 80025c0:	3710      	adds	r7, #16
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	bf00      	nop
 80025c8:	40023c00 	.word	0x40023c00
 80025cc:	40023800 	.word	0x40023800
 80025d0:	08008118 	.word	0x08008118
 80025d4:	20000000 	.word	0x20000000
 80025d8:	20000004 	.word	0x20000004

080025dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80025e0:	b094      	sub	sp, #80	; 0x50
 80025e2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80025e4:	2300      	movs	r3, #0
 80025e6:	647b      	str	r3, [r7, #68]	; 0x44
 80025e8:	2300      	movs	r3, #0
 80025ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80025ec:	2300      	movs	r3, #0
 80025ee:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80025f0:	2300      	movs	r3, #0
 80025f2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80025f4:	4b79      	ldr	r3, [pc, #484]	; (80027dc <HAL_RCC_GetSysClockFreq+0x200>)
 80025f6:	689b      	ldr	r3, [r3, #8]
 80025f8:	f003 030c 	and.w	r3, r3, #12
 80025fc:	2b08      	cmp	r3, #8
 80025fe:	d00d      	beq.n	800261c <HAL_RCC_GetSysClockFreq+0x40>
 8002600:	2b08      	cmp	r3, #8
 8002602:	f200 80e1 	bhi.w	80027c8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002606:	2b00      	cmp	r3, #0
 8002608:	d002      	beq.n	8002610 <HAL_RCC_GetSysClockFreq+0x34>
 800260a:	2b04      	cmp	r3, #4
 800260c:	d003      	beq.n	8002616 <HAL_RCC_GetSysClockFreq+0x3a>
 800260e:	e0db      	b.n	80027c8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002610:	4b73      	ldr	r3, [pc, #460]	; (80027e0 <HAL_RCC_GetSysClockFreq+0x204>)
 8002612:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002614:	e0db      	b.n	80027ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002616:	4b73      	ldr	r3, [pc, #460]	; (80027e4 <HAL_RCC_GetSysClockFreq+0x208>)
 8002618:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800261a:	e0d8      	b.n	80027ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800261c:	4b6f      	ldr	r3, [pc, #444]	; (80027dc <HAL_RCC_GetSysClockFreq+0x200>)
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002624:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002626:	4b6d      	ldr	r3, [pc, #436]	; (80027dc <HAL_RCC_GetSysClockFreq+0x200>)
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800262e:	2b00      	cmp	r3, #0
 8002630:	d063      	beq.n	80026fa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002632:	4b6a      	ldr	r3, [pc, #424]	; (80027dc <HAL_RCC_GetSysClockFreq+0x200>)
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	099b      	lsrs	r3, r3, #6
 8002638:	2200      	movs	r2, #0
 800263a:	63bb      	str	r3, [r7, #56]	; 0x38
 800263c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800263e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002640:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002644:	633b      	str	r3, [r7, #48]	; 0x30
 8002646:	2300      	movs	r3, #0
 8002648:	637b      	str	r3, [r7, #52]	; 0x34
 800264a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800264e:	4622      	mov	r2, r4
 8002650:	462b      	mov	r3, r5
 8002652:	f04f 0000 	mov.w	r0, #0
 8002656:	f04f 0100 	mov.w	r1, #0
 800265a:	0159      	lsls	r1, r3, #5
 800265c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002660:	0150      	lsls	r0, r2, #5
 8002662:	4602      	mov	r2, r0
 8002664:	460b      	mov	r3, r1
 8002666:	4621      	mov	r1, r4
 8002668:	1a51      	subs	r1, r2, r1
 800266a:	6139      	str	r1, [r7, #16]
 800266c:	4629      	mov	r1, r5
 800266e:	eb63 0301 	sbc.w	r3, r3, r1
 8002672:	617b      	str	r3, [r7, #20]
 8002674:	f04f 0200 	mov.w	r2, #0
 8002678:	f04f 0300 	mov.w	r3, #0
 800267c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002680:	4659      	mov	r1, fp
 8002682:	018b      	lsls	r3, r1, #6
 8002684:	4651      	mov	r1, sl
 8002686:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800268a:	4651      	mov	r1, sl
 800268c:	018a      	lsls	r2, r1, #6
 800268e:	4651      	mov	r1, sl
 8002690:	ebb2 0801 	subs.w	r8, r2, r1
 8002694:	4659      	mov	r1, fp
 8002696:	eb63 0901 	sbc.w	r9, r3, r1
 800269a:	f04f 0200 	mov.w	r2, #0
 800269e:	f04f 0300 	mov.w	r3, #0
 80026a2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80026a6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80026aa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80026ae:	4690      	mov	r8, r2
 80026b0:	4699      	mov	r9, r3
 80026b2:	4623      	mov	r3, r4
 80026b4:	eb18 0303 	adds.w	r3, r8, r3
 80026b8:	60bb      	str	r3, [r7, #8]
 80026ba:	462b      	mov	r3, r5
 80026bc:	eb49 0303 	adc.w	r3, r9, r3
 80026c0:	60fb      	str	r3, [r7, #12]
 80026c2:	f04f 0200 	mov.w	r2, #0
 80026c6:	f04f 0300 	mov.w	r3, #0
 80026ca:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80026ce:	4629      	mov	r1, r5
 80026d0:	024b      	lsls	r3, r1, #9
 80026d2:	4621      	mov	r1, r4
 80026d4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80026d8:	4621      	mov	r1, r4
 80026da:	024a      	lsls	r2, r1, #9
 80026dc:	4610      	mov	r0, r2
 80026de:	4619      	mov	r1, r3
 80026e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026e2:	2200      	movs	r2, #0
 80026e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80026e6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80026e8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80026ec:	f7fd fdd0 	bl	8000290 <__aeabi_uldivmod>
 80026f0:	4602      	mov	r2, r0
 80026f2:	460b      	mov	r3, r1
 80026f4:	4613      	mov	r3, r2
 80026f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80026f8:	e058      	b.n	80027ac <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026fa:	4b38      	ldr	r3, [pc, #224]	; (80027dc <HAL_RCC_GetSysClockFreq+0x200>)
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	099b      	lsrs	r3, r3, #6
 8002700:	2200      	movs	r2, #0
 8002702:	4618      	mov	r0, r3
 8002704:	4611      	mov	r1, r2
 8002706:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800270a:	623b      	str	r3, [r7, #32]
 800270c:	2300      	movs	r3, #0
 800270e:	627b      	str	r3, [r7, #36]	; 0x24
 8002710:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002714:	4642      	mov	r2, r8
 8002716:	464b      	mov	r3, r9
 8002718:	f04f 0000 	mov.w	r0, #0
 800271c:	f04f 0100 	mov.w	r1, #0
 8002720:	0159      	lsls	r1, r3, #5
 8002722:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002726:	0150      	lsls	r0, r2, #5
 8002728:	4602      	mov	r2, r0
 800272a:	460b      	mov	r3, r1
 800272c:	4641      	mov	r1, r8
 800272e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002732:	4649      	mov	r1, r9
 8002734:	eb63 0b01 	sbc.w	fp, r3, r1
 8002738:	f04f 0200 	mov.w	r2, #0
 800273c:	f04f 0300 	mov.w	r3, #0
 8002740:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002744:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002748:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800274c:	ebb2 040a 	subs.w	r4, r2, sl
 8002750:	eb63 050b 	sbc.w	r5, r3, fp
 8002754:	f04f 0200 	mov.w	r2, #0
 8002758:	f04f 0300 	mov.w	r3, #0
 800275c:	00eb      	lsls	r3, r5, #3
 800275e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002762:	00e2      	lsls	r2, r4, #3
 8002764:	4614      	mov	r4, r2
 8002766:	461d      	mov	r5, r3
 8002768:	4643      	mov	r3, r8
 800276a:	18e3      	adds	r3, r4, r3
 800276c:	603b      	str	r3, [r7, #0]
 800276e:	464b      	mov	r3, r9
 8002770:	eb45 0303 	adc.w	r3, r5, r3
 8002774:	607b      	str	r3, [r7, #4]
 8002776:	f04f 0200 	mov.w	r2, #0
 800277a:	f04f 0300 	mov.w	r3, #0
 800277e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002782:	4629      	mov	r1, r5
 8002784:	028b      	lsls	r3, r1, #10
 8002786:	4621      	mov	r1, r4
 8002788:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800278c:	4621      	mov	r1, r4
 800278e:	028a      	lsls	r2, r1, #10
 8002790:	4610      	mov	r0, r2
 8002792:	4619      	mov	r1, r3
 8002794:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002796:	2200      	movs	r2, #0
 8002798:	61bb      	str	r3, [r7, #24]
 800279a:	61fa      	str	r2, [r7, #28]
 800279c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80027a0:	f7fd fd76 	bl	8000290 <__aeabi_uldivmod>
 80027a4:	4602      	mov	r2, r0
 80027a6:	460b      	mov	r3, r1
 80027a8:	4613      	mov	r3, r2
 80027aa:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80027ac:	4b0b      	ldr	r3, [pc, #44]	; (80027dc <HAL_RCC_GetSysClockFreq+0x200>)
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	0c1b      	lsrs	r3, r3, #16
 80027b2:	f003 0303 	and.w	r3, r3, #3
 80027b6:	3301      	adds	r3, #1
 80027b8:	005b      	lsls	r3, r3, #1
 80027ba:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80027bc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80027be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80027c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80027c4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80027c6:	e002      	b.n	80027ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80027c8:	4b05      	ldr	r3, [pc, #20]	; (80027e0 <HAL_RCC_GetSysClockFreq+0x204>)
 80027ca:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80027cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80027ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	3750      	adds	r7, #80	; 0x50
 80027d4:	46bd      	mov	sp, r7
 80027d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80027da:	bf00      	nop
 80027dc:	40023800 	.word	0x40023800
 80027e0:	00f42400 	.word	0x00f42400
 80027e4:	007a1200 	.word	0x007a1200

080027e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027e8:	b480      	push	{r7}
 80027ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80027ec:	4b03      	ldr	r3, [pc, #12]	; (80027fc <HAL_RCC_GetHCLKFreq+0x14>)
 80027ee:	681b      	ldr	r3, [r3, #0]
}
 80027f0:	4618      	mov	r0, r3
 80027f2:	46bd      	mov	sp, r7
 80027f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f8:	4770      	bx	lr
 80027fa:	bf00      	nop
 80027fc:	20000000 	.word	0x20000000

08002800 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002804:	f7ff fff0 	bl	80027e8 <HAL_RCC_GetHCLKFreq>
 8002808:	4602      	mov	r2, r0
 800280a:	4b05      	ldr	r3, [pc, #20]	; (8002820 <HAL_RCC_GetPCLK1Freq+0x20>)
 800280c:	689b      	ldr	r3, [r3, #8]
 800280e:	0a9b      	lsrs	r3, r3, #10
 8002810:	f003 0307 	and.w	r3, r3, #7
 8002814:	4903      	ldr	r1, [pc, #12]	; (8002824 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002816:	5ccb      	ldrb	r3, [r1, r3]
 8002818:	fa22 f303 	lsr.w	r3, r2, r3
}
 800281c:	4618      	mov	r0, r3
 800281e:	bd80      	pop	{r7, pc}
 8002820:	40023800 	.word	0x40023800
 8002824:	08008128 	.word	0x08008128

08002828 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800282c:	f7ff ffdc 	bl	80027e8 <HAL_RCC_GetHCLKFreq>
 8002830:	4602      	mov	r2, r0
 8002832:	4b05      	ldr	r3, [pc, #20]	; (8002848 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002834:	689b      	ldr	r3, [r3, #8]
 8002836:	0b5b      	lsrs	r3, r3, #13
 8002838:	f003 0307 	and.w	r3, r3, #7
 800283c:	4903      	ldr	r1, [pc, #12]	; (800284c <HAL_RCC_GetPCLK2Freq+0x24>)
 800283e:	5ccb      	ldrb	r3, [r1, r3]
 8002840:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002844:	4618      	mov	r0, r3
 8002846:	bd80      	pop	{r7, pc}
 8002848:	40023800 	.word	0x40023800
 800284c:	08008128 	.word	0x08008128

08002850 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002850:	b480      	push	{r7}
 8002852:	b083      	sub	sp, #12
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
 8002858:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	220f      	movs	r2, #15
 800285e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002860:	4b12      	ldr	r3, [pc, #72]	; (80028ac <HAL_RCC_GetClockConfig+0x5c>)
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	f003 0203 	and.w	r2, r3, #3
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800286c:	4b0f      	ldr	r3, [pc, #60]	; (80028ac <HAL_RCC_GetClockConfig+0x5c>)
 800286e:	689b      	ldr	r3, [r3, #8]
 8002870:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002878:	4b0c      	ldr	r3, [pc, #48]	; (80028ac <HAL_RCC_GetClockConfig+0x5c>)
 800287a:	689b      	ldr	r3, [r3, #8]
 800287c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002884:	4b09      	ldr	r3, [pc, #36]	; (80028ac <HAL_RCC_GetClockConfig+0x5c>)
 8002886:	689b      	ldr	r3, [r3, #8]
 8002888:	08db      	lsrs	r3, r3, #3
 800288a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002892:	4b07      	ldr	r3, [pc, #28]	; (80028b0 <HAL_RCC_GetClockConfig+0x60>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f003 020f 	and.w	r2, r3, #15
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	601a      	str	r2, [r3, #0]
}
 800289e:	bf00      	nop
 80028a0:	370c      	adds	r7, #12
 80028a2:	46bd      	mov	sp, r7
 80028a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a8:	4770      	bx	lr
 80028aa:	bf00      	nop
 80028ac:	40023800 	.word	0x40023800
 80028b0:	40023c00 	.word	0x40023c00

080028b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b082      	sub	sp, #8
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d101      	bne.n	80028c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	e041      	b.n	800294a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028cc:	b2db      	uxtb	r3, r3
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d106      	bne.n	80028e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2200      	movs	r2, #0
 80028d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80028da:	6878      	ldr	r0, [r7, #4]
 80028dc:	f000 f839 	bl	8002952 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2202      	movs	r2, #2
 80028e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681a      	ldr	r2, [r3, #0]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	3304      	adds	r3, #4
 80028f0:	4619      	mov	r1, r3
 80028f2:	4610      	mov	r0, r2
 80028f4:	f000 f9d8 	bl	8002ca8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2201      	movs	r2, #1
 80028fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2201      	movs	r2, #1
 8002904:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2201      	movs	r2, #1
 800290c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2201      	movs	r2, #1
 8002914:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2201      	movs	r2, #1
 800291c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2201      	movs	r2, #1
 8002924:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2201      	movs	r2, #1
 800292c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2201      	movs	r2, #1
 8002934:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2201      	movs	r2, #1
 800293c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2201      	movs	r2, #1
 8002944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002948:	2300      	movs	r3, #0
}
 800294a:	4618      	mov	r0, r3
 800294c:	3708      	adds	r7, #8
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}

08002952 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002952:	b480      	push	{r7}
 8002954:	b083      	sub	sp, #12
 8002956:	af00      	add	r7, sp, #0
 8002958:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800295a:	bf00      	nop
 800295c:	370c      	adds	r7, #12
 800295e:	46bd      	mov	sp, r7
 8002960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002964:	4770      	bx	lr
	...

08002968 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002968:	b480      	push	{r7}
 800296a:	b085      	sub	sp, #20
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002976:	b2db      	uxtb	r3, r3
 8002978:	2b01      	cmp	r3, #1
 800297a:	d001      	beq.n	8002980 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800297c:	2301      	movs	r3, #1
 800297e:	e04e      	b.n	8002a1e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2202      	movs	r2, #2
 8002984:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	68da      	ldr	r2, [r3, #12]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f042 0201 	orr.w	r2, r2, #1
 8002996:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a23      	ldr	r2, [pc, #140]	; (8002a2c <HAL_TIM_Base_Start_IT+0xc4>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d022      	beq.n	80029e8 <HAL_TIM_Base_Start_IT+0x80>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029aa:	d01d      	beq.n	80029e8 <HAL_TIM_Base_Start_IT+0x80>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a1f      	ldr	r2, [pc, #124]	; (8002a30 <HAL_TIM_Base_Start_IT+0xc8>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d018      	beq.n	80029e8 <HAL_TIM_Base_Start_IT+0x80>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a1e      	ldr	r2, [pc, #120]	; (8002a34 <HAL_TIM_Base_Start_IT+0xcc>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d013      	beq.n	80029e8 <HAL_TIM_Base_Start_IT+0x80>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a1c      	ldr	r2, [pc, #112]	; (8002a38 <HAL_TIM_Base_Start_IT+0xd0>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d00e      	beq.n	80029e8 <HAL_TIM_Base_Start_IT+0x80>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a1b      	ldr	r2, [pc, #108]	; (8002a3c <HAL_TIM_Base_Start_IT+0xd4>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d009      	beq.n	80029e8 <HAL_TIM_Base_Start_IT+0x80>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a19      	ldr	r2, [pc, #100]	; (8002a40 <HAL_TIM_Base_Start_IT+0xd8>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d004      	beq.n	80029e8 <HAL_TIM_Base_Start_IT+0x80>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a18      	ldr	r2, [pc, #96]	; (8002a44 <HAL_TIM_Base_Start_IT+0xdc>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d111      	bne.n	8002a0c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	689b      	ldr	r3, [r3, #8]
 80029ee:	f003 0307 	and.w	r3, r3, #7
 80029f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	2b06      	cmp	r3, #6
 80029f8:	d010      	beq.n	8002a1c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	681a      	ldr	r2, [r3, #0]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f042 0201 	orr.w	r2, r2, #1
 8002a08:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a0a:	e007      	b.n	8002a1c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	681a      	ldr	r2, [r3, #0]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f042 0201 	orr.w	r2, r2, #1
 8002a1a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a1c:	2300      	movs	r3, #0
}
 8002a1e:	4618      	mov	r0, r3
 8002a20:	3714      	adds	r7, #20
 8002a22:	46bd      	mov	sp, r7
 8002a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a28:	4770      	bx	lr
 8002a2a:	bf00      	nop
 8002a2c:	40010000 	.word	0x40010000
 8002a30:	40000400 	.word	0x40000400
 8002a34:	40000800 	.word	0x40000800
 8002a38:	40000c00 	.word	0x40000c00
 8002a3c:	40010400 	.word	0x40010400
 8002a40:	40014000 	.word	0x40014000
 8002a44:	40001800 	.word	0x40001800

08002a48 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b082      	sub	sp, #8
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	691b      	ldr	r3, [r3, #16]
 8002a56:	f003 0302 	and.w	r3, r3, #2
 8002a5a:	2b02      	cmp	r3, #2
 8002a5c:	d122      	bne.n	8002aa4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	68db      	ldr	r3, [r3, #12]
 8002a64:	f003 0302 	and.w	r3, r3, #2
 8002a68:	2b02      	cmp	r3, #2
 8002a6a:	d11b      	bne.n	8002aa4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f06f 0202 	mvn.w	r2, #2
 8002a74:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2201      	movs	r2, #1
 8002a7a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	699b      	ldr	r3, [r3, #24]
 8002a82:	f003 0303 	and.w	r3, r3, #3
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d003      	beq.n	8002a92 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002a8a:	6878      	ldr	r0, [r7, #4]
 8002a8c:	f000 f8ee 	bl	8002c6c <HAL_TIM_IC_CaptureCallback>
 8002a90:	e005      	b.n	8002a9e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a92:	6878      	ldr	r0, [r7, #4]
 8002a94:	f000 f8e0 	bl	8002c58 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a98:	6878      	ldr	r0, [r7, #4]
 8002a9a:	f000 f8f1 	bl	8002c80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	691b      	ldr	r3, [r3, #16]
 8002aaa:	f003 0304 	and.w	r3, r3, #4
 8002aae:	2b04      	cmp	r3, #4
 8002ab0:	d122      	bne.n	8002af8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	68db      	ldr	r3, [r3, #12]
 8002ab8:	f003 0304 	and.w	r3, r3, #4
 8002abc:	2b04      	cmp	r3, #4
 8002abe:	d11b      	bne.n	8002af8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f06f 0204 	mvn.w	r2, #4
 8002ac8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2202      	movs	r2, #2
 8002ace:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	699b      	ldr	r3, [r3, #24]
 8002ad6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d003      	beq.n	8002ae6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ade:	6878      	ldr	r0, [r7, #4]
 8002ae0:	f000 f8c4 	bl	8002c6c <HAL_TIM_IC_CaptureCallback>
 8002ae4:	e005      	b.n	8002af2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ae6:	6878      	ldr	r0, [r7, #4]
 8002ae8:	f000 f8b6 	bl	8002c58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002aec:	6878      	ldr	r0, [r7, #4]
 8002aee:	f000 f8c7 	bl	8002c80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2200      	movs	r2, #0
 8002af6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	691b      	ldr	r3, [r3, #16]
 8002afe:	f003 0308 	and.w	r3, r3, #8
 8002b02:	2b08      	cmp	r3, #8
 8002b04:	d122      	bne.n	8002b4c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	68db      	ldr	r3, [r3, #12]
 8002b0c:	f003 0308 	and.w	r3, r3, #8
 8002b10:	2b08      	cmp	r3, #8
 8002b12:	d11b      	bne.n	8002b4c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f06f 0208 	mvn.w	r2, #8
 8002b1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2204      	movs	r2, #4
 8002b22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	69db      	ldr	r3, [r3, #28]
 8002b2a:	f003 0303 	and.w	r3, r3, #3
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d003      	beq.n	8002b3a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b32:	6878      	ldr	r0, [r7, #4]
 8002b34:	f000 f89a 	bl	8002c6c <HAL_TIM_IC_CaptureCallback>
 8002b38:	e005      	b.n	8002b46 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b3a:	6878      	ldr	r0, [r7, #4]
 8002b3c:	f000 f88c 	bl	8002c58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b40:	6878      	ldr	r0, [r7, #4]
 8002b42:	f000 f89d 	bl	8002c80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	691b      	ldr	r3, [r3, #16]
 8002b52:	f003 0310 	and.w	r3, r3, #16
 8002b56:	2b10      	cmp	r3, #16
 8002b58:	d122      	bne.n	8002ba0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	68db      	ldr	r3, [r3, #12]
 8002b60:	f003 0310 	and.w	r3, r3, #16
 8002b64:	2b10      	cmp	r3, #16
 8002b66:	d11b      	bne.n	8002ba0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f06f 0210 	mvn.w	r2, #16
 8002b70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2208      	movs	r2, #8
 8002b76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	69db      	ldr	r3, [r3, #28]
 8002b7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d003      	beq.n	8002b8e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b86:	6878      	ldr	r0, [r7, #4]
 8002b88:	f000 f870 	bl	8002c6c <HAL_TIM_IC_CaptureCallback>
 8002b8c:	e005      	b.n	8002b9a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b8e:	6878      	ldr	r0, [r7, #4]
 8002b90:	f000 f862 	bl	8002c58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b94:	6878      	ldr	r0, [r7, #4]
 8002b96:	f000 f873 	bl	8002c80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	691b      	ldr	r3, [r3, #16]
 8002ba6:	f003 0301 	and.w	r3, r3, #1
 8002baa:	2b01      	cmp	r3, #1
 8002bac:	d10e      	bne.n	8002bcc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	68db      	ldr	r3, [r3, #12]
 8002bb4:	f003 0301 	and.w	r3, r3, #1
 8002bb8:	2b01      	cmp	r3, #1
 8002bba:	d107      	bne.n	8002bcc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f06f 0201 	mvn.w	r2, #1
 8002bc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002bc6:	6878      	ldr	r0, [r7, #4]
 8002bc8:	f7fd ffd0 	bl	8000b6c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	691b      	ldr	r3, [r3, #16]
 8002bd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bd6:	2b80      	cmp	r3, #128	; 0x80
 8002bd8:	d10e      	bne.n	8002bf8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	68db      	ldr	r3, [r3, #12]
 8002be0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002be4:	2b80      	cmp	r3, #128	; 0x80
 8002be6:	d107      	bne.n	8002bf8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002bf0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002bf2:	6878      	ldr	r0, [r7, #4]
 8002bf4:	f000 f902 	bl	8002dfc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	691b      	ldr	r3, [r3, #16]
 8002bfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c02:	2b40      	cmp	r3, #64	; 0x40
 8002c04:	d10e      	bne.n	8002c24 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	68db      	ldr	r3, [r3, #12]
 8002c0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c10:	2b40      	cmp	r3, #64	; 0x40
 8002c12:	d107      	bne.n	8002c24 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002c1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002c1e:	6878      	ldr	r0, [r7, #4]
 8002c20:	f000 f838 	bl	8002c94 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	691b      	ldr	r3, [r3, #16]
 8002c2a:	f003 0320 	and.w	r3, r3, #32
 8002c2e:	2b20      	cmp	r3, #32
 8002c30:	d10e      	bne.n	8002c50 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	68db      	ldr	r3, [r3, #12]
 8002c38:	f003 0320 	and.w	r3, r3, #32
 8002c3c:	2b20      	cmp	r3, #32
 8002c3e:	d107      	bne.n	8002c50 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f06f 0220 	mvn.w	r2, #32
 8002c48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002c4a:	6878      	ldr	r0, [r7, #4]
 8002c4c:	f000 f8cc 	bl	8002de8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002c50:	bf00      	nop
 8002c52:	3708      	adds	r7, #8
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bd80      	pop	{r7, pc}

08002c58 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b083      	sub	sp, #12
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002c60:	bf00      	nop
 8002c62:	370c      	adds	r7, #12
 8002c64:	46bd      	mov	sp, r7
 8002c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6a:	4770      	bx	lr

08002c6c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b083      	sub	sp, #12
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002c74:	bf00      	nop
 8002c76:	370c      	adds	r7, #12
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7e:	4770      	bx	lr

08002c80 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002c80:	b480      	push	{r7}
 8002c82:	b083      	sub	sp, #12
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002c88:	bf00      	nop
 8002c8a:	370c      	adds	r7, #12
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c92:	4770      	bx	lr

08002c94 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002c94:	b480      	push	{r7}
 8002c96:	b083      	sub	sp, #12
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002c9c:	bf00      	nop
 8002c9e:	370c      	adds	r7, #12
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca6:	4770      	bx	lr

08002ca8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	b085      	sub	sp, #20
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
 8002cb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	4a40      	ldr	r2, [pc, #256]	; (8002dbc <TIM_Base_SetConfig+0x114>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d013      	beq.n	8002ce8 <TIM_Base_SetConfig+0x40>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cc6:	d00f      	beq.n	8002ce8 <TIM_Base_SetConfig+0x40>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	4a3d      	ldr	r2, [pc, #244]	; (8002dc0 <TIM_Base_SetConfig+0x118>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d00b      	beq.n	8002ce8 <TIM_Base_SetConfig+0x40>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	4a3c      	ldr	r2, [pc, #240]	; (8002dc4 <TIM_Base_SetConfig+0x11c>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d007      	beq.n	8002ce8 <TIM_Base_SetConfig+0x40>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	4a3b      	ldr	r2, [pc, #236]	; (8002dc8 <TIM_Base_SetConfig+0x120>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d003      	beq.n	8002ce8 <TIM_Base_SetConfig+0x40>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	4a3a      	ldr	r2, [pc, #232]	; (8002dcc <TIM_Base_SetConfig+0x124>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d108      	bne.n	8002cfa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	68fa      	ldr	r2, [r7, #12]
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	4a2f      	ldr	r2, [pc, #188]	; (8002dbc <TIM_Base_SetConfig+0x114>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d02b      	beq.n	8002d5a <TIM_Base_SetConfig+0xb2>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d08:	d027      	beq.n	8002d5a <TIM_Base_SetConfig+0xb2>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	4a2c      	ldr	r2, [pc, #176]	; (8002dc0 <TIM_Base_SetConfig+0x118>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d023      	beq.n	8002d5a <TIM_Base_SetConfig+0xb2>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	4a2b      	ldr	r2, [pc, #172]	; (8002dc4 <TIM_Base_SetConfig+0x11c>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d01f      	beq.n	8002d5a <TIM_Base_SetConfig+0xb2>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	4a2a      	ldr	r2, [pc, #168]	; (8002dc8 <TIM_Base_SetConfig+0x120>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d01b      	beq.n	8002d5a <TIM_Base_SetConfig+0xb2>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	4a29      	ldr	r2, [pc, #164]	; (8002dcc <TIM_Base_SetConfig+0x124>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d017      	beq.n	8002d5a <TIM_Base_SetConfig+0xb2>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	4a28      	ldr	r2, [pc, #160]	; (8002dd0 <TIM_Base_SetConfig+0x128>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d013      	beq.n	8002d5a <TIM_Base_SetConfig+0xb2>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	4a27      	ldr	r2, [pc, #156]	; (8002dd4 <TIM_Base_SetConfig+0x12c>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d00f      	beq.n	8002d5a <TIM_Base_SetConfig+0xb2>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	4a26      	ldr	r2, [pc, #152]	; (8002dd8 <TIM_Base_SetConfig+0x130>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d00b      	beq.n	8002d5a <TIM_Base_SetConfig+0xb2>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	4a25      	ldr	r2, [pc, #148]	; (8002ddc <TIM_Base_SetConfig+0x134>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d007      	beq.n	8002d5a <TIM_Base_SetConfig+0xb2>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	4a24      	ldr	r2, [pc, #144]	; (8002de0 <TIM_Base_SetConfig+0x138>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d003      	beq.n	8002d5a <TIM_Base_SetConfig+0xb2>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	4a23      	ldr	r2, [pc, #140]	; (8002de4 <TIM_Base_SetConfig+0x13c>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d108      	bne.n	8002d6c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d60:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	68db      	ldr	r3, [r3, #12]
 8002d66:	68fa      	ldr	r2, [r7, #12]
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	695b      	ldr	r3, [r3, #20]
 8002d76:	4313      	orrs	r3, r2
 8002d78:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	68fa      	ldr	r2, [r7, #12]
 8002d7e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	689a      	ldr	r2, [r3, #8]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	681a      	ldr	r2, [r3, #0]
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	4a0a      	ldr	r2, [pc, #40]	; (8002dbc <TIM_Base_SetConfig+0x114>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d003      	beq.n	8002da0 <TIM_Base_SetConfig+0xf8>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	4a0c      	ldr	r2, [pc, #48]	; (8002dcc <TIM_Base_SetConfig+0x124>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d103      	bne.n	8002da8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	691a      	ldr	r2, [r3, #16]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2201      	movs	r2, #1
 8002dac:	615a      	str	r2, [r3, #20]
}
 8002dae:	bf00      	nop
 8002db0:	3714      	adds	r7, #20
 8002db2:	46bd      	mov	sp, r7
 8002db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db8:	4770      	bx	lr
 8002dba:	bf00      	nop
 8002dbc:	40010000 	.word	0x40010000
 8002dc0:	40000400 	.word	0x40000400
 8002dc4:	40000800 	.word	0x40000800
 8002dc8:	40000c00 	.word	0x40000c00
 8002dcc:	40010400 	.word	0x40010400
 8002dd0:	40014000 	.word	0x40014000
 8002dd4:	40014400 	.word	0x40014400
 8002dd8:	40014800 	.word	0x40014800
 8002ddc:	40001800 	.word	0x40001800
 8002de0:	40001c00 	.word	0x40001c00
 8002de4:	40002000 	.word	0x40002000

08002de8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002de8:	b480      	push	{r7}
 8002dea:	b083      	sub	sp, #12
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002df0:	bf00      	nop
 8002df2:	370c      	adds	r7, #12
 8002df4:	46bd      	mov	sp, r7
 8002df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfa:	4770      	bx	lr

08002dfc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b083      	sub	sp, #12
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002e04:	bf00      	nop
 8002e06:	370c      	adds	r7, #12
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0e:	4770      	bx	lr

08002e10 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b082      	sub	sp, #8
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d101      	bne.n	8002e22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	e03f      	b.n	8002ea2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e28:	b2db      	uxtb	r3, r3
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d106      	bne.n	8002e3c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2200      	movs	r2, #0
 8002e32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e36:	6878      	ldr	r0, [r7, #4]
 8002e38:	f7fd ff24 	bl	8000c84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2224      	movs	r2, #36	; 0x24
 8002e40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	68da      	ldr	r2, [r3, #12]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002e52:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002e54:	6878      	ldr	r0, [r7, #4]
 8002e56:	f000 f929 	bl	80030ac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	691a      	ldr	r2, [r3, #16]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002e68:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	695a      	ldr	r2, [r3, #20]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002e78:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	68da      	ldr	r2, [r3, #12]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002e88:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2220      	movs	r2, #32
 8002e94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2220      	movs	r2, #32
 8002e9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002ea0:	2300      	movs	r3, #0
}
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	3708      	adds	r7, #8
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}

08002eaa <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002eaa:	b580      	push	{r7, lr}
 8002eac:	b08a      	sub	sp, #40	; 0x28
 8002eae:	af02      	add	r7, sp, #8
 8002eb0:	60f8      	str	r0, [r7, #12]
 8002eb2:	60b9      	str	r1, [r7, #8]
 8002eb4:	603b      	str	r3, [r7, #0]
 8002eb6:	4613      	mov	r3, r2
 8002eb8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002eba:	2300      	movs	r3, #0
 8002ebc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ec4:	b2db      	uxtb	r3, r3
 8002ec6:	2b20      	cmp	r3, #32
 8002ec8:	d17c      	bne.n	8002fc4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d002      	beq.n	8002ed6 <HAL_UART_Transmit+0x2c>
 8002ed0:	88fb      	ldrh	r3, [r7, #6]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d101      	bne.n	8002eda <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	e075      	b.n	8002fc6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ee0:	2b01      	cmp	r3, #1
 8002ee2:	d101      	bne.n	8002ee8 <HAL_UART_Transmit+0x3e>
 8002ee4:	2302      	movs	r3, #2
 8002ee6:	e06e      	b.n	8002fc6 <HAL_UART_Transmit+0x11c>
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	2201      	movs	r2, #1
 8002eec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	2221      	movs	r2, #33	; 0x21
 8002efa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002efe:	f7fe f8bb 	bl	8001078 <HAL_GetTick>
 8002f02:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	88fa      	ldrh	r2, [r7, #6]
 8002f08:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	88fa      	ldrh	r2, [r7, #6]
 8002f0e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	689b      	ldr	r3, [r3, #8]
 8002f14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f18:	d108      	bne.n	8002f2c <HAL_UART_Transmit+0x82>
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	691b      	ldr	r3, [r3, #16]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d104      	bne.n	8002f2c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002f22:	2300      	movs	r3, #0
 8002f24:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	61bb      	str	r3, [r7, #24]
 8002f2a:	e003      	b.n	8002f34 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002f30:	2300      	movs	r3, #0
 8002f32:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	2200      	movs	r2, #0
 8002f38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002f3c:	e02a      	b.n	8002f94 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	9300      	str	r3, [sp, #0]
 8002f42:	697b      	ldr	r3, [r7, #20]
 8002f44:	2200      	movs	r2, #0
 8002f46:	2180      	movs	r1, #128	; 0x80
 8002f48:	68f8      	ldr	r0, [r7, #12]
 8002f4a:	f000 f840 	bl	8002fce <UART_WaitOnFlagUntilTimeout>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d001      	beq.n	8002f58 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002f54:	2303      	movs	r3, #3
 8002f56:	e036      	b.n	8002fc6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002f58:	69fb      	ldr	r3, [r7, #28]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d10b      	bne.n	8002f76 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002f5e:	69bb      	ldr	r3, [r7, #24]
 8002f60:	881b      	ldrh	r3, [r3, #0]
 8002f62:	461a      	mov	r2, r3
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f6c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002f6e:	69bb      	ldr	r3, [r7, #24]
 8002f70:	3302      	adds	r3, #2
 8002f72:	61bb      	str	r3, [r7, #24]
 8002f74:	e007      	b.n	8002f86 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002f76:	69fb      	ldr	r3, [r7, #28]
 8002f78:	781a      	ldrb	r2, [r3, #0]
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002f80:	69fb      	ldr	r3, [r7, #28]
 8002f82:	3301      	adds	r3, #1
 8002f84:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002f8a:	b29b      	uxth	r3, r3
 8002f8c:	3b01      	subs	r3, #1
 8002f8e:	b29a      	uxth	r2, r3
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002f98:	b29b      	uxth	r3, r3
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d1cf      	bne.n	8002f3e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	9300      	str	r3, [sp, #0]
 8002fa2:	697b      	ldr	r3, [r7, #20]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	2140      	movs	r1, #64	; 0x40
 8002fa8:	68f8      	ldr	r0, [r7, #12]
 8002faa:	f000 f810 	bl	8002fce <UART_WaitOnFlagUntilTimeout>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d001      	beq.n	8002fb8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002fb4:	2303      	movs	r3, #3
 8002fb6:	e006      	b.n	8002fc6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	2220      	movs	r2, #32
 8002fbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	e000      	b.n	8002fc6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002fc4:	2302      	movs	r3, #2
  }
}
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	3720      	adds	r7, #32
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}

08002fce <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002fce:	b580      	push	{r7, lr}
 8002fd0:	b090      	sub	sp, #64	; 0x40
 8002fd2:	af00      	add	r7, sp, #0
 8002fd4:	60f8      	str	r0, [r7, #12]
 8002fd6:	60b9      	str	r1, [r7, #8]
 8002fd8:	603b      	str	r3, [r7, #0]
 8002fda:	4613      	mov	r3, r2
 8002fdc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002fde:	e050      	b.n	8003082 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fe0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002fe2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fe6:	d04c      	beq.n	8003082 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002fe8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d007      	beq.n	8002ffe <UART_WaitOnFlagUntilTimeout+0x30>
 8002fee:	f7fe f843 	bl	8001078 <HAL_GetTick>
 8002ff2:	4602      	mov	r2, r0
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	1ad3      	subs	r3, r2, r3
 8002ff8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002ffa:	429a      	cmp	r2, r3
 8002ffc:	d241      	bcs.n	8003082 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	330c      	adds	r3, #12
 8003004:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003008:	e853 3f00 	ldrex	r3, [r3]
 800300c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800300e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003010:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003014:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	330c      	adds	r3, #12
 800301c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800301e:	637a      	str	r2, [r7, #52]	; 0x34
 8003020:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003022:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003024:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003026:	e841 2300 	strex	r3, r2, [r1]
 800302a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800302c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800302e:	2b00      	cmp	r3, #0
 8003030:	d1e5      	bne.n	8002ffe <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	3314      	adds	r3, #20
 8003038:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800303a:	697b      	ldr	r3, [r7, #20]
 800303c:	e853 3f00 	ldrex	r3, [r3]
 8003040:	613b      	str	r3, [r7, #16]
   return(result);
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	f023 0301 	bic.w	r3, r3, #1
 8003048:	63bb      	str	r3, [r7, #56]	; 0x38
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	3314      	adds	r3, #20
 8003050:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003052:	623a      	str	r2, [r7, #32]
 8003054:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003056:	69f9      	ldr	r1, [r7, #28]
 8003058:	6a3a      	ldr	r2, [r7, #32]
 800305a:	e841 2300 	strex	r3, r2, [r1]
 800305e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003060:	69bb      	ldr	r3, [r7, #24]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d1e5      	bne.n	8003032 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	2220      	movs	r2, #32
 800306a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	2220      	movs	r2, #32
 8003072:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	2200      	movs	r2, #0
 800307a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800307e:	2303      	movs	r3, #3
 8003080:	e00f      	b.n	80030a2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	681a      	ldr	r2, [r3, #0]
 8003088:	68bb      	ldr	r3, [r7, #8]
 800308a:	4013      	ands	r3, r2
 800308c:	68ba      	ldr	r2, [r7, #8]
 800308e:	429a      	cmp	r2, r3
 8003090:	bf0c      	ite	eq
 8003092:	2301      	moveq	r3, #1
 8003094:	2300      	movne	r3, #0
 8003096:	b2db      	uxtb	r3, r3
 8003098:	461a      	mov	r2, r3
 800309a:	79fb      	ldrb	r3, [r7, #7]
 800309c:	429a      	cmp	r2, r3
 800309e:	d09f      	beq.n	8002fe0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80030a0:	2300      	movs	r3, #0
}
 80030a2:	4618      	mov	r0, r3
 80030a4:	3740      	adds	r7, #64	; 0x40
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}
	...

080030ac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80030ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80030b0:	b0c0      	sub	sp, #256	; 0x100
 80030b2:	af00      	add	r7, sp, #0
 80030b4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80030b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	691b      	ldr	r3, [r3, #16]
 80030c0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80030c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030c8:	68d9      	ldr	r1, [r3, #12]
 80030ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030ce:	681a      	ldr	r2, [r3, #0]
 80030d0:	ea40 0301 	orr.w	r3, r0, r1
 80030d4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80030d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030da:	689a      	ldr	r2, [r3, #8]
 80030dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030e0:	691b      	ldr	r3, [r3, #16]
 80030e2:	431a      	orrs	r2, r3
 80030e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030e8:	695b      	ldr	r3, [r3, #20]
 80030ea:	431a      	orrs	r2, r3
 80030ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030f0:	69db      	ldr	r3, [r3, #28]
 80030f2:	4313      	orrs	r3, r2
 80030f4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80030f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	68db      	ldr	r3, [r3, #12]
 8003100:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003104:	f021 010c 	bic.w	r1, r1, #12
 8003108:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800310c:	681a      	ldr	r2, [r3, #0]
 800310e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003112:	430b      	orrs	r3, r1
 8003114:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003116:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	695b      	ldr	r3, [r3, #20]
 800311e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003122:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003126:	6999      	ldr	r1, [r3, #24]
 8003128:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800312c:	681a      	ldr	r2, [r3, #0]
 800312e:	ea40 0301 	orr.w	r3, r0, r1
 8003132:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003134:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003138:	681a      	ldr	r2, [r3, #0]
 800313a:	4b8f      	ldr	r3, [pc, #572]	; (8003378 <UART_SetConfig+0x2cc>)
 800313c:	429a      	cmp	r2, r3
 800313e:	d005      	beq.n	800314c <UART_SetConfig+0xa0>
 8003140:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003144:	681a      	ldr	r2, [r3, #0]
 8003146:	4b8d      	ldr	r3, [pc, #564]	; (800337c <UART_SetConfig+0x2d0>)
 8003148:	429a      	cmp	r2, r3
 800314a:	d104      	bne.n	8003156 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800314c:	f7ff fb6c 	bl	8002828 <HAL_RCC_GetPCLK2Freq>
 8003150:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003154:	e003      	b.n	800315e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003156:	f7ff fb53 	bl	8002800 <HAL_RCC_GetPCLK1Freq>
 800315a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800315e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003162:	69db      	ldr	r3, [r3, #28]
 8003164:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003168:	f040 810c 	bne.w	8003384 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800316c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003170:	2200      	movs	r2, #0
 8003172:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003176:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800317a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800317e:	4622      	mov	r2, r4
 8003180:	462b      	mov	r3, r5
 8003182:	1891      	adds	r1, r2, r2
 8003184:	65b9      	str	r1, [r7, #88]	; 0x58
 8003186:	415b      	adcs	r3, r3
 8003188:	65fb      	str	r3, [r7, #92]	; 0x5c
 800318a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800318e:	4621      	mov	r1, r4
 8003190:	eb12 0801 	adds.w	r8, r2, r1
 8003194:	4629      	mov	r1, r5
 8003196:	eb43 0901 	adc.w	r9, r3, r1
 800319a:	f04f 0200 	mov.w	r2, #0
 800319e:	f04f 0300 	mov.w	r3, #0
 80031a2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80031a6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80031aa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80031ae:	4690      	mov	r8, r2
 80031b0:	4699      	mov	r9, r3
 80031b2:	4623      	mov	r3, r4
 80031b4:	eb18 0303 	adds.w	r3, r8, r3
 80031b8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80031bc:	462b      	mov	r3, r5
 80031be:	eb49 0303 	adc.w	r3, r9, r3
 80031c2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80031c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	2200      	movs	r2, #0
 80031ce:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80031d2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80031d6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80031da:	460b      	mov	r3, r1
 80031dc:	18db      	adds	r3, r3, r3
 80031de:	653b      	str	r3, [r7, #80]	; 0x50
 80031e0:	4613      	mov	r3, r2
 80031e2:	eb42 0303 	adc.w	r3, r2, r3
 80031e6:	657b      	str	r3, [r7, #84]	; 0x54
 80031e8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80031ec:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80031f0:	f7fd f84e 	bl	8000290 <__aeabi_uldivmod>
 80031f4:	4602      	mov	r2, r0
 80031f6:	460b      	mov	r3, r1
 80031f8:	4b61      	ldr	r3, [pc, #388]	; (8003380 <UART_SetConfig+0x2d4>)
 80031fa:	fba3 2302 	umull	r2, r3, r3, r2
 80031fe:	095b      	lsrs	r3, r3, #5
 8003200:	011c      	lsls	r4, r3, #4
 8003202:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003206:	2200      	movs	r2, #0
 8003208:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800320c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003210:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003214:	4642      	mov	r2, r8
 8003216:	464b      	mov	r3, r9
 8003218:	1891      	adds	r1, r2, r2
 800321a:	64b9      	str	r1, [r7, #72]	; 0x48
 800321c:	415b      	adcs	r3, r3
 800321e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003220:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003224:	4641      	mov	r1, r8
 8003226:	eb12 0a01 	adds.w	sl, r2, r1
 800322a:	4649      	mov	r1, r9
 800322c:	eb43 0b01 	adc.w	fp, r3, r1
 8003230:	f04f 0200 	mov.w	r2, #0
 8003234:	f04f 0300 	mov.w	r3, #0
 8003238:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800323c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003240:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003244:	4692      	mov	sl, r2
 8003246:	469b      	mov	fp, r3
 8003248:	4643      	mov	r3, r8
 800324a:	eb1a 0303 	adds.w	r3, sl, r3
 800324e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003252:	464b      	mov	r3, r9
 8003254:	eb4b 0303 	adc.w	r3, fp, r3
 8003258:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800325c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	2200      	movs	r2, #0
 8003264:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003268:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800326c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003270:	460b      	mov	r3, r1
 8003272:	18db      	adds	r3, r3, r3
 8003274:	643b      	str	r3, [r7, #64]	; 0x40
 8003276:	4613      	mov	r3, r2
 8003278:	eb42 0303 	adc.w	r3, r2, r3
 800327c:	647b      	str	r3, [r7, #68]	; 0x44
 800327e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003282:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003286:	f7fd f803 	bl	8000290 <__aeabi_uldivmod>
 800328a:	4602      	mov	r2, r0
 800328c:	460b      	mov	r3, r1
 800328e:	4611      	mov	r1, r2
 8003290:	4b3b      	ldr	r3, [pc, #236]	; (8003380 <UART_SetConfig+0x2d4>)
 8003292:	fba3 2301 	umull	r2, r3, r3, r1
 8003296:	095b      	lsrs	r3, r3, #5
 8003298:	2264      	movs	r2, #100	; 0x64
 800329a:	fb02 f303 	mul.w	r3, r2, r3
 800329e:	1acb      	subs	r3, r1, r3
 80032a0:	00db      	lsls	r3, r3, #3
 80032a2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80032a6:	4b36      	ldr	r3, [pc, #216]	; (8003380 <UART_SetConfig+0x2d4>)
 80032a8:	fba3 2302 	umull	r2, r3, r3, r2
 80032ac:	095b      	lsrs	r3, r3, #5
 80032ae:	005b      	lsls	r3, r3, #1
 80032b0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80032b4:	441c      	add	r4, r3
 80032b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80032ba:	2200      	movs	r2, #0
 80032bc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80032c0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80032c4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80032c8:	4642      	mov	r2, r8
 80032ca:	464b      	mov	r3, r9
 80032cc:	1891      	adds	r1, r2, r2
 80032ce:	63b9      	str	r1, [r7, #56]	; 0x38
 80032d0:	415b      	adcs	r3, r3
 80032d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80032d4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80032d8:	4641      	mov	r1, r8
 80032da:	1851      	adds	r1, r2, r1
 80032dc:	6339      	str	r1, [r7, #48]	; 0x30
 80032de:	4649      	mov	r1, r9
 80032e0:	414b      	adcs	r3, r1
 80032e2:	637b      	str	r3, [r7, #52]	; 0x34
 80032e4:	f04f 0200 	mov.w	r2, #0
 80032e8:	f04f 0300 	mov.w	r3, #0
 80032ec:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80032f0:	4659      	mov	r1, fp
 80032f2:	00cb      	lsls	r3, r1, #3
 80032f4:	4651      	mov	r1, sl
 80032f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80032fa:	4651      	mov	r1, sl
 80032fc:	00ca      	lsls	r2, r1, #3
 80032fe:	4610      	mov	r0, r2
 8003300:	4619      	mov	r1, r3
 8003302:	4603      	mov	r3, r0
 8003304:	4642      	mov	r2, r8
 8003306:	189b      	adds	r3, r3, r2
 8003308:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800330c:	464b      	mov	r3, r9
 800330e:	460a      	mov	r2, r1
 8003310:	eb42 0303 	adc.w	r3, r2, r3
 8003314:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003318:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	2200      	movs	r2, #0
 8003320:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003324:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003328:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800332c:	460b      	mov	r3, r1
 800332e:	18db      	adds	r3, r3, r3
 8003330:	62bb      	str	r3, [r7, #40]	; 0x28
 8003332:	4613      	mov	r3, r2
 8003334:	eb42 0303 	adc.w	r3, r2, r3
 8003338:	62fb      	str	r3, [r7, #44]	; 0x2c
 800333a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800333e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003342:	f7fc ffa5 	bl	8000290 <__aeabi_uldivmod>
 8003346:	4602      	mov	r2, r0
 8003348:	460b      	mov	r3, r1
 800334a:	4b0d      	ldr	r3, [pc, #52]	; (8003380 <UART_SetConfig+0x2d4>)
 800334c:	fba3 1302 	umull	r1, r3, r3, r2
 8003350:	095b      	lsrs	r3, r3, #5
 8003352:	2164      	movs	r1, #100	; 0x64
 8003354:	fb01 f303 	mul.w	r3, r1, r3
 8003358:	1ad3      	subs	r3, r2, r3
 800335a:	00db      	lsls	r3, r3, #3
 800335c:	3332      	adds	r3, #50	; 0x32
 800335e:	4a08      	ldr	r2, [pc, #32]	; (8003380 <UART_SetConfig+0x2d4>)
 8003360:	fba2 2303 	umull	r2, r3, r2, r3
 8003364:	095b      	lsrs	r3, r3, #5
 8003366:	f003 0207 	and.w	r2, r3, #7
 800336a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4422      	add	r2, r4
 8003372:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003374:	e105      	b.n	8003582 <UART_SetConfig+0x4d6>
 8003376:	bf00      	nop
 8003378:	40011000 	.word	0x40011000
 800337c:	40011400 	.word	0x40011400
 8003380:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003384:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003388:	2200      	movs	r2, #0
 800338a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800338e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003392:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003396:	4642      	mov	r2, r8
 8003398:	464b      	mov	r3, r9
 800339a:	1891      	adds	r1, r2, r2
 800339c:	6239      	str	r1, [r7, #32]
 800339e:	415b      	adcs	r3, r3
 80033a0:	627b      	str	r3, [r7, #36]	; 0x24
 80033a2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80033a6:	4641      	mov	r1, r8
 80033a8:	1854      	adds	r4, r2, r1
 80033aa:	4649      	mov	r1, r9
 80033ac:	eb43 0501 	adc.w	r5, r3, r1
 80033b0:	f04f 0200 	mov.w	r2, #0
 80033b4:	f04f 0300 	mov.w	r3, #0
 80033b8:	00eb      	lsls	r3, r5, #3
 80033ba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80033be:	00e2      	lsls	r2, r4, #3
 80033c0:	4614      	mov	r4, r2
 80033c2:	461d      	mov	r5, r3
 80033c4:	4643      	mov	r3, r8
 80033c6:	18e3      	adds	r3, r4, r3
 80033c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80033cc:	464b      	mov	r3, r9
 80033ce:	eb45 0303 	adc.w	r3, r5, r3
 80033d2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80033d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	2200      	movs	r2, #0
 80033de:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80033e2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80033e6:	f04f 0200 	mov.w	r2, #0
 80033ea:	f04f 0300 	mov.w	r3, #0
 80033ee:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80033f2:	4629      	mov	r1, r5
 80033f4:	008b      	lsls	r3, r1, #2
 80033f6:	4621      	mov	r1, r4
 80033f8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80033fc:	4621      	mov	r1, r4
 80033fe:	008a      	lsls	r2, r1, #2
 8003400:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003404:	f7fc ff44 	bl	8000290 <__aeabi_uldivmod>
 8003408:	4602      	mov	r2, r0
 800340a:	460b      	mov	r3, r1
 800340c:	4b60      	ldr	r3, [pc, #384]	; (8003590 <UART_SetConfig+0x4e4>)
 800340e:	fba3 2302 	umull	r2, r3, r3, r2
 8003412:	095b      	lsrs	r3, r3, #5
 8003414:	011c      	lsls	r4, r3, #4
 8003416:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800341a:	2200      	movs	r2, #0
 800341c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003420:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003424:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003428:	4642      	mov	r2, r8
 800342a:	464b      	mov	r3, r9
 800342c:	1891      	adds	r1, r2, r2
 800342e:	61b9      	str	r1, [r7, #24]
 8003430:	415b      	adcs	r3, r3
 8003432:	61fb      	str	r3, [r7, #28]
 8003434:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003438:	4641      	mov	r1, r8
 800343a:	1851      	adds	r1, r2, r1
 800343c:	6139      	str	r1, [r7, #16]
 800343e:	4649      	mov	r1, r9
 8003440:	414b      	adcs	r3, r1
 8003442:	617b      	str	r3, [r7, #20]
 8003444:	f04f 0200 	mov.w	r2, #0
 8003448:	f04f 0300 	mov.w	r3, #0
 800344c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003450:	4659      	mov	r1, fp
 8003452:	00cb      	lsls	r3, r1, #3
 8003454:	4651      	mov	r1, sl
 8003456:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800345a:	4651      	mov	r1, sl
 800345c:	00ca      	lsls	r2, r1, #3
 800345e:	4610      	mov	r0, r2
 8003460:	4619      	mov	r1, r3
 8003462:	4603      	mov	r3, r0
 8003464:	4642      	mov	r2, r8
 8003466:	189b      	adds	r3, r3, r2
 8003468:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800346c:	464b      	mov	r3, r9
 800346e:	460a      	mov	r2, r1
 8003470:	eb42 0303 	adc.w	r3, r2, r3
 8003474:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003478:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	2200      	movs	r2, #0
 8003480:	67bb      	str	r3, [r7, #120]	; 0x78
 8003482:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003484:	f04f 0200 	mov.w	r2, #0
 8003488:	f04f 0300 	mov.w	r3, #0
 800348c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003490:	4649      	mov	r1, r9
 8003492:	008b      	lsls	r3, r1, #2
 8003494:	4641      	mov	r1, r8
 8003496:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800349a:	4641      	mov	r1, r8
 800349c:	008a      	lsls	r2, r1, #2
 800349e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80034a2:	f7fc fef5 	bl	8000290 <__aeabi_uldivmod>
 80034a6:	4602      	mov	r2, r0
 80034a8:	460b      	mov	r3, r1
 80034aa:	4b39      	ldr	r3, [pc, #228]	; (8003590 <UART_SetConfig+0x4e4>)
 80034ac:	fba3 1302 	umull	r1, r3, r3, r2
 80034b0:	095b      	lsrs	r3, r3, #5
 80034b2:	2164      	movs	r1, #100	; 0x64
 80034b4:	fb01 f303 	mul.w	r3, r1, r3
 80034b8:	1ad3      	subs	r3, r2, r3
 80034ba:	011b      	lsls	r3, r3, #4
 80034bc:	3332      	adds	r3, #50	; 0x32
 80034be:	4a34      	ldr	r2, [pc, #208]	; (8003590 <UART_SetConfig+0x4e4>)
 80034c0:	fba2 2303 	umull	r2, r3, r2, r3
 80034c4:	095b      	lsrs	r3, r3, #5
 80034c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80034ca:	441c      	add	r4, r3
 80034cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80034d0:	2200      	movs	r2, #0
 80034d2:	673b      	str	r3, [r7, #112]	; 0x70
 80034d4:	677a      	str	r2, [r7, #116]	; 0x74
 80034d6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80034da:	4642      	mov	r2, r8
 80034dc:	464b      	mov	r3, r9
 80034de:	1891      	adds	r1, r2, r2
 80034e0:	60b9      	str	r1, [r7, #8]
 80034e2:	415b      	adcs	r3, r3
 80034e4:	60fb      	str	r3, [r7, #12]
 80034e6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80034ea:	4641      	mov	r1, r8
 80034ec:	1851      	adds	r1, r2, r1
 80034ee:	6039      	str	r1, [r7, #0]
 80034f0:	4649      	mov	r1, r9
 80034f2:	414b      	adcs	r3, r1
 80034f4:	607b      	str	r3, [r7, #4]
 80034f6:	f04f 0200 	mov.w	r2, #0
 80034fa:	f04f 0300 	mov.w	r3, #0
 80034fe:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003502:	4659      	mov	r1, fp
 8003504:	00cb      	lsls	r3, r1, #3
 8003506:	4651      	mov	r1, sl
 8003508:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800350c:	4651      	mov	r1, sl
 800350e:	00ca      	lsls	r2, r1, #3
 8003510:	4610      	mov	r0, r2
 8003512:	4619      	mov	r1, r3
 8003514:	4603      	mov	r3, r0
 8003516:	4642      	mov	r2, r8
 8003518:	189b      	adds	r3, r3, r2
 800351a:	66bb      	str	r3, [r7, #104]	; 0x68
 800351c:	464b      	mov	r3, r9
 800351e:	460a      	mov	r2, r1
 8003520:	eb42 0303 	adc.w	r3, r2, r3
 8003524:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003526:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	2200      	movs	r2, #0
 800352e:	663b      	str	r3, [r7, #96]	; 0x60
 8003530:	667a      	str	r2, [r7, #100]	; 0x64
 8003532:	f04f 0200 	mov.w	r2, #0
 8003536:	f04f 0300 	mov.w	r3, #0
 800353a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800353e:	4649      	mov	r1, r9
 8003540:	008b      	lsls	r3, r1, #2
 8003542:	4641      	mov	r1, r8
 8003544:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003548:	4641      	mov	r1, r8
 800354a:	008a      	lsls	r2, r1, #2
 800354c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003550:	f7fc fe9e 	bl	8000290 <__aeabi_uldivmod>
 8003554:	4602      	mov	r2, r0
 8003556:	460b      	mov	r3, r1
 8003558:	4b0d      	ldr	r3, [pc, #52]	; (8003590 <UART_SetConfig+0x4e4>)
 800355a:	fba3 1302 	umull	r1, r3, r3, r2
 800355e:	095b      	lsrs	r3, r3, #5
 8003560:	2164      	movs	r1, #100	; 0x64
 8003562:	fb01 f303 	mul.w	r3, r1, r3
 8003566:	1ad3      	subs	r3, r2, r3
 8003568:	011b      	lsls	r3, r3, #4
 800356a:	3332      	adds	r3, #50	; 0x32
 800356c:	4a08      	ldr	r2, [pc, #32]	; (8003590 <UART_SetConfig+0x4e4>)
 800356e:	fba2 2303 	umull	r2, r3, r2, r3
 8003572:	095b      	lsrs	r3, r3, #5
 8003574:	f003 020f 	and.w	r2, r3, #15
 8003578:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4422      	add	r2, r4
 8003580:	609a      	str	r2, [r3, #8]
}
 8003582:	bf00      	nop
 8003584:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003588:	46bd      	mov	sp, r7
 800358a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800358e:	bf00      	nop
 8003590:	51eb851f 	.word	0x51eb851f

08003594 <__NVIC_SetPriority>:
{
 8003594:	b480      	push	{r7}
 8003596:	b083      	sub	sp, #12
 8003598:	af00      	add	r7, sp, #0
 800359a:	4603      	mov	r3, r0
 800359c:	6039      	str	r1, [r7, #0]
 800359e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	db0a      	blt.n	80035be <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	b2da      	uxtb	r2, r3
 80035ac:	490c      	ldr	r1, [pc, #48]	; (80035e0 <__NVIC_SetPriority+0x4c>)
 80035ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035b2:	0112      	lsls	r2, r2, #4
 80035b4:	b2d2      	uxtb	r2, r2
 80035b6:	440b      	add	r3, r1
 80035b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80035bc:	e00a      	b.n	80035d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	b2da      	uxtb	r2, r3
 80035c2:	4908      	ldr	r1, [pc, #32]	; (80035e4 <__NVIC_SetPriority+0x50>)
 80035c4:	79fb      	ldrb	r3, [r7, #7]
 80035c6:	f003 030f 	and.w	r3, r3, #15
 80035ca:	3b04      	subs	r3, #4
 80035cc:	0112      	lsls	r2, r2, #4
 80035ce:	b2d2      	uxtb	r2, r2
 80035d0:	440b      	add	r3, r1
 80035d2:	761a      	strb	r2, [r3, #24]
}
 80035d4:	bf00      	nop
 80035d6:	370c      	adds	r7, #12
 80035d8:	46bd      	mov	sp, r7
 80035da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035de:	4770      	bx	lr
 80035e0:	e000e100 	.word	0xe000e100
 80035e4:	e000ed00 	.word	0xe000ed00

080035e8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80035e8:	b580      	push	{r7, lr}
 80035ea:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80035ec:	4b05      	ldr	r3, [pc, #20]	; (8003604 <SysTick_Handler+0x1c>)
 80035ee:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80035f0:	f002 f8ca 	bl	8005788 <xTaskGetSchedulerState>
 80035f4:	4603      	mov	r3, r0
 80035f6:	2b01      	cmp	r3, #1
 80035f8:	d001      	beq.n	80035fe <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80035fa:	f003 f86d 	bl	80066d8 <xPortSysTickHandler>
  }
}
 80035fe:	bf00      	nop
 8003600:	bd80      	pop	{r7, pc}
 8003602:	bf00      	nop
 8003604:	e000e010 	.word	0xe000e010

08003608 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003608:	b580      	push	{r7, lr}
 800360a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800360c:	2100      	movs	r1, #0
 800360e:	f06f 0004 	mvn.w	r0, #4
 8003612:	f7ff ffbf 	bl	8003594 <__NVIC_SetPriority>
#endif
}
 8003616:	bf00      	nop
 8003618:	bd80      	pop	{r7, pc}
	...

0800361c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800361c:	b480      	push	{r7}
 800361e:	b083      	sub	sp, #12
 8003620:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003622:	f3ef 8305 	mrs	r3, IPSR
 8003626:	603b      	str	r3, [r7, #0]
  return(result);
 8003628:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800362a:	2b00      	cmp	r3, #0
 800362c:	d003      	beq.n	8003636 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800362e:	f06f 0305 	mvn.w	r3, #5
 8003632:	607b      	str	r3, [r7, #4]
 8003634:	e00c      	b.n	8003650 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003636:	4b0a      	ldr	r3, [pc, #40]	; (8003660 <osKernelInitialize+0x44>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d105      	bne.n	800364a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800363e:	4b08      	ldr	r3, [pc, #32]	; (8003660 <osKernelInitialize+0x44>)
 8003640:	2201      	movs	r2, #1
 8003642:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003644:	2300      	movs	r3, #0
 8003646:	607b      	str	r3, [r7, #4]
 8003648:	e002      	b.n	8003650 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800364a:	f04f 33ff 	mov.w	r3, #4294967295
 800364e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003650:	687b      	ldr	r3, [r7, #4]
}
 8003652:	4618      	mov	r0, r3
 8003654:	370c      	adds	r7, #12
 8003656:	46bd      	mov	sp, r7
 8003658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365c:	4770      	bx	lr
 800365e:	bf00      	nop
 8003660:	2000025c 	.word	0x2000025c

08003664 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003664:	b580      	push	{r7, lr}
 8003666:	b082      	sub	sp, #8
 8003668:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800366a:	f3ef 8305 	mrs	r3, IPSR
 800366e:	603b      	str	r3, [r7, #0]
  return(result);
 8003670:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003672:	2b00      	cmp	r3, #0
 8003674:	d003      	beq.n	800367e <osKernelStart+0x1a>
    stat = osErrorISR;
 8003676:	f06f 0305 	mvn.w	r3, #5
 800367a:	607b      	str	r3, [r7, #4]
 800367c:	e010      	b.n	80036a0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800367e:	4b0b      	ldr	r3, [pc, #44]	; (80036ac <osKernelStart+0x48>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	2b01      	cmp	r3, #1
 8003684:	d109      	bne.n	800369a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003686:	f7ff ffbf 	bl	8003608 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800368a:	4b08      	ldr	r3, [pc, #32]	; (80036ac <osKernelStart+0x48>)
 800368c:	2202      	movs	r2, #2
 800368e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003690:	f001 fc0e 	bl	8004eb0 <vTaskStartScheduler>
      stat = osOK;
 8003694:	2300      	movs	r3, #0
 8003696:	607b      	str	r3, [r7, #4]
 8003698:	e002      	b.n	80036a0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800369a:	f04f 33ff 	mov.w	r3, #4294967295
 800369e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80036a0:	687b      	ldr	r3, [r7, #4]
}
 80036a2:	4618      	mov	r0, r3
 80036a4:	3708      	adds	r7, #8
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd80      	pop	{r7, pc}
 80036aa:	bf00      	nop
 80036ac:	2000025c 	.word	0x2000025c

080036b0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b08e      	sub	sp, #56	; 0x38
 80036b4:	af04      	add	r7, sp, #16
 80036b6:	60f8      	str	r0, [r7, #12]
 80036b8:	60b9      	str	r1, [r7, #8]
 80036ba:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80036bc:	2300      	movs	r3, #0
 80036be:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80036c0:	f3ef 8305 	mrs	r3, IPSR
 80036c4:	617b      	str	r3, [r7, #20]
  return(result);
 80036c6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d17e      	bne.n	80037ca <osThreadNew+0x11a>
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d07b      	beq.n	80037ca <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80036d2:	2380      	movs	r3, #128	; 0x80
 80036d4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80036d6:	2318      	movs	r3, #24
 80036d8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80036da:	2300      	movs	r3, #0
 80036dc:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80036de:	f04f 33ff 	mov.w	r3, #4294967295
 80036e2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d045      	beq.n	8003776 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d002      	beq.n	80036f8 <osThreadNew+0x48>
        name = attr->name;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	699b      	ldr	r3, [r3, #24]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d002      	beq.n	8003706 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	699b      	ldr	r3, [r3, #24]
 8003704:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003706:	69fb      	ldr	r3, [r7, #28]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d008      	beq.n	800371e <osThreadNew+0x6e>
 800370c:	69fb      	ldr	r3, [r7, #28]
 800370e:	2b38      	cmp	r3, #56	; 0x38
 8003710:	d805      	bhi.n	800371e <osThreadNew+0x6e>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	f003 0301 	and.w	r3, r3, #1
 800371a:	2b00      	cmp	r3, #0
 800371c:	d001      	beq.n	8003722 <osThreadNew+0x72>
        return (NULL);
 800371e:	2300      	movs	r3, #0
 8003720:	e054      	b.n	80037cc <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	695b      	ldr	r3, [r3, #20]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d003      	beq.n	8003732 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	695b      	ldr	r3, [r3, #20]
 800372e:	089b      	lsrs	r3, r3, #2
 8003730:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	689b      	ldr	r3, [r3, #8]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d00e      	beq.n	8003758 <osThreadNew+0xa8>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	68db      	ldr	r3, [r3, #12]
 800373e:	2bbb      	cmp	r3, #187	; 0xbb
 8003740:	d90a      	bls.n	8003758 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003746:	2b00      	cmp	r3, #0
 8003748:	d006      	beq.n	8003758 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	695b      	ldr	r3, [r3, #20]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d002      	beq.n	8003758 <osThreadNew+0xa8>
        mem = 1;
 8003752:	2301      	movs	r3, #1
 8003754:	61bb      	str	r3, [r7, #24]
 8003756:	e010      	b.n	800377a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	689b      	ldr	r3, [r3, #8]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d10c      	bne.n	800377a <osThreadNew+0xca>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	68db      	ldr	r3, [r3, #12]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d108      	bne.n	800377a <osThreadNew+0xca>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	691b      	ldr	r3, [r3, #16]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d104      	bne.n	800377a <osThreadNew+0xca>
          mem = 0;
 8003770:	2300      	movs	r3, #0
 8003772:	61bb      	str	r3, [r7, #24]
 8003774:	e001      	b.n	800377a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8003776:	2300      	movs	r3, #0
 8003778:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800377a:	69bb      	ldr	r3, [r7, #24]
 800377c:	2b01      	cmp	r3, #1
 800377e:	d110      	bne.n	80037a2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003784:	687a      	ldr	r2, [r7, #4]
 8003786:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003788:	9202      	str	r2, [sp, #8]
 800378a:	9301      	str	r3, [sp, #4]
 800378c:	69fb      	ldr	r3, [r7, #28]
 800378e:	9300      	str	r3, [sp, #0]
 8003790:	68bb      	ldr	r3, [r7, #8]
 8003792:	6a3a      	ldr	r2, [r7, #32]
 8003794:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003796:	68f8      	ldr	r0, [r7, #12]
 8003798:	f001 f9d2 	bl	8004b40 <xTaskCreateStatic>
 800379c:	4603      	mov	r3, r0
 800379e:	613b      	str	r3, [r7, #16]
 80037a0:	e013      	b.n	80037ca <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80037a2:	69bb      	ldr	r3, [r7, #24]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d110      	bne.n	80037ca <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80037a8:	6a3b      	ldr	r3, [r7, #32]
 80037aa:	b29a      	uxth	r2, r3
 80037ac:	f107 0310 	add.w	r3, r7, #16
 80037b0:	9301      	str	r3, [sp, #4]
 80037b2:	69fb      	ldr	r3, [r7, #28]
 80037b4:	9300      	str	r3, [sp, #0]
 80037b6:	68bb      	ldr	r3, [r7, #8]
 80037b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80037ba:	68f8      	ldr	r0, [r7, #12]
 80037bc:	f001 fa1d 	bl	8004bfa <xTaskCreate>
 80037c0:	4603      	mov	r3, r0
 80037c2:	2b01      	cmp	r3, #1
 80037c4:	d001      	beq.n	80037ca <osThreadNew+0x11a>
            hTask = NULL;
 80037c6:	2300      	movs	r3, #0
 80037c8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80037ca:	693b      	ldr	r3, [r7, #16]
}
 80037cc:	4618      	mov	r0, r3
 80037ce:	3728      	adds	r7, #40	; 0x28
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bd80      	pop	{r7, pc}

080037d4 <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b084      	sub	sp, #16
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 80037dc:	6878      	ldr	r0, [r7, #4]
 80037de:	f002 fd99 	bl	8006314 <pvTimerGetTimerID>
 80037e2:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d005      	beq.n	80037f6 <TimerCallback+0x22>
    callb->func (callb->arg);
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	68fa      	ldr	r2, [r7, #12]
 80037f0:	6852      	ldr	r2, [r2, #4]
 80037f2:	4610      	mov	r0, r2
 80037f4:	4798      	blx	r3
  }
}
 80037f6:	bf00      	nop
 80037f8:	3710      	adds	r7, #16
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd80      	pop	{r7, pc}
	...

08003800 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 8003800:	b580      	push	{r7, lr}
 8003802:	b08c      	sub	sp, #48	; 0x30
 8003804:	af02      	add	r7, sp, #8
 8003806:	60f8      	str	r0, [r7, #12]
 8003808:	607a      	str	r2, [r7, #4]
 800380a:	603b      	str	r3, [r7, #0]
 800380c:	460b      	mov	r3, r1
 800380e:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 8003810:	2300      	movs	r3, #0
 8003812:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003814:	f3ef 8305 	mrs	r3, IPSR
 8003818:	613b      	str	r3, [r7, #16]
  return(result);
 800381a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 800381c:	2b00      	cmp	r3, #0
 800381e:	d163      	bne.n	80038e8 <osTimerNew+0xe8>
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d060      	beq.n	80038e8 <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 8003826:	2008      	movs	r0, #8
 8003828:	f002 ffe6 	bl	80067f8 <pvPortMalloc>
 800382c:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d059      	beq.n	80038e8 <osTimerNew+0xe8>
      callb->func = func;
 8003834:	697b      	ldr	r3, [r7, #20]
 8003836:	68fa      	ldr	r2, [r7, #12]
 8003838:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	687a      	ldr	r2, [r7, #4]
 800383e:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 8003840:	7afb      	ldrb	r3, [r7, #11]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d102      	bne.n	800384c <osTimerNew+0x4c>
        reload = pdFALSE;
 8003846:	2300      	movs	r3, #0
 8003848:	61fb      	str	r3, [r7, #28]
 800384a:	e001      	b.n	8003850 <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 800384c:	2301      	movs	r3, #1
 800384e:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 8003850:	f04f 33ff 	mov.w	r3, #4294967295
 8003854:	61bb      	str	r3, [r7, #24]
      name = NULL;
 8003856:	2300      	movs	r3, #0
 8003858:	627b      	str	r3, [r7, #36]	; 0x24

      if (attr != NULL) {
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d01c      	beq.n	800389a <osTimerNew+0x9a>
        if (attr->name != NULL) {
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d002      	beq.n	800386e <osTimerNew+0x6e>
          name = attr->name;
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	627b      	str	r3, [r7, #36]	; 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	689b      	ldr	r3, [r3, #8]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d006      	beq.n	8003884 <osTimerNew+0x84>
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	68db      	ldr	r3, [r3, #12]
 800387a:	2b2b      	cmp	r3, #43	; 0x2b
 800387c:	d902      	bls.n	8003884 <osTimerNew+0x84>
          mem = 1;
 800387e:	2301      	movs	r3, #1
 8003880:	61bb      	str	r3, [r7, #24]
 8003882:	e00c      	b.n	800389e <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	689b      	ldr	r3, [r3, #8]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d108      	bne.n	800389e <osTimerNew+0x9e>
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	68db      	ldr	r3, [r3, #12]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d104      	bne.n	800389e <osTimerNew+0x9e>
            mem = 0;
 8003894:	2300      	movs	r3, #0
 8003896:	61bb      	str	r3, [r7, #24]
 8003898:	e001      	b.n	800389e <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 800389a:	2300      	movs	r3, #0
 800389c:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800389e:	69bb      	ldr	r3, [r7, #24]
 80038a0:	2b01      	cmp	r3, #1
 80038a2:	d10c      	bne.n	80038be <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	689b      	ldr	r3, [r3, #8]
 80038a8:	9301      	str	r3, [sp, #4]
 80038aa:	4b12      	ldr	r3, [pc, #72]	; (80038f4 <osTimerNew+0xf4>)
 80038ac:	9300      	str	r3, [sp, #0]
 80038ae:	697b      	ldr	r3, [r7, #20]
 80038b0:	69fa      	ldr	r2, [r7, #28]
 80038b2:	2101      	movs	r1, #1
 80038b4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80038b6:	f002 f9ae 	bl	8005c16 <xTimerCreateStatic>
 80038ba:	6238      	str	r0, [r7, #32]
 80038bc:	e00b      	b.n	80038d6 <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 80038be:	69bb      	ldr	r3, [r7, #24]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d108      	bne.n	80038d6 <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 80038c4:	4b0b      	ldr	r3, [pc, #44]	; (80038f4 <osTimerNew+0xf4>)
 80038c6:	9300      	str	r3, [sp, #0]
 80038c8:	697b      	ldr	r3, [r7, #20]
 80038ca:	69fa      	ldr	r2, [r7, #28]
 80038cc:	2101      	movs	r1, #1
 80038ce:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80038d0:	f002 f980 	bl	8005bd4 <xTimerCreate>
 80038d4:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 80038d6:	6a3b      	ldr	r3, [r7, #32]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d105      	bne.n	80038e8 <osTimerNew+0xe8>
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d002      	beq.n	80038e8 <osTimerNew+0xe8>
        vPortFree (callb);
 80038e2:	6978      	ldr	r0, [r7, #20]
 80038e4:	f003 f854 	bl	8006990 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 80038e8:	6a3b      	ldr	r3, [r7, #32]
}
 80038ea:	4618      	mov	r0, r3
 80038ec:	3728      	adds	r7, #40	; 0x28
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}
 80038f2:	bf00      	nop
 80038f4:	080037d5 	.word	0x080037d5

080038f8 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b088      	sub	sp, #32
 80038fc:	af02      	add	r7, sp, #8
 80038fe:	6078      	str	r0, [r7, #4]
 8003900:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003906:	f3ef 8305 	mrs	r3, IPSR
 800390a:	60fb      	str	r3, [r7, #12]
  return(result);
 800390c:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 800390e:	2b00      	cmp	r3, #0
 8003910:	d003      	beq.n	800391a <osTimerStart+0x22>
    stat = osErrorISR;
 8003912:	f06f 0305 	mvn.w	r3, #5
 8003916:	617b      	str	r3, [r7, #20]
 8003918:	e017      	b.n	800394a <osTimerStart+0x52>
  }
  else if (hTimer == NULL) {
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d103      	bne.n	8003928 <osTimerStart+0x30>
    stat = osErrorParameter;
 8003920:	f06f 0303 	mvn.w	r3, #3
 8003924:	617b      	str	r3, [r7, #20]
 8003926:	e010      	b.n	800394a <osTimerStart+0x52>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 8003928:	2300      	movs	r3, #0
 800392a:	9300      	str	r3, [sp, #0]
 800392c:	2300      	movs	r3, #0
 800392e:	683a      	ldr	r2, [r7, #0]
 8003930:	2104      	movs	r1, #4
 8003932:	6938      	ldr	r0, [r7, #16]
 8003934:	f002 f9e8 	bl	8005d08 <xTimerGenericCommand>
 8003938:	4603      	mov	r3, r0
 800393a:	2b01      	cmp	r3, #1
 800393c:	d102      	bne.n	8003944 <osTimerStart+0x4c>
      stat = osOK;
 800393e:	2300      	movs	r3, #0
 8003940:	617b      	str	r3, [r7, #20]
 8003942:	e002      	b.n	800394a <osTimerStart+0x52>
    } else {
      stat = osErrorResource;
 8003944:	f06f 0302 	mvn.w	r3, #2
 8003948:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800394a:	697b      	ldr	r3, [r7, #20]
}
 800394c:	4618      	mov	r0, r3
 800394e:	3718      	adds	r7, #24
 8003950:	46bd      	mov	sp, r7
 8003952:	bd80      	pop	{r7, pc}

08003954 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8003954:	b580      	push	{r7, lr}
 8003956:	b088      	sub	sp, #32
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800395c:	2300      	movs	r3, #0
 800395e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003960:	f3ef 8305 	mrs	r3, IPSR
 8003964:	60bb      	str	r3, [r7, #8]
  return(result);
 8003966:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8003968:	2b00      	cmp	r3, #0
 800396a:	d174      	bne.n	8003a56 <osMutexNew+0x102>
    if (attr != NULL) {
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d003      	beq.n	800397a <osMutexNew+0x26>
      type = attr->attr_bits;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	61bb      	str	r3, [r7, #24]
 8003978:	e001      	b.n	800397e <osMutexNew+0x2a>
    } else {
      type = 0U;
 800397a:	2300      	movs	r3, #0
 800397c:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800397e:	69bb      	ldr	r3, [r7, #24]
 8003980:	f003 0301 	and.w	r3, r3, #1
 8003984:	2b00      	cmp	r3, #0
 8003986:	d002      	beq.n	800398e <osMutexNew+0x3a>
      rmtx = 1U;
 8003988:	2301      	movs	r3, #1
 800398a:	617b      	str	r3, [r7, #20]
 800398c:	e001      	b.n	8003992 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800398e:	2300      	movs	r3, #0
 8003990:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8003992:	69bb      	ldr	r3, [r7, #24]
 8003994:	f003 0308 	and.w	r3, r3, #8
 8003998:	2b00      	cmp	r3, #0
 800399a:	d15c      	bne.n	8003a56 <osMutexNew+0x102>
      mem = -1;
 800399c:	f04f 33ff 	mov.w	r3, #4294967295
 80039a0:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d015      	beq.n	80039d4 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	689b      	ldr	r3, [r3, #8]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d006      	beq.n	80039be <osMutexNew+0x6a>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	68db      	ldr	r3, [r3, #12]
 80039b4:	2b4f      	cmp	r3, #79	; 0x4f
 80039b6:	d902      	bls.n	80039be <osMutexNew+0x6a>
          mem = 1;
 80039b8:	2301      	movs	r3, #1
 80039ba:	613b      	str	r3, [r7, #16]
 80039bc:	e00c      	b.n	80039d8 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	689b      	ldr	r3, [r3, #8]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d108      	bne.n	80039d8 <osMutexNew+0x84>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	68db      	ldr	r3, [r3, #12]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d104      	bne.n	80039d8 <osMutexNew+0x84>
            mem = 0;
 80039ce:	2300      	movs	r3, #0
 80039d0:	613b      	str	r3, [r7, #16]
 80039d2:	e001      	b.n	80039d8 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 80039d4:	2300      	movs	r3, #0
 80039d6:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 80039d8:	693b      	ldr	r3, [r7, #16]
 80039da:	2b01      	cmp	r3, #1
 80039dc:	d112      	bne.n	8003a04 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 80039de:	697b      	ldr	r3, [r7, #20]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d007      	beq.n	80039f4 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	689b      	ldr	r3, [r3, #8]
 80039e8:	4619      	mov	r1, r3
 80039ea:	2004      	movs	r0, #4
 80039ec:	f000 fb17 	bl	800401e <xQueueCreateMutexStatic>
 80039f0:	61f8      	str	r0, [r7, #28]
 80039f2:	e016      	b.n	8003a22 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	4619      	mov	r1, r3
 80039fa:	2001      	movs	r0, #1
 80039fc:	f000 fb0f 	bl	800401e <xQueueCreateMutexStatic>
 8003a00:	61f8      	str	r0, [r7, #28]
 8003a02:	e00e      	b.n	8003a22 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8003a04:	693b      	ldr	r3, [r7, #16]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d10b      	bne.n	8003a22 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8003a0a:	697b      	ldr	r3, [r7, #20]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d004      	beq.n	8003a1a <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8003a10:	2004      	movs	r0, #4
 8003a12:	f000 faec 	bl	8003fee <xQueueCreateMutex>
 8003a16:	61f8      	str	r0, [r7, #28]
 8003a18:	e003      	b.n	8003a22 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8003a1a:	2001      	movs	r0, #1
 8003a1c:	f000 fae7 	bl	8003fee <xQueueCreateMutex>
 8003a20:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8003a22:	69fb      	ldr	r3, [r7, #28]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d00c      	beq.n	8003a42 <osMutexNew+0xee>
        if (attr != NULL) {
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d003      	beq.n	8003a36 <osMutexNew+0xe2>
          name = attr->name;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	60fb      	str	r3, [r7, #12]
 8003a34:	e001      	b.n	8003a3a <osMutexNew+0xe6>
        } else {
          name = NULL;
 8003a36:	2300      	movs	r3, #0
 8003a38:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8003a3a:	68f9      	ldr	r1, [r7, #12]
 8003a3c:	69f8      	ldr	r0, [r7, #28]
 8003a3e:	f001 f821 	bl	8004a84 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8003a42:	69fb      	ldr	r3, [r7, #28]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d006      	beq.n	8003a56 <osMutexNew+0x102>
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d003      	beq.n	8003a56 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8003a4e:	69fb      	ldr	r3, [r7, #28]
 8003a50:	f043 0301 	orr.w	r3, r3, #1
 8003a54:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8003a56:	69fb      	ldr	r3, [r7, #28]
}
 8003a58:	4618      	mov	r0, r3
 8003a5a:	3720      	adds	r7, #32
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	bd80      	pop	{r7, pc}

08003a60 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b086      	sub	sp, #24
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
 8003a68:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	f023 0301 	bic.w	r3, r3, #1
 8003a70:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	f003 0301 	and.w	r3, r3, #1
 8003a78:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003a7e:	f3ef 8305 	mrs	r3, IPSR
 8003a82:	60bb      	str	r3, [r7, #8]
  return(result);
 8003a84:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d003      	beq.n	8003a92 <osMutexAcquire+0x32>
    stat = osErrorISR;
 8003a8a:	f06f 0305 	mvn.w	r3, #5
 8003a8e:	617b      	str	r3, [r7, #20]
 8003a90:	e02c      	b.n	8003aec <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d103      	bne.n	8003aa0 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8003a98:	f06f 0303 	mvn.w	r3, #3
 8003a9c:	617b      	str	r3, [r7, #20]
 8003a9e:	e025      	b.n	8003aec <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d011      	beq.n	8003aca <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8003aa6:	6839      	ldr	r1, [r7, #0]
 8003aa8:	6938      	ldr	r0, [r7, #16]
 8003aaa:	f000 fb07 	bl	80040bc <xQueueTakeMutexRecursive>
 8003aae:	4603      	mov	r3, r0
 8003ab0:	2b01      	cmp	r3, #1
 8003ab2:	d01b      	beq.n	8003aec <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d003      	beq.n	8003ac2 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8003aba:	f06f 0301 	mvn.w	r3, #1
 8003abe:	617b      	str	r3, [r7, #20]
 8003ac0:	e014      	b.n	8003aec <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8003ac2:	f06f 0302 	mvn.w	r3, #2
 8003ac6:	617b      	str	r3, [r7, #20]
 8003ac8:	e010      	b.n	8003aec <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8003aca:	6839      	ldr	r1, [r7, #0]
 8003acc:	6938      	ldr	r0, [r7, #16]
 8003ace:	f000 fda5 	bl	800461c <xQueueSemaphoreTake>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	2b01      	cmp	r3, #1
 8003ad6:	d009      	beq.n	8003aec <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d003      	beq.n	8003ae6 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8003ade:	f06f 0301 	mvn.w	r3, #1
 8003ae2:	617b      	str	r3, [r7, #20]
 8003ae4:	e002      	b.n	8003aec <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8003ae6:	f06f 0302 	mvn.w	r3, #2
 8003aea:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8003aec:	697b      	ldr	r3, [r7, #20]
}
 8003aee:	4618      	mov	r0, r3
 8003af0:	3718      	adds	r7, #24
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bd80      	pop	{r7, pc}

08003af6 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8003af6:	b580      	push	{r7, lr}
 8003af8:	b086      	sub	sp, #24
 8003afa:	af00      	add	r7, sp, #0
 8003afc:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	f023 0301 	bic.w	r3, r3, #1
 8003b04:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	f003 0301 	and.w	r3, r3, #1
 8003b0c:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8003b0e:	2300      	movs	r3, #0
 8003b10:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003b12:	f3ef 8305 	mrs	r3, IPSR
 8003b16:	60bb      	str	r3, [r7, #8]
  return(result);
 8003b18:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d003      	beq.n	8003b26 <osMutexRelease+0x30>
    stat = osErrorISR;
 8003b1e:	f06f 0305 	mvn.w	r3, #5
 8003b22:	617b      	str	r3, [r7, #20]
 8003b24:	e01f      	b.n	8003b66 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8003b26:	693b      	ldr	r3, [r7, #16]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d103      	bne.n	8003b34 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8003b2c:	f06f 0303 	mvn.w	r3, #3
 8003b30:	617b      	str	r3, [r7, #20]
 8003b32:	e018      	b.n	8003b66 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d009      	beq.n	8003b4e <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8003b3a:	6938      	ldr	r0, [r7, #16]
 8003b3c:	f000 fa8a 	bl	8004054 <xQueueGiveMutexRecursive>
 8003b40:	4603      	mov	r3, r0
 8003b42:	2b01      	cmp	r3, #1
 8003b44:	d00f      	beq.n	8003b66 <osMutexRelease+0x70>
        stat = osErrorResource;
 8003b46:	f06f 0302 	mvn.w	r3, #2
 8003b4a:	617b      	str	r3, [r7, #20]
 8003b4c:	e00b      	b.n	8003b66 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8003b4e:	2300      	movs	r3, #0
 8003b50:	2200      	movs	r2, #0
 8003b52:	2100      	movs	r1, #0
 8003b54:	6938      	ldr	r0, [r7, #16]
 8003b56:	f000 fae7 	bl	8004128 <xQueueGenericSend>
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	2b01      	cmp	r3, #1
 8003b5e:	d002      	beq.n	8003b66 <osMutexRelease+0x70>
        stat = osErrorResource;
 8003b60:	f06f 0302 	mvn.w	r3, #2
 8003b64:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8003b66:	697b      	ldr	r3, [r7, #20]
}
 8003b68:	4618      	mov	r0, r3
 8003b6a:	3718      	adds	r7, #24
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bd80      	pop	{r7, pc}

08003b70 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003b70:	b480      	push	{r7}
 8003b72:	b085      	sub	sp, #20
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	60f8      	str	r0, [r7, #12]
 8003b78:	60b9      	str	r1, [r7, #8]
 8003b7a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	4a07      	ldr	r2, [pc, #28]	; (8003b9c <vApplicationGetIdleTaskMemory+0x2c>)
 8003b80:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003b82:	68bb      	ldr	r3, [r7, #8]
 8003b84:	4a06      	ldr	r2, [pc, #24]	; (8003ba0 <vApplicationGetIdleTaskMemory+0x30>)
 8003b86:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2280      	movs	r2, #128	; 0x80
 8003b8c:	601a      	str	r2, [r3, #0]
}
 8003b8e:	bf00      	nop
 8003b90:	3714      	adds	r7, #20
 8003b92:	46bd      	mov	sp, r7
 8003b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b98:	4770      	bx	lr
 8003b9a:	bf00      	nop
 8003b9c:	20000260 	.word	0x20000260
 8003ba0:	2000031c 	.word	0x2000031c

08003ba4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003ba4:	b480      	push	{r7}
 8003ba6:	b085      	sub	sp, #20
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	60f8      	str	r0, [r7, #12]
 8003bac:	60b9      	str	r1, [r7, #8]
 8003bae:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	4a07      	ldr	r2, [pc, #28]	; (8003bd0 <vApplicationGetTimerTaskMemory+0x2c>)
 8003bb4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003bb6:	68bb      	ldr	r3, [r7, #8]
 8003bb8:	4a06      	ldr	r2, [pc, #24]	; (8003bd4 <vApplicationGetTimerTaskMemory+0x30>)
 8003bba:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003bc2:	601a      	str	r2, [r3, #0]
}
 8003bc4:	bf00      	nop
 8003bc6:	3714      	adds	r7, #20
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bce:	4770      	bx	lr
 8003bd0:	2000051c 	.word	0x2000051c
 8003bd4:	200005d8 	.word	0x200005d8

08003bd8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003bd8:	b480      	push	{r7}
 8003bda:	b083      	sub	sp, #12
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	f103 0208 	add.w	r2, r3, #8
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	f04f 32ff 	mov.w	r2, #4294967295
 8003bf0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	f103 0208 	add.w	r2, r3, #8
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	f103 0208 	add.w	r2, r3, #8
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2200      	movs	r2, #0
 8003c0a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003c0c:	bf00      	nop
 8003c0e:	370c      	adds	r7, #12
 8003c10:	46bd      	mov	sp, r7
 8003c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c16:	4770      	bx	lr

08003c18 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003c18:	b480      	push	{r7}
 8003c1a:	b083      	sub	sp, #12
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2200      	movs	r2, #0
 8003c24:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003c26:	bf00      	nop
 8003c28:	370c      	adds	r7, #12
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c30:	4770      	bx	lr

08003c32 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003c32:	b480      	push	{r7}
 8003c34:	b085      	sub	sp, #20
 8003c36:	af00      	add	r7, sp, #0
 8003c38:	6078      	str	r0, [r7, #4]
 8003c3a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	68fa      	ldr	r2, [r7, #12]
 8003c46:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	689a      	ldr	r2, [r3, #8]
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	689b      	ldr	r3, [r3, #8]
 8003c54:	683a      	ldr	r2, [r7, #0]
 8003c56:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	683a      	ldr	r2, [r7, #0]
 8003c5c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	687a      	ldr	r2, [r7, #4]
 8003c62:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	1c5a      	adds	r2, r3, #1
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	601a      	str	r2, [r3, #0]
}
 8003c6e:	bf00      	nop
 8003c70:	3714      	adds	r7, #20
 8003c72:	46bd      	mov	sp, r7
 8003c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c78:	4770      	bx	lr

08003c7a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003c7a:	b480      	push	{r7}
 8003c7c:	b085      	sub	sp, #20
 8003c7e:	af00      	add	r7, sp, #0
 8003c80:	6078      	str	r0, [r7, #4]
 8003c82:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c90:	d103      	bne.n	8003c9a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	691b      	ldr	r3, [r3, #16]
 8003c96:	60fb      	str	r3, [r7, #12]
 8003c98:	e00c      	b.n	8003cb4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	3308      	adds	r3, #8
 8003c9e:	60fb      	str	r3, [r7, #12]
 8003ca0:	e002      	b.n	8003ca8 <vListInsert+0x2e>
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	60fb      	str	r3, [r7, #12]
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	68ba      	ldr	r2, [r7, #8]
 8003cb0:	429a      	cmp	r2, r3
 8003cb2:	d2f6      	bcs.n	8003ca2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	685a      	ldr	r2, [r3, #4]
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	683a      	ldr	r2, [r7, #0]
 8003cc2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	68fa      	ldr	r2, [r7, #12]
 8003cc8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	683a      	ldr	r2, [r7, #0]
 8003cce:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	687a      	ldr	r2, [r7, #4]
 8003cd4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	1c5a      	adds	r2, r3, #1
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	601a      	str	r2, [r3, #0]
}
 8003ce0:	bf00      	nop
 8003ce2:	3714      	adds	r7, #20
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cea:	4770      	bx	lr

08003cec <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003cec:	b480      	push	{r7}
 8003cee:	b085      	sub	sp, #20
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	691b      	ldr	r3, [r3, #16]
 8003cf8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	687a      	ldr	r2, [r7, #4]
 8003d00:	6892      	ldr	r2, [r2, #8]
 8003d02:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	689b      	ldr	r3, [r3, #8]
 8003d08:	687a      	ldr	r2, [r7, #4]
 8003d0a:	6852      	ldr	r2, [r2, #4]
 8003d0c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	687a      	ldr	r2, [r7, #4]
 8003d14:	429a      	cmp	r2, r3
 8003d16:	d103      	bne.n	8003d20 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	689a      	ldr	r2, [r3, #8]
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2200      	movs	r2, #0
 8003d24:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	1e5a      	subs	r2, r3, #1
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
}
 8003d34:	4618      	mov	r0, r3
 8003d36:	3714      	adds	r7, #20
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3e:	4770      	bx	lr

08003d40 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b084      	sub	sp, #16
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
 8003d48:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d10a      	bne.n	8003d6a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003d54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d58:	f383 8811 	msr	BASEPRI, r3
 8003d5c:	f3bf 8f6f 	isb	sy
 8003d60:	f3bf 8f4f 	dsb	sy
 8003d64:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003d66:	bf00      	nop
 8003d68:	e7fe      	b.n	8003d68 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003d6a:	f002 fc23 	bl	80065b4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681a      	ldr	r2, [r3, #0]
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d76:	68f9      	ldr	r1, [r7, #12]
 8003d78:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003d7a:	fb01 f303 	mul.w	r3, r1, r3
 8003d7e:	441a      	add	r2, r3
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	2200      	movs	r2, #0
 8003d88:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681a      	ldr	r2, [r3, #0]
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681a      	ldr	r2, [r3, #0]
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d9a:	3b01      	subs	r3, #1
 8003d9c:	68f9      	ldr	r1, [r7, #12]
 8003d9e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003da0:	fb01 f303 	mul.w	r3, r1, r3
 8003da4:	441a      	add	r2, r3
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	22ff      	movs	r2, #255	; 0xff
 8003dae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	22ff      	movs	r2, #255	; 0xff
 8003db6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d114      	bne.n	8003dea <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	691b      	ldr	r3, [r3, #16]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d01a      	beq.n	8003dfe <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	3310      	adds	r3, #16
 8003dcc:	4618      	mov	r0, r3
 8003dce:	f001 fb09 	bl	80053e4 <xTaskRemoveFromEventList>
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d012      	beq.n	8003dfe <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003dd8:	4b0c      	ldr	r3, [pc, #48]	; (8003e0c <xQueueGenericReset+0xcc>)
 8003dda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003dde:	601a      	str	r2, [r3, #0]
 8003de0:	f3bf 8f4f 	dsb	sy
 8003de4:	f3bf 8f6f 	isb	sy
 8003de8:	e009      	b.n	8003dfe <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	3310      	adds	r3, #16
 8003dee:	4618      	mov	r0, r3
 8003df0:	f7ff fef2 	bl	8003bd8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	3324      	adds	r3, #36	; 0x24
 8003df8:	4618      	mov	r0, r3
 8003dfa:	f7ff feed 	bl	8003bd8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003dfe:	f002 fc09 	bl	8006614 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003e02:	2301      	movs	r3, #1
}
 8003e04:	4618      	mov	r0, r3
 8003e06:	3710      	adds	r7, #16
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	bd80      	pop	{r7, pc}
 8003e0c:	e000ed04 	.word	0xe000ed04

08003e10 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b08e      	sub	sp, #56	; 0x38
 8003e14:	af02      	add	r7, sp, #8
 8003e16:	60f8      	str	r0, [r7, #12]
 8003e18:	60b9      	str	r1, [r7, #8]
 8003e1a:	607a      	str	r2, [r7, #4]
 8003e1c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d10a      	bne.n	8003e3a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8003e24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e28:	f383 8811 	msr	BASEPRI, r3
 8003e2c:	f3bf 8f6f 	isb	sy
 8003e30:	f3bf 8f4f 	dsb	sy
 8003e34:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003e36:	bf00      	nop
 8003e38:	e7fe      	b.n	8003e38 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d10a      	bne.n	8003e56 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8003e40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e44:	f383 8811 	msr	BASEPRI, r3
 8003e48:	f3bf 8f6f 	isb	sy
 8003e4c:	f3bf 8f4f 	dsb	sy
 8003e50:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003e52:	bf00      	nop
 8003e54:	e7fe      	b.n	8003e54 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d002      	beq.n	8003e62 <xQueueGenericCreateStatic+0x52>
 8003e5c:	68bb      	ldr	r3, [r7, #8]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d001      	beq.n	8003e66 <xQueueGenericCreateStatic+0x56>
 8003e62:	2301      	movs	r3, #1
 8003e64:	e000      	b.n	8003e68 <xQueueGenericCreateStatic+0x58>
 8003e66:	2300      	movs	r3, #0
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d10a      	bne.n	8003e82 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8003e6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e70:	f383 8811 	msr	BASEPRI, r3
 8003e74:	f3bf 8f6f 	isb	sy
 8003e78:	f3bf 8f4f 	dsb	sy
 8003e7c:	623b      	str	r3, [r7, #32]
}
 8003e7e:	bf00      	nop
 8003e80:	e7fe      	b.n	8003e80 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d102      	bne.n	8003e8e <xQueueGenericCreateStatic+0x7e>
 8003e88:	68bb      	ldr	r3, [r7, #8]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d101      	bne.n	8003e92 <xQueueGenericCreateStatic+0x82>
 8003e8e:	2301      	movs	r3, #1
 8003e90:	e000      	b.n	8003e94 <xQueueGenericCreateStatic+0x84>
 8003e92:	2300      	movs	r3, #0
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d10a      	bne.n	8003eae <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8003e98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e9c:	f383 8811 	msr	BASEPRI, r3
 8003ea0:	f3bf 8f6f 	isb	sy
 8003ea4:	f3bf 8f4f 	dsb	sy
 8003ea8:	61fb      	str	r3, [r7, #28]
}
 8003eaa:	bf00      	nop
 8003eac:	e7fe      	b.n	8003eac <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003eae:	2350      	movs	r3, #80	; 0x50
 8003eb0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003eb2:	697b      	ldr	r3, [r7, #20]
 8003eb4:	2b50      	cmp	r3, #80	; 0x50
 8003eb6:	d00a      	beq.n	8003ece <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8003eb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ebc:	f383 8811 	msr	BASEPRI, r3
 8003ec0:	f3bf 8f6f 	isb	sy
 8003ec4:	f3bf 8f4f 	dsb	sy
 8003ec8:	61bb      	str	r3, [r7, #24]
}
 8003eca:	bf00      	nop
 8003ecc:	e7fe      	b.n	8003ecc <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003ece:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003ed4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d00d      	beq.n	8003ef6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003eda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003edc:	2201      	movs	r2, #1
 8003ede:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003ee2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003ee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ee8:	9300      	str	r3, [sp, #0]
 8003eea:	4613      	mov	r3, r2
 8003eec:	687a      	ldr	r2, [r7, #4]
 8003eee:	68b9      	ldr	r1, [r7, #8]
 8003ef0:	68f8      	ldr	r0, [r7, #12]
 8003ef2:	f000 f83f 	bl	8003f74 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003ef6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003ef8:	4618      	mov	r0, r3
 8003efa:	3730      	adds	r7, #48	; 0x30
 8003efc:	46bd      	mov	sp, r7
 8003efe:	bd80      	pop	{r7, pc}

08003f00 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b08a      	sub	sp, #40	; 0x28
 8003f04:	af02      	add	r7, sp, #8
 8003f06:	60f8      	str	r0, [r7, #12]
 8003f08:	60b9      	str	r1, [r7, #8]
 8003f0a:	4613      	mov	r3, r2
 8003f0c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d10a      	bne.n	8003f2a <xQueueGenericCreate+0x2a>
	__asm volatile
 8003f14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f18:	f383 8811 	msr	BASEPRI, r3
 8003f1c:	f3bf 8f6f 	isb	sy
 8003f20:	f3bf 8f4f 	dsb	sy
 8003f24:	613b      	str	r3, [r7, #16]
}
 8003f26:	bf00      	nop
 8003f28:	e7fe      	b.n	8003f28 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	68ba      	ldr	r2, [r7, #8]
 8003f2e:	fb02 f303 	mul.w	r3, r2, r3
 8003f32:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003f34:	69fb      	ldr	r3, [r7, #28]
 8003f36:	3350      	adds	r3, #80	; 0x50
 8003f38:	4618      	mov	r0, r3
 8003f3a:	f002 fc5d 	bl	80067f8 <pvPortMalloc>
 8003f3e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003f40:	69bb      	ldr	r3, [r7, #24]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d011      	beq.n	8003f6a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003f46:	69bb      	ldr	r3, [r7, #24]
 8003f48:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003f4a:	697b      	ldr	r3, [r7, #20]
 8003f4c:	3350      	adds	r3, #80	; 0x50
 8003f4e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003f50:	69bb      	ldr	r3, [r7, #24]
 8003f52:	2200      	movs	r2, #0
 8003f54:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003f58:	79fa      	ldrb	r2, [r7, #7]
 8003f5a:	69bb      	ldr	r3, [r7, #24]
 8003f5c:	9300      	str	r3, [sp, #0]
 8003f5e:	4613      	mov	r3, r2
 8003f60:	697a      	ldr	r2, [r7, #20]
 8003f62:	68b9      	ldr	r1, [r7, #8]
 8003f64:	68f8      	ldr	r0, [r7, #12]
 8003f66:	f000 f805 	bl	8003f74 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003f6a:	69bb      	ldr	r3, [r7, #24]
	}
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	3720      	adds	r7, #32
 8003f70:	46bd      	mov	sp, r7
 8003f72:	bd80      	pop	{r7, pc}

08003f74 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b084      	sub	sp, #16
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	60f8      	str	r0, [r7, #12]
 8003f7c:	60b9      	str	r1, [r7, #8]
 8003f7e:	607a      	str	r2, [r7, #4]
 8003f80:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003f82:	68bb      	ldr	r3, [r7, #8]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d103      	bne.n	8003f90 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003f88:	69bb      	ldr	r3, [r7, #24]
 8003f8a:	69ba      	ldr	r2, [r7, #24]
 8003f8c:	601a      	str	r2, [r3, #0]
 8003f8e:	e002      	b.n	8003f96 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003f90:	69bb      	ldr	r3, [r7, #24]
 8003f92:	687a      	ldr	r2, [r7, #4]
 8003f94:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003f96:	69bb      	ldr	r3, [r7, #24]
 8003f98:	68fa      	ldr	r2, [r7, #12]
 8003f9a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003f9c:	69bb      	ldr	r3, [r7, #24]
 8003f9e:	68ba      	ldr	r2, [r7, #8]
 8003fa0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003fa2:	2101      	movs	r1, #1
 8003fa4:	69b8      	ldr	r0, [r7, #24]
 8003fa6:	f7ff fecb 	bl	8003d40 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003faa:	69bb      	ldr	r3, [r7, #24]
 8003fac:	78fa      	ldrb	r2, [r7, #3]
 8003fae:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003fb2:	bf00      	nop
 8003fb4:	3710      	adds	r7, #16
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bd80      	pop	{r7, pc}

08003fba <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8003fba:	b580      	push	{r7, lr}
 8003fbc:	b082      	sub	sp, #8
 8003fbe:	af00      	add	r7, sp, #0
 8003fc0:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d00e      	beq.n	8003fe6 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2200      	movs	r2, #0
 8003fcc:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8003fda:	2300      	movs	r3, #0
 8003fdc:	2200      	movs	r2, #0
 8003fde:	2100      	movs	r1, #0
 8003fe0:	6878      	ldr	r0, [r7, #4]
 8003fe2:	f000 f8a1 	bl	8004128 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8003fe6:	bf00      	nop
 8003fe8:	3708      	adds	r7, #8
 8003fea:	46bd      	mov	sp, r7
 8003fec:	bd80      	pop	{r7, pc}

08003fee <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8003fee:	b580      	push	{r7, lr}
 8003ff0:	b086      	sub	sp, #24
 8003ff2:	af00      	add	r7, sp, #0
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	617b      	str	r3, [r7, #20]
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8004000:	79fb      	ldrb	r3, [r7, #7]
 8004002:	461a      	mov	r2, r3
 8004004:	6939      	ldr	r1, [r7, #16]
 8004006:	6978      	ldr	r0, [r7, #20]
 8004008:	f7ff ff7a 	bl	8003f00 <xQueueGenericCreate>
 800400c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800400e:	68f8      	ldr	r0, [r7, #12]
 8004010:	f7ff ffd3 	bl	8003fba <prvInitialiseMutex>

		return xNewQueue;
 8004014:	68fb      	ldr	r3, [r7, #12]
	}
 8004016:	4618      	mov	r0, r3
 8004018:	3718      	adds	r7, #24
 800401a:	46bd      	mov	sp, r7
 800401c:	bd80      	pop	{r7, pc}

0800401e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800401e:	b580      	push	{r7, lr}
 8004020:	b088      	sub	sp, #32
 8004022:	af02      	add	r7, sp, #8
 8004024:	4603      	mov	r3, r0
 8004026:	6039      	str	r1, [r7, #0]
 8004028:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800402a:	2301      	movs	r3, #1
 800402c:	617b      	str	r3, [r7, #20]
 800402e:	2300      	movs	r3, #0
 8004030:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8004032:	79fb      	ldrb	r3, [r7, #7]
 8004034:	9300      	str	r3, [sp, #0]
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	2200      	movs	r2, #0
 800403a:	6939      	ldr	r1, [r7, #16]
 800403c:	6978      	ldr	r0, [r7, #20]
 800403e:	f7ff fee7 	bl	8003e10 <xQueueGenericCreateStatic>
 8004042:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8004044:	68f8      	ldr	r0, [r7, #12]
 8004046:	f7ff ffb8 	bl	8003fba <prvInitialiseMutex>

		return xNewQueue;
 800404a:	68fb      	ldr	r3, [r7, #12]
	}
 800404c:	4618      	mov	r0, r3
 800404e:	3718      	adds	r7, #24
 8004050:	46bd      	mov	sp, r7
 8004052:	bd80      	pop	{r7, pc}

08004054 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8004054:	b590      	push	{r4, r7, lr}
 8004056:	b087      	sub	sp, #28
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8004060:	693b      	ldr	r3, [r7, #16]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d10a      	bne.n	800407c <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 8004066:	f04f 0350 	mov.w	r3, #80	; 0x50
 800406a:	f383 8811 	msr	BASEPRI, r3
 800406e:	f3bf 8f6f 	isb	sy
 8004072:	f3bf 8f4f 	dsb	sy
 8004076:	60fb      	str	r3, [r7, #12]
}
 8004078:	bf00      	nop
 800407a:	e7fe      	b.n	800407a <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800407c:	693b      	ldr	r3, [r7, #16]
 800407e:	689c      	ldr	r4, [r3, #8]
 8004080:	f001 fb72 	bl	8005768 <xTaskGetCurrentTaskHandle>
 8004084:	4603      	mov	r3, r0
 8004086:	429c      	cmp	r4, r3
 8004088:	d111      	bne.n	80040ae <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800408a:	693b      	ldr	r3, [r7, #16]
 800408c:	68db      	ldr	r3, [r3, #12]
 800408e:	1e5a      	subs	r2, r3, #1
 8004090:	693b      	ldr	r3, [r7, #16]
 8004092:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8004094:	693b      	ldr	r3, [r7, #16]
 8004096:	68db      	ldr	r3, [r3, #12]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d105      	bne.n	80040a8 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800409c:	2300      	movs	r3, #0
 800409e:	2200      	movs	r2, #0
 80040a0:	2100      	movs	r1, #0
 80040a2:	6938      	ldr	r0, [r7, #16]
 80040a4:	f000 f840 	bl	8004128 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 80040a8:	2301      	movs	r3, #1
 80040aa:	617b      	str	r3, [r7, #20]
 80040ac:	e001      	b.n	80040b2 <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 80040ae:	2300      	movs	r3, #0
 80040b0:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 80040b2:	697b      	ldr	r3, [r7, #20]
	}
 80040b4:	4618      	mov	r0, r3
 80040b6:	371c      	adds	r7, #28
 80040b8:	46bd      	mov	sp, r7
 80040ba:	bd90      	pop	{r4, r7, pc}

080040bc <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 80040bc:	b590      	push	{r4, r7, lr}
 80040be:	b087      	sub	sp, #28
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
 80040c4:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d10a      	bne.n	80040e6 <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 80040d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040d4:	f383 8811 	msr	BASEPRI, r3
 80040d8:	f3bf 8f6f 	isb	sy
 80040dc:	f3bf 8f4f 	dsb	sy
 80040e0:	60fb      	str	r3, [r7, #12]
}
 80040e2:	bf00      	nop
 80040e4:	e7fe      	b.n	80040e4 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80040e6:	693b      	ldr	r3, [r7, #16]
 80040e8:	689c      	ldr	r4, [r3, #8]
 80040ea:	f001 fb3d 	bl	8005768 <xTaskGetCurrentTaskHandle>
 80040ee:	4603      	mov	r3, r0
 80040f0:	429c      	cmp	r4, r3
 80040f2:	d107      	bne.n	8004104 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80040f4:	693b      	ldr	r3, [r7, #16]
 80040f6:	68db      	ldr	r3, [r3, #12]
 80040f8:	1c5a      	adds	r2, r3, #1
 80040fa:	693b      	ldr	r3, [r7, #16]
 80040fc:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 80040fe:	2301      	movs	r3, #1
 8004100:	617b      	str	r3, [r7, #20]
 8004102:	e00c      	b.n	800411e <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8004104:	6839      	ldr	r1, [r7, #0]
 8004106:	6938      	ldr	r0, [r7, #16]
 8004108:	f000 fa88 	bl	800461c <xQueueSemaphoreTake>
 800410c:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800410e:	697b      	ldr	r3, [r7, #20]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d004      	beq.n	800411e <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8004114:	693b      	ldr	r3, [r7, #16]
 8004116:	68db      	ldr	r3, [r3, #12]
 8004118:	1c5a      	adds	r2, r3, #1
 800411a:	693b      	ldr	r3, [r7, #16]
 800411c:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800411e:	697b      	ldr	r3, [r7, #20]
	}
 8004120:	4618      	mov	r0, r3
 8004122:	371c      	adds	r7, #28
 8004124:	46bd      	mov	sp, r7
 8004126:	bd90      	pop	{r4, r7, pc}

08004128 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b08e      	sub	sp, #56	; 0x38
 800412c:	af00      	add	r7, sp, #0
 800412e:	60f8      	str	r0, [r7, #12]
 8004130:	60b9      	str	r1, [r7, #8]
 8004132:	607a      	str	r2, [r7, #4]
 8004134:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004136:	2300      	movs	r3, #0
 8004138:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800413e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004140:	2b00      	cmp	r3, #0
 8004142:	d10a      	bne.n	800415a <xQueueGenericSend+0x32>
	__asm volatile
 8004144:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004148:	f383 8811 	msr	BASEPRI, r3
 800414c:	f3bf 8f6f 	isb	sy
 8004150:	f3bf 8f4f 	dsb	sy
 8004154:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004156:	bf00      	nop
 8004158:	e7fe      	b.n	8004158 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800415a:	68bb      	ldr	r3, [r7, #8]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d103      	bne.n	8004168 <xQueueGenericSend+0x40>
 8004160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004164:	2b00      	cmp	r3, #0
 8004166:	d101      	bne.n	800416c <xQueueGenericSend+0x44>
 8004168:	2301      	movs	r3, #1
 800416a:	e000      	b.n	800416e <xQueueGenericSend+0x46>
 800416c:	2300      	movs	r3, #0
 800416e:	2b00      	cmp	r3, #0
 8004170:	d10a      	bne.n	8004188 <xQueueGenericSend+0x60>
	__asm volatile
 8004172:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004176:	f383 8811 	msr	BASEPRI, r3
 800417a:	f3bf 8f6f 	isb	sy
 800417e:	f3bf 8f4f 	dsb	sy
 8004182:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004184:	bf00      	nop
 8004186:	e7fe      	b.n	8004186 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	2b02      	cmp	r3, #2
 800418c:	d103      	bne.n	8004196 <xQueueGenericSend+0x6e>
 800418e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004190:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004192:	2b01      	cmp	r3, #1
 8004194:	d101      	bne.n	800419a <xQueueGenericSend+0x72>
 8004196:	2301      	movs	r3, #1
 8004198:	e000      	b.n	800419c <xQueueGenericSend+0x74>
 800419a:	2300      	movs	r3, #0
 800419c:	2b00      	cmp	r3, #0
 800419e:	d10a      	bne.n	80041b6 <xQueueGenericSend+0x8e>
	__asm volatile
 80041a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041a4:	f383 8811 	msr	BASEPRI, r3
 80041a8:	f3bf 8f6f 	isb	sy
 80041ac:	f3bf 8f4f 	dsb	sy
 80041b0:	623b      	str	r3, [r7, #32]
}
 80041b2:	bf00      	nop
 80041b4:	e7fe      	b.n	80041b4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80041b6:	f001 fae7 	bl	8005788 <xTaskGetSchedulerState>
 80041ba:	4603      	mov	r3, r0
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d102      	bne.n	80041c6 <xQueueGenericSend+0x9e>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d101      	bne.n	80041ca <xQueueGenericSend+0xa2>
 80041c6:	2301      	movs	r3, #1
 80041c8:	e000      	b.n	80041cc <xQueueGenericSend+0xa4>
 80041ca:	2300      	movs	r3, #0
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d10a      	bne.n	80041e6 <xQueueGenericSend+0xbe>
	__asm volatile
 80041d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041d4:	f383 8811 	msr	BASEPRI, r3
 80041d8:	f3bf 8f6f 	isb	sy
 80041dc:	f3bf 8f4f 	dsb	sy
 80041e0:	61fb      	str	r3, [r7, #28]
}
 80041e2:	bf00      	nop
 80041e4:	e7fe      	b.n	80041e4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80041e6:	f002 f9e5 	bl	80065b4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80041ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80041ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041f2:	429a      	cmp	r2, r3
 80041f4:	d302      	bcc.n	80041fc <xQueueGenericSend+0xd4>
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	2b02      	cmp	r3, #2
 80041fa:	d129      	bne.n	8004250 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80041fc:	683a      	ldr	r2, [r7, #0]
 80041fe:	68b9      	ldr	r1, [r7, #8]
 8004200:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004202:	f000 fb2f 	bl	8004864 <prvCopyDataToQueue>
 8004206:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800420a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800420c:	2b00      	cmp	r3, #0
 800420e:	d010      	beq.n	8004232 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004210:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004212:	3324      	adds	r3, #36	; 0x24
 8004214:	4618      	mov	r0, r3
 8004216:	f001 f8e5 	bl	80053e4 <xTaskRemoveFromEventList>
 800421a:	4603      	mov	r3, r0
 800421c:	2b00      	cmp	r3, #0
 800421e:	d013      	beq.n	8004248 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004220:	4b3f      	ldr	r3, [pc, #252]	; (8004320 <xQueueGenericSend+0x1f8>)
 8004222:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004226:	601a      	str	r2, [r3, #0]
 8004228:	f3bf 8f4f 	dsb	sy
 800422c:	f3bf 8f6f 	isb	sy
 8004230:	e00a      	b.n	8004248 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004232:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004234:	2b00      	cmp	r3, #0
 8004236:	d007      	beq.n	8004248 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004238:	4b39      	ldr	r3, [pc, #228]	; (8004320 <xQueueGenericSend+0x1f8>)
 800423a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800423e:	601a      	str	r2, [r3, #0]
 8004240:	f3bf 8f4f 	dsb	sy
 8004244:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004248:	f002 f9e4 	bl	8006614 <vPortExitCritical>
				return pdPASS;
 800424c:	2301      	movs	r3, #1
 800424e:	e063      	b.n	8004318 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d103      	bne.n	800425e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004256:	f002 f9dd 	bl	8006614 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800425a:	2300      	movs	r3, #0
 800425c:	e05c      	b.n	8004318 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800425e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004260:	2b00      	cmp	r3, #0
 8004262:	d106      	bne.n	8004272 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004264:	f107 0314 	add.w	r3, r7, #20
 8004268:	4618      	mov	r0, r3
 800426a:	f001 f91f 	bl	80054ac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800426e:	2301      	movs	r3, #1
 8004270:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004272:	f002 f9cf 	bl	8006614 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004276:	f000 fe8b 	bl	8004f90 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800427a:	f002 f99b 	bl	80065b4 <vPortEnterCritical>
 800427e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004280:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004284:	b25b      	sxtb	r3, r3
 8004286:	f1b3 3fff 	cmp.w	r3, #4294967295
 800428a:	d103      	bne.n	8004294 <xQueueGenericSend+0x16c>
 800428c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800428e:	2200      	movs	r2, #0
 8004290:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004296:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800429a:	b25b      	sxtb	r3, r3
 800429c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042a0:	d103      	bne.n	80042aa <xQueueGenericSend+0x182>
 80042a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042a4:	2200      	movs	r2, #0
 80042a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80042aa:	f002 f9b3 	bl	8006614 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80042ae:	1d3a      	adds	r2, r7, #4
 80042b0:	f107 0314 	add.w	r3, r7, #20
 80042b4:	4611      	mov	r1, r2
 80042b6:	4618      	mov	r0, r3
 80042b8:	f001 f90e 	bl	80054d8 <xTaskCheckForTimeOut>
 80042bc:	4603      	mov	r3, r0
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d124      	bne.n	800430c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80042c2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80042c4:	f000 fbc6 	bl	8004a54 <prvIsQueueFull>
 80042c8:	4603      	mov	r3, r0
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d018      	beq.n	8004300 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80042ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042d0:	3310      	adds	r3, #16
 80042d2:	687a      	ldr	r2, [r7, #4]
 80042d4:	4611      	mov	r1, r2
 80042d6:	4618      	mov	r0, r3
 80042d8:	f001 f834 	bl	8005344 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80042dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80042de:	f000 fb51 	bl	8004984 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80042e2:	f000 fe63 	bl	8004fac <xTaskResumeAll>
 80042e6:	4603      	mov	r3, r0
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	f47f af7c 	bne.w	80041e6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80042ee:	4b0c      	ldr	r3, [pc, #48]	; (8004320 <xQueueGenericSend+0x1f8>)
 80042f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042f4:	601a      	str	r2, [r3, #0]
 80042f6:	f3bf 8f4f 	dsb	sy
 80042fa:	f3bf 8f6f 	isb	sy
 80042fe:	e772      	b.n	80041e6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004300:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004302:	f000 fb3f 	bl	8004984 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004306:	f000 fe51 	bl	8004fac <xTaskResumeAll>
 800430a:	e76c      	b.n	80041e6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800430c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800430e:	f000 fb39 	bl	8004984 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004312:	f000 fe4b 	bl	8004fac <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004316:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004318:	4618      	mov	r0, r3
 800431a:	3738      	adds	r7, #56	; 0x38
 800431c:	46bd      	mov	sp, r7
 800431e:	bd80      	pop	{r7, pc}
 8004320:	e000ed04 	.word	0xe000ed04

08004324 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b090      	sub	sp, #64	; 0x40
 8004328:	af00      	add	r7, sp, #0
 800432a:	60f8      	str	r0, [r7, #12]
 800432c:	60b9      	str	r1, [r7, #8]
 800432e:	607a      	str	r2, [r7, #4]
 8004330:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8004336:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004338:	2b00      	cmp	r3, #0
 800433a:	d10a      	bne.n	8004352 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800433c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004340:	f383 8811 	msr	BASEPRI, r3
 8004344:	f3bf 8f6f 	isb	sy
 8004348:	f3bf 8f4f 	dsb	sy
 800434c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800434e:	bf00      	nop
 8004350:	e7fe      	b.n	8004350 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004352:	68bb      	ldr	r3, [r7, #8]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d103      	bne.n	8004360 <xQueueGenericSendFromISR+0x3c>
 8004358:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800435a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800435c:	2b00      	cmp	r3, #0
 800435e:	d101      	bne.n	8004364 <xQueueGenericSendFromISR+0x40>
 8004360:	2301      	movs	r3, #1
 8004362:	e000      	b.n	8004366 <xQueueGenericSendFromISR+0x42>
 8004364:	2300      	movs	r3, #0
 8004366:	2b00      	cmp	r3, #0
 8004368:	d10a      	bne.n	8004380 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800436a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800436e:	f383 8811 	msr	BASEPRI, r3
 8004372:	f3bf 8f6f 	isb	sy
 8004376:	f3bf 8f4f 	dsb	sy
 800437a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800437c:	bf00      	nop
 800437e:	e7fe      	b.n	800437e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	2b02      	cmp	r3, #2
 8004384:	d103      	bne.n	800438e <xQueueGenericSendFromISR+0x6a>
 8004386:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004388:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800438a:	2b01      	cmp	r3, #1
 800438c:	d101      	bne.n	8004392 <xQueueGenericSendFromISR+0x6e>
 800438e:	2301      	movs	r3, #1
 8004390:	e000      	b.n	8004394 <xQueueGenericSendFromISR+0x70>
 8004392:	2300      	movs	r3, #0
 8004394:	2b00      	cmp	r3, #0
 8004396:	d10a      	bne.n	80043ae <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004398:	f04f 0350 	mov.w	r3, #80	; 0x50
 800439c:	f383 8811 	msr	BASEPRI, r3
 80043a0:	f3bf 8f6f 	isb	sy
 80043a4:	f3bf 8f4f 	dsb	sy
 80043a8:	623b      	str	r3, [r7, #32]
}
 80043aa:	bf00      	nop
 80043ac:	e7fe      	b.n	80043ac <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80043ae:	f002 f9e3 	bl	8006778 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80043b2:	f3ef 8211 	mrs	r2, BASEPRI
 80043b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043ba:	f383 8811 	msr	BASEPRI, r3
 80043be:	f3bf 8f6f 	isb	sy
 80043c2:	f3bf 8f4f 	dsb	sy
 80043c6:	61fa      	str	r2, [r7, #28]
 80043c8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80043ca:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80043cc:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80043ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80043d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043d6:	429a      	cmp	r2, r3
 80043d8:	d302      	bcc.n	80043e0 <xQueueGenericSendFromISR+0xbc>
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	2b02      	cmp	r3, #2
 80043de:	d12f      	bne.n	8004440 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80043e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043e2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80043e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80043ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043ee:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80043f0:	683a      	ldr	r2, [r7, #0]
 80043f2:	68b9      	ldr	r1, [r7, #8]
 80043f4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80043f6:	f000 fa35 	bl	8004864 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80043fa:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80043fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004402:	d112      	bne.n	800442a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004404:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004408:	2b00      	cmp	r3, #0
 800440a:	d016      	beq.n	800443a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800440c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800440e:	3324      	adds	r3, #36	; 0x24
 8004410:	4618      	mov	r0, r3
 8004412:	f000 ffe7 	bl	80053e4 <xTaskRemoveFromEventList>
 8004416:	4603      	mov	r3, r0
 8004418:	2b00      	cmp	r3, #0
 800441a:	d00e      	beq.n	800443a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d00b      	beq.n	800443a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2201      	movs	r2, #1
 8004426:	601a      	str	r2, [r3, #0]
 8004428:	e007      	b.n	800443a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800442a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800442e:	3301      	adds	r3, #1
 8004430:	b2db      	uxtb	r3, r3
 8004432:	b25a      	sxtb	r2, r3
 8004434:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004436:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800443a:	2301      	movs	r3, #1
 800443c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800443e:	e001      	b.n	8004444 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004440:	2300      	movs	r3, #0
 8004442:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004444:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004446:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004448:	697b      	ldr	r3, [r7, #20]
 800444a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800444e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004450:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004452:	4618      	mov	r0, r3
 8004454:	3740      	adds	r7, #64	; 0x40
 8004456:	46bd      	mov	sp, r7
 8004458:	bd80      	pop	{r7, pc}
	...

0800445c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b08c      	sub	sp, #48	; 0x30
 8004460:	af00      	add	r7, sp, #0
 8004462:	60f8      	str	r0, [r7, #12]
 8004464:	60b9      	str	r1, [r7, #8]
 8004466:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004468:	2300      	movs	r3, #0
 800446a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004472:	2b00      	cmp	r3, #0
 8004474:	d10a      	bne.n	800448c <xQueueReceive+0x30>
	__asm volatile
 8004476:	f04f 0350 	mov.w	r3, #80	; 0x50
 800447a:	f383 8811 	msr	BASEPRI, r3
 800447e:	f3bf 8f6f 	isb	sy
 8004482:	f3bf 8f4f 	dsb	sy
 8004486:	623b      	str	r3, [r7, #32]
}
 8004488:	bf00      	nop
 800448a:	e7fe      	b.n	800448a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d103      	bne.n	800449a <xQueueReceive+0x3e>
 8004492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004496:	2b00      	cmp	r3, #0
 8004498:	d101      	bne.n	800449e <xQueueReceive+0x42>
 800449a:	2301      	movs	r3, #1
 800449c:	e000      	b.n	80044a0 <xQueueReceive+0x44>
 800449e:	2300      	movs	r3, #0
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d10a      	bne.n	80044ba <xQueueReceive+0x5e>
	__asm volatile
 80044a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044a8:	f383 8811 	msr	BASEPRI, r3
 80044ac:	f3bf 8f6f 	isb	sy
 80044b0:	f3bf 8f4f 	dsb	sy
 80044b4:	61fb      	str	r3, [r7, #28]
}
 80044b6:	bf00      	nop
 80044b8:	e7fe      	b.n	80044b8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80044ba:	f001 f965 	bl	8005788 <xTaskGetSchedulerState>
 80044be:	4603      	mov	r3, r0
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d102      	bne.n	80044ca <xQueueReceive+0x6e>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d101      	bne.n	80044ce <xQueueReceive+0x72>
 80044ca:	2301      	movs	r3, #1
 80044cc:	e000      	b.n	80044d0 <xQueueReceive+0x74>
 80044ce:	2300      	movs	r3, #0
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d10a      	bne.n	80044ea <xQueueReceive+0x8e>
	__asm volatile
 80044d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044d8:	f383 8811 	msr	BASEPRI, r3
 80044dc:	f3bf 8f6f 	isb	sy
 80044e0:	f3bf 8f4f 	dsb	sy
 80044e4:	61bb      	str	r3, [r7, #24]
}
 80044e6:	bf00      	nop
 80044e8:	e7fe      	b.n	80044e8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80044ea:	f002 f863 	bl	80065b4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80044ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044f2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80044f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d01f      	beq.n	800453a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80044fa:	68b9      	ldr	r1, [r7, #8]
 80044fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80044fe:	f000 fa1b 	bl	8004938 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004504:	1e5a      	subs	r2, r3, #1
 8004506:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004508:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800450a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800450c:	691b      	ldr	r3, [r3, #16]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d00f      	beq.n	8004532 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004514:	3310      	adds	r3, #16
 8004516:	4618      	mov	r0, r3
 8004518:	f000 ff64 	bl	80053e4 <xTaskRemoveFromEventList>
 800451c:	4603      	mov	r3, r0
 800451e:	2b00      	cmp	r3, #0
 8004520:	d007      	beq.n	8004532 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004522:	4b3d      	ldr	r3, [pc, #244]	; (8004618 <xQueueReceive+0x1bc>)
 8004524:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004528:	601a      	str	r2, [r3, #0]
 800452a:	f3bf 8f4f 	dsb	sy
 800452e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004532:	f002 f86f 	bl	8006614 <vPortExitCritical>
				return pdPASS;
 8004536:	2301      	movs	r3, #1
 8004538:	e069      	b.n	800460e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d103      	bne.n	8004548 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004540:	f002 f868 	bl	8006614 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004544:	2300      	movs	r3, #0
 8004546:	e062      	b.n	800460e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800454a:	2b00      	cmp	r3, #0
 800454c:	d106      	bne.n	800455c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800454e:	f107 0310 	add.w	r3, r7, #16
 8004552:	4618      	mov	r0, r3
 8004554:	f000 ffaa 	bl	80054ac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004558:	2301      	movs	r3, #1
 800455a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800455c:	f002 f85a 	bl	8006614 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004560:	f000 fd16 	bl	8004f90 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004564:	f002 f826 	bl	80065b4 <vPortEnterCritical>
 8004568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800456a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800456e:	b25b      	sxtb	r3, r3
 8004570:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004574:	d103      	bne.n	800457e <xQueueReceive+0x122>
 8004576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004578:	2200      	movs	r2, #0
 800457a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800457e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004580:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004584:	b25b      	sxtb	r3, r3
 8004586:	f1b3 3fff 	cmp.w	r3, #4294967295
 800458a:	d103      	bne.n	8004594 <xQueueReceive+0x138>
 800458c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800458e:	2200      	movs	r2, #0
 8004590:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004594:	f002 f83e 	bl	8006614 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004598:	1d3a      	adds	r2, r7, #4
 800459a:	f107 0310 	add.w	r3, r7, #16
 800459e:	4611      	mov	r1, r2
 80045a0:	4618      	mov	r0, r3
 80045a2:	f000 ff99 	bl	80054d8 <xTaskCheckForTimeOut>
 80045a6:	4603      	mov	r3, r0
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d123      	bne.n	80045f4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80045ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80045ae:	f000 fa3b 	bl	8004a28 <prvIsQueueEmpty>
 80045b2:	4603      	mov	r3, r0
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d017      	beq.n	80045e8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80045b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045ba:	3324      	adds	r3, #36	; 0x24
 80045bc:	687a      	ldr	r2, [r7, #4]
 80045be:	4611      	mov	r1, r2
 80045c0:	4618      	mov	r0, r3
 80045c2:	f000 febf 	bl	8005344 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80045c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80045c8:	f000 f9dc 	bl	8004984 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80045cc:	f000 fcee 	bl	8004fac <xTaskResumeAll>
 80045d0:	4603      	mov	r3, r0
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d189      	bne.n	80044ea <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80045d6:	4b10      	ldr	r3, [pc, #64]	; (8004618 <xQueueReceive+0x1bc>)
 80045d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045dc:	601a      	str	r2, [r3, #0]
 80045de:	f3bf 8f4f 	dsb	sy
 80045e2:	f3bf 8f6f 	isb	sy
 80045e6:	e780      	b.n	80044ea <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80045e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80045ea:	f000 f9cb 	bl	8004984 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80045ee:	f000 fcdd 	bl	8004fac <xTaskResumeAll>
 80045f2:	e77a      	b.n	80044ea <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80045f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80045f6:	f000 f9c5 	bl	8004984 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80045fa:	f000 fcd7 	bl	8004fac <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80045fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004600:	f000 fa12 	bl	8004a28 <prvIsQueueEmpty>
 8004604:	4603      	mov	r3, r0
 8004606:	2b00      	cmp	r3, #0
 8004608:	f43f af6f 	beq.w	80044ea <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800460c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800460e:	4618      	mov	r0, r3
 8004610:	3730      	adds	r7, #48	; 0x30
 8004612:	46bd      	mov	sp, r7
 8004614:	bd80      	pop	{r7, pc}
 8004616:	bf00      	nop
 8004618:	e000ed04 	.word	0xe000ed04

0800461c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b08e      	sub	sp, #56	; 0x38
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
 8004624:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8004626:	2300      	movs	r3, #0
 8004628:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800462e:	2300      	movs	r3, #0
 8004630:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004632:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004634:	2b00      	cmp	r3, #0
 8004636:	d10a      	bne.n	800464e <xQueueSemaphoreTake+0x32>
	__asm volatile
 8004638:	f04f 0350 	mov.w	r3, #80	; 0x50
 800463c:	f383 8811 	msr	BASEPRI, r3
 8004640:	f3bf 8f6f 	isb	sy
 8004644:	f3bf 8f4f 	dsb	sy
 8004648:	623b      	str	r3, [r7, #32]
}
 800464a:	bf00      	nop
 800464c:	e7fe      	b.n	800464c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800464e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004652:	2b00      	cmp	r3, #0
 8004654:	d00a      	beq.n	800466c <xQueueSemaphoreTake+0x50>
	__asm volatile
 8004656:	f04f 0350 	mov.w	r3, #80	; 0x50
 800465a:	f383 8811 	msr	BASEPRI, r3
 800465e:	f3bf 8f6f 	isb	sy
 8004662:	f3bf 8f4f 	dsb	sy
 8004666:	61fb      	str	r3, [r7, #28]
}
 8004668:	bf00      	nop
 800466a:	e7fe      	b.n	800466a <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800466c:	f001 f88c 	bl	8005788 <xTaskGetSchedulerState>
 8004670:	4603      	mov	r3, r0
 8004672:	2b00      	cmp	r3, #0
 8004674:	d102      	bne.n	800467c <xQueueSemaphoreTake+0x60>
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d101      	bne.n	8004680 <xQueueSemaphoreTake+0x64>
 800467c:	2301      	movs	r3, #1
 800467e:	e000      	b.n	8004682 <xQueueSemaphoreTake+0x66>
 8004680:	2300      	movs	r3, #0
 8004682:	2b00      	cmp	r3, #0
 8004684:	d10a      	bne.n	800469c <xQueueSemaphoreTake+0x80>
	__asm volatile
 8004686:	f04f 0350 	mov.w	r3, #80	; 0x50
 800468a:	f383 8811 	msr	BASEPRI, r3
 800468e:	f3bf 8f6f 	isb	sy
 8004692:	f3bf 8f4f 	dsb	sy
 8004696:	61bb      	str	r3, [r7, #24]
}
 8004698:	bf00      	nop
 800469a:	e7fe      	b.n	800469a <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800469c:	f001 ff8a 	bl	80065b4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80046a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046a4:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80046a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d024      	beq.n	80046f6 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80046ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046ae:	1e5a      	subs	r2, r3, #1
 80046b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046b2:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80046b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d104      	bne.n	80046c6 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80046bc:	f001 f9da 	bl	8005a74 <pvTaskIncrementMutexHeldCount>
 80046c0:	4602      	mov	r2, r0
 80046c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046c4:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80046c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046c8:	691b      	ldr	r3, [r3, #16]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d00f      	beq.n	80046ee <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80046ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046d0:	3310      	adds	r3, #16
 80046d2:	4618      	mov	r0, r3
 80046d4:	f000 fe86 	bl	80053e4 <xTaskRemoveFromEventList>
 80046d8:	4603      	mov	r3, r0
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d007      	beq.n	80046ee <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80046de:	4b54      	ldr	r3, [pc, #336]	; (8004830 <xQueueSemaphoreTake+0x214>)
 80046e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046e4:	601a      	str	r2, [r3, #0]
 80046e6:	f3bf 8f4f 	dsb	sy
 80046ea:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80046ee:	f001 ff91 	bl	8006614 <vPortExitCritical>
				return pdPASS;
 80046f2:	2301      	movs	r3, #1
 80046f4:	e097      	b.n	8004826 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d111      	bne.n	8004720 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80046fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d00a      	beq.n	8004718 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8004702:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004706:	f383 8811 	msr	BASEPRI, r3
 800470a:	f3bf 8f6f 	isb	sy
 800470e:	f3bf 8f4f 	dsb	sy
 8004712:	617b      	str	r3, [r7, #20]
}
 8004714:	bf00      	nop
 8004716:	e7fe      	b.n	8004716 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8004718:	f001 ff7c 	bl	8006614 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800471c:	2300      	movs	r3, #0
 800471e:	e082      	b.n	8004826 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004720:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004722:	2b00      	cmp	r3, #0
 8004724:	d106      	bne.n	8004734 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004726:	f107 030c 	add.w	r3, r7, #12
 800472a:	4618      	mov	r0, r3
 800472c:	f000 febe 	bl	80054ac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004730:	2301      	movs	r3, #1
 8004732:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004734:	f001 ff6e 	bl	8006614 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004738:	f000 fc2a 	bl	8004f90 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800473c:	f001 ff3a 	bl	80065b4 <vPortEnterCritical>
 8004740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004742:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004746:	b25b      	sxtb	r3, r3
 8004748:	f1b3 3fff 	cmp.w	r3, #4294967295
 800474c:	d103      	bne.n	8004756 <xQueueSemaphoreTake+0x13a>
 800474e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004750:	2200      	movs	r2, #0
 8004752:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004758:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800475c:	b25b      	sxtb	r3, r3
 800475e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004762:	d103      	bne.n	800476c <xQueueSemaphoreTake+0x150>
 8004764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004766:	2200      	movs	r2, #0
 8004768:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800476c:	f001 ff52 	bl	8006614 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004770:	463a      	mov	r2, r7
 8004772:	f107 030c 	add.w	r3, r7, #12
 8004776:	4611      	mov	r1, r2
 8004778:	4618      	mov	r0, r3
 800477a:	f000 fead 	bl	80054d8 <xTaskCheckForTimeOut>
 800477e:	4603      	mov	r3, r0
 8004780:	2b00      	cmp	r3, #0
 8004782:	d132      	bne.n	80047ea <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004784:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004786:	f000 f94f 	bl	8004a28 <prvIsQueueEmpty>
 800478a:	4603      	mov	r3, r0
 800478c:	2b00      	cmp	r3, #0
 800478e:	d026      	beq.n	80047de <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d109      	bne.n	80047ac <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8004798:	f001 ff0c 	bl	80065b4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800479c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800479e:	689b      	ldr	r3, [r3, #8]
 80047a0:	4618      	mov	r0, r3
 80047a2:	f001 f80f 	bl	80057c4 <xTaskPriorityInherit>
 80047a6:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80047a8:	f001 ff34 	bl	8006614 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80047ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047ae:	3324      	adds	r3, #36	; 0x24
 80047b0:	683a      	ldr	r2, [r7, #0]
 80047b2:	4611      	mov	r1, r2
 80047b4:	4618      	mov	r0, r3
 80047b6:	f000 fdc5 	bl	8005344 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80047ba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80047bc:	f000 f8e2 	bl	8004984 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80047c0:	f000 fbf4 	bl	8004fac <xTaskResumeAll>
 80047c4:	4603      	mov	r3, r0
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	f47f af68 	bne.w	800469c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80047cc:	4b18      	ldr	r3, [pc, #96]	; (8004830 <xQueueSemaphoreTake+0x214>)
 80047ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047d2:	601a      	str	r2, [r3, #0]
 80047d4:	f3bf 8f4f 	dsb	sy
 80047d8:	f3bf 8f6f 	isb	sy
 80047dc:	e75e      	b.n	800469c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80047de:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80047e0:	f000 f8d0 	bl	8004984 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80047e4:	f000 fbe2 	bl	8004fac <xTaskResumeAll>
 80047e8:	e758      	b.n	800469c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80047ea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80047ec:	f000 f8ca 	bl	8004984 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80047f0:	f000 fbdc 	bl	8004fac <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80047f4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80047f6:	f000 f917 	bl	8004a28 <prvIsQueueEmpty>
 80047fa:	4603      	mov	r3, r0
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	f43f af4d 	beq.w	800469c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8004802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004804:	2b00      	cmp	r3, #0
 8004806:	d00d      	beq.n	8004824 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8004808:	f001 fed4 	bl	80065b4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800480c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800480e:	f000 f811 	bl	8004834 <prvGetDisinheritPriorityAfterTimeout>
 8004812:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8004814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004816:	689b      	ldr	r3, [r3, #8]
 8004818:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800481a:	4618      	mov	r0, r3
 800481c:	f001 f8a8 	bl	8005970 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8004820:	f001 fef8 	bl	8006614 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004824:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004826:	4618      	mov	r0, r3
 8004828:	3738      	adds	r7, #56	; 0x38
 800482a:	46bd      	mov	sp, r7
 800482c:	bd80      	pop	{r7, pc}
 800482e:	bf00      	nop
 8004830:	e000ed04 	.word	0xe000ed04

08004834 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8004834:	b480      	push	{r7}
 8004836:	b085      	sub	sp, #20
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004840:	2b00      	cmp	r3, #0
 8004842:	d006      	beq.n	8004852 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800484e:	60fb      	str	r3, [r7, #12]
 8004850:	e001      	b.n	8004856 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8004852:	2300      	movs	r3, #0
 8004854:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8004856:	68fb      	ldr	r3, [r7, #12]
	}
 8004858:	4618      	mov	r0, r3
 800485a:	3714      	adds	r7, #20
 800485c:	46bd      	mov	sp, r7
 800485e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004862:	4770      	bx	lr

08004864 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b086      	sub	sp, #24
 8004868:	af00      	add	r7, sp, #0
 800486a:	60f8      	str	r0, [r7, #12]
 800486c:	60b9      	str	r1, [r7, #8]
 800486e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004870:	2300      	movs	r3, #0
 8004872:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004878:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800487e:	2b00      	cmp	r3, #0
 8004880:	d10d      	bne.n	800489e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d14d      	bne.n	8004926 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	689b      	ldr	r3, [r3, #8]
 800488e:	4618      	mov	r0, r3
 8004890:	f001 f800 	bl	8005894 <xTaskPriorityDisinherit>
 8004894:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	2200      	movs	r2, #0
 800489a:	609a      	str	r2, [r3, #8]
 800489c:	e043      	b.n	8004926 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d119      	bne.n	80048d8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	6858      	ldr	r0, [r3, #4]
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ac:	461a      	mov	r2, r3
 80048ae:	68b9      	ldr	r1, [r7, #8]
 80048b0:	f002 faaf 	bl	8006e12 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	685a      	ldr	r2, [r3, #4]
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048bc:	441a      	add	r2, r3
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	685a      	ldr	r2, [r3, #4]
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	689b      	ldr	r3, [r3, #8]
 80048ca:	429a      	cmp	r2, r3
 80048cc:	d32b      	bcc.n	8004926 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681a      	ldr	r2, [r3, #0]
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	605a      	str	r2, [r3, #4]
 80048d6:	e026      	b.n	8004926 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	68d8      	ldr	r0, [r3, #12]
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048e0:	461a      	mov	r2, r3
 80048e2:	68b9      	ldr	r1, [r7, #8]
 80048e4:	f002 fa95 	bl	8006e12 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	68da      	ldr	r2, [r3, #12]
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048f0:	425b      	negs	r3, r3
 80048f2:	441a      	add	r2, r3
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	68da      	ldr	r2, [r3, #12]
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	429a      	cmp	r2, r3
 8004902:	d207      	bcs.n	8004914 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	689a      	ldr	r2, [r3, #8]
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800490c:	425b      	negs	r3, r3
 800490e:	441a      	add	r2, r3
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2b02      	cmp	r3, #2
 8004918:	d105      	bne.n	8004926 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800491a:	693b      	ldr	r3, [r7, #16]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d002      	beq.n	8004926 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004920:	693b      	ldr	r3, [r7, #16]
 8004922:	3b01      	subs	r3, #1
 8004924:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004926:	693b      	ldr	r3, [r7, #16]
 8004928:	1c5a      	adds	r2, r3, #1
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800492e:	697b      	ldr	r3, [r7, #20]
}
 8004930:	4618      	mov	r0, r3
 8004932:	3718      	adds	r7, #24
 8004934:	46bd      	mov	sp, r7
 8004936:	bd80      	pop	{r7, pc}

08004938 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b082      	sub	sp, #8
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
 8004940:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004946:	2b00      	cmp	r3, #0
 8004948:	d018      	beq.n	800497c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	68da      	ldr	r2, [r3, #12]
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004952:	441a      	add	r2, r3
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	68da      	ldr	r2, [r3, #12]
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	689b      	ldr	r3, [r3, #8]
 8004960:	429a      	cmp	r2, r3
 8004962:	d303      	bcc.n	800496c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681a      	ldr	r2, [r3, #0]
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	68d9      	ldr	r1, [r3, #12]
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004974:	461a      	mov	r2, r3
 8004976:	6838      	ldr	r0, [r7, #0]
 8004978:	f002 fa4b 	bl	8006e12 <memcpy>
	}
}
 800497c:	bf00      	nop
 800497e:	3708      	adds	r7, #8
 8004980:	46bd      	mov	sp, r7
 8004982:	bd80      	pop	{r7, pc}

08004984 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b084      	sub	sp, #16
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800498c:	f001 fe12 	bl	80065b4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004996:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004998:	e011      	b.n	80049be <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d012      	beq.n	80049c8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	3324      	adds	r3, #36	; 0x24
 80049a6:	4618      	mov	r0, r3
 80049a8:	f000 fd1c 	bl	80053e4 <xTaskRemoveFromEventList>
 80049ac:	4603      	mov	r3, r0
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d001      	beq.n	80049b6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80049b2:	f000 fdf3 	bl	800559c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80049b6:	7bfb      	ldrb	r3, [r7, #15]
 80049b8:	3b01      	subs	r3, #1
 80049ba:	b2db      	uxtb	r3, r3
 80049bc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80049be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	dce9      	bgt.n	800499a <prvUnlockQueue+0x16>
 80049c6:	e000      	b.n	80049ca <prvUnlockQueue+0x46>
					break;
 80049c8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	22ff      	movs	r2, #255	; 0xff
 80049ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80049d2:	f001 fe1f 	bl	8006614 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80049d6:	f001 fded 	bl	80065b4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80049e0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80049e2:	e011      	b.n	8004a08 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	691b      	ldr	r3, [r3, #16]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d012      	beq.n	8004a12 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	3310      	adds	r3, #16
 80049f0:	4618      	mov	r0, r3
 80049f2:	f000 fcf7 	bl	80053e4 <xTaskRemoveFromEventList>
 80049f6:	4603      	mov	r3, r0
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d001      	beq.n	8004a00 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80049fc:	f000 fdce 	bl	800559c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004a00:	7bbb      	ldrb	r3, [r7, #14]
 8004a02:	3b01      	subs	r3, #1
 8004a04:	b2db      	uxtb	r3, r3
 8004a06:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004a08:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	dce9      	bgt.n	80049e4 <prvUnlockQueue+0x60>
 8004a10:	e000      	b.n	8004a14 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004a12:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	22ff      	movs	r2, #255	; 0xff
 8004a18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004a1c:	f001 fdfa 	bl	8006614 <vPortExitCritical>
}
 8004a20:	bf00      	nop
 8004a22:	3710      	adds	r7, #16
 8004a24:	46bd      	mov	sp, r7
 8004a26:	bd80      	pop	{r7, pc}

08004a28 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b084      	sub	sp, #16
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004a30:	f001 fdc0 	bl	80065b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d102      	bne.n	8004a42 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	60fb      	str	r3, [r7, #12]
 8004a40:	e001      	b.n	8004a46 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004a42:	2300      	movs	r3, #0
 8004a44:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004a46:	f001 fde5 	bl	8006614 <vPortExitCritical>

	return xReturn;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
}
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	3710      	adds	r7, #16
 8004a50:	46bd      	mov	sp, r7
 8004a52:	bd80      	pop	{r7, pc}

08004a54 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b084      	sub	sp, #16
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004a5c:	f001 fdaa 	bl	80065b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a68:	429a      	cmp	r2, r3
 8004a6a:	d102      	bne.n	8004a72 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004a6c:	2301      	movs	r3, #1
 8004a6e:	60fb      	str	r3, [r7, #12]
 8004a70:	e001      	b.n	8004a76 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004a72:	2300      	movs	r3, #0
 8004a74:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004a76:	f001 fdcd 	bl	8006614 <vPortExitCritical>

	return xReturn;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
}
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	3710      	adds	r7, #16
 8004a80:	46bd      	mov	sp, r7
 8004a82:	bd80      	pop	{r7, pc}

08004a84 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004a84:	b480      	push	{r7}
 8004a86:	b085      	sub	sp, #20
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
 8004a8c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004a8e:	2300      	movs	r3, #0
 8004a90:	60fb      	str	r3, [r7, #12]
 8004a92:	e014      	b.n	8004abe <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004a94:	4a0f      	ldr	r2, [pc, #60]	; (8004ad4 <vQueueAddToRegistry+0x50>)
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d10b      	bne.n	8004ab8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004aa0:	490c      	ldr	r1, [pc, #48]	; (8004ad4 <vQueueAddToRegistry+0x50>)
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	683a      	ldr	r2, [r7, #0]
 8004aa6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004aaa:	4a0a      	ldr	r2, [pc, #40]	; (8004ad4 <vQueueAddToRegistry+0x50>)
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	00db      	lsls	r3, r3, #3
 8004ab0:	4413      	add	r3, r2
 8004ab2:	687a      	ldr	r2, [r7, #4]
 8004ab4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004ab6:	e006      	b.n	8004ac6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	3301      	adds	r3, #1
 8004abc:	60fb      	str	r3, [r7, #12]
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	2b07      	cmp	r3, #7
 8004ac2:	d9e7      	bls.n	8004a94 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004ac4:	bf00      	nop
 8004ac6:	bf00      	nop
 8004ac8:	3714      	adds	r7, #20
 8004aca:	46bd      	mov	sp, r7
 8004acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad0:	4770      	bx	lr
 8004ad2:	bf00      	nop
 8004ad4:	200009d8 	.word	0x200009d8

08004ad8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b086      	sub	sp, #24
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	60f8      	str	r0, [r7, #12]
 8004ae0:	60b9      	str	r1, [r7, #8]
 8004ae2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004ae8:	f001 fd64 	bl	80065b4 <vPortEnterCritical>
 8004aec:	697b      	ldr	r3, [r7, #20]
 8004aee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004af2:	b25b      	sxtb	r3, r3
 8004af4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004af8:	d103      	bne.n	8004b02 <vQueueWaitForMessageRestricted+0x2a>
 8004afa:	697b      	ldr	r3, [r7, #20]
 8004afc:	2200      	movs	r2, #0
 8004afe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b02:	697b      	ldr	r3, [r7, #20]
 8004b04:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004b08:	b25b      	sxtb	r3, r3
 8004b0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b0e:	d103      	bne.n	8004b18 <vQueueWaitForMessageRestricted+0x40>
 8004b10:	697b      	ldr	r3, [r7, #20]
 8004b12:	2200      	movs	r2, #0
 8004b14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004b18:	f001 fd7c 	bl	8006614 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004b1c:	697b      	ldr	r3, [r7, #20]
 8004b1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d106      	bne.n	8004b32 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004b24:	697b      	ldr	r3, [r7, #20]
 8004b26:	3324      	adds	r3, #36	; 0x24
 8004b28:	687a      	ldr	r2, [r7, #4]
 8004b2a:	68b9      	ldr	r1, [r7, #8]
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	f000 fc2d 	bl	800538c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004b32:	6978      	ldr	r0, [r7, #20]
 8004b34:	f7ff ff26 	bl	8004984 <prvUnlockQueue>
	}
 8004b38:	bf00      	nop
 8004b3a:	3718      	adds	r7, #24
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	bd80      	pop	{r7, pc}

08004b40 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b08e      	sub	sp, #56	; 0x38
 8004b44:	af04      	add	r7, sp, #16
 8004b46:	60f8      	str	r0, [r7, #12]
 8004b48:	60b9      	str	r1, [r7, #8]
 8004b4a:	607a      	str	r2, [r7, #4]
 8004b4c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004b4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d10a      	bne.n	8004b6a <xTaskCreateStatic+0x2a>
	__asm volatile
 8004b54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b58:	f383 8811 	msr	BASEPRI, r3
 8004b5c:	f3bf 8f6f 	isb	sy
 8004b60:	f3bf 8f4f 	dsb	sy
 8004b64:	623b      	str	r3, [r7, #32]
}
 8004b66:	bf00      	nop
 8004b68:	e7fe      	b.n	8004b68 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004b6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d10a      	bne.n	8004b86 <xTaskCreateStatic+0x46>
	__asm volatile
 8004b70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b74:	f383 8811 	msr	BASEPRI, r3
 8004b78:	f3bf 8f6f 	isb	sy
 8004b7c:	f3bf 8f4f 	dsb	sy
 8004b80:	61fb      	str	r3, [r7, #28]
}
 8004b82:	bf00      	nop
 8004b84:	e7fe      	b.n	8004b84 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004b86:	23bc      	movs	r3, #188	; 0xbc
 8004b88:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004b8a:	693b      	ldr	r3, [r7, #16]
 8004b8c:	2bbc      	cmp	r3, #188	; 0xbc
 8004b8e:	d00a      	beq.n	8004ba6 <xTaskCreateStatic+0x66>
	__asm volatile
 8004b90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b94:	f383 8811 	msr	BASEPRI, r3
 8004b98:	f3bf 8f6f 	isb	sy
 8004b9c:	f3bf 8f4f 	dsb	sy
 8004ba0:	61bb      	str	r3, [r7, #24]
}
 8004ba2:	bf00      	nop
 8004ba4:	e7fe      	b.n	8004ba4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004ba6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004ba8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d01e      	beq.n	8004bec <xTaskCreateStatic+0xac>
 8004bae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d01b      	beq.n	8004bec <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004bb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bb6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004bbc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bc0:	2202      	movs	r2, #2
 8004bc2:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	9303      	str	r3, [sp, #12]
 8004bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bcc:	9302      	str	r3, [sp, #8]
 8004bce:	f107 0314 	add.w	r3, r7, #20
 8004bd2:	9301      	str	r3, [sp, #4]
 8004bd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bd6:	9300      	str	r3, [sp, #0]
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	687a      	ldr	r2, [r7, #4]
 8004bdc:	68b9      	ldr	r1, [r7, #8]
 8004bde:	68f8      	ldr	r0, [r7, #12]
 8004be0:	f000 f850 	bl	8004c84 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004be4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004be6:	f000 f8f3 	bl	8004dd0 <prvAddNewTaskToReadyList>
 8004bea:	e001      	b.n	8004bf0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004bec:	2300      	movs	r3, #0
 8004bee:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004bf0:	697b      	ldr	r3, [r7, #20]
	}
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	3728      	adds	r7, #40	; 0x28
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bd80      	pop	{r7, pc}

08004bfa <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004bfa:	b580      	push	{r7, lr}
 8004bfc:	b08c      	sub	sp, #48	; 0x30
 8004bfe:	af04      	add	r7, sp, #16
 8004c00:	60f8      	str	r0, [r7, #12]
 8004c02:	60b9      	str	r1, [r7, #8]
 8004c04:	603b      	str	r3, [r7, #0]
 8004c06:	4613      	mov	r3, r2
 8004c08:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004c0a:	88fb      	ldrh	r3, [r7, #6]
 8004c0c:	009b      	lsls	r3, r3, #2
 8004c0e:	4618      	mov	r0, r3
 8004c10:	f001 fdf2 	bl	80067f8 <pvPortMalloc>
 8004c14:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004c16:	697b      	ldr	r3, [r7, #20]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d00e      	beq.n	8004c3a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004c1c:	20bc      	movs	r0, #188	; 0xbc
 8004c1e:	f001 fdeb 	bl	80067f8 <pvPortMalloc>
 8004c22:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004c24:	69fb      	ldr	r3, [r7, #28]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d003      	beq.n	8004c32 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004c2a:	69fb      	ldr	r3, [r7, #28]
 8004c2c:	697a      	ldr	r2, [r7, #20]
 8004c2e:	631a      	str	r2, [r3, #48]	; 0x30
 8004c30:	e005      	b.n	8004c3e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004c32:	6978      	ldr	r0, [r7, #20]
 8004c34:	f001 feac 	bl	8006990 <vPortFree>
 8004c38:	e001      	b.n	8004c3e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004c3e:	69fb      	ldr	r3, [r7, #28]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d017      	beq.n	8004c74 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004c44:	69fb      	ldr	r3, [r7, #28]
 8004c46:	2200      	movs	r2, #0
 8004c48:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004c4c:	88fa      	ldrh	r2, [r7, #6]
 8004c4e:	2300      	movs	r3, #0
 8004c50:	9303      	str	r3, [sp, #12]
 8004c52:	69fb      	ldr	r3, [r7, #28]
 8004c54:	9302      	str	r3, [sp, #8]
 8004c56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c58:	9301      	str	r3, [sp, #4]
 8004c5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c5c:	9300      	str	r3, [sp, #0]
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	68b9      	ldr	r1, [r7, #8]
 8004c62:	68f8      	ldr	r0, [r7, #12]
 8004c64:	f000 f80e 	bl	8004c84 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004c68:	69f8      	ldr	r0, [r7, #28]
 8004c6a:	f000 f8b1 	bl	8004dd0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004c6e:	2301      	movs	r3, #1
 8004c70:	61bb      	str	r3, [r7, #24]
 8004c72:	e002      	b.n	8004c7a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004c74:	f04f 33ff 	mov.w	r3, #4294967295
 8004c78:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004c7a:	69bb      	ldr	r3, [r7, #24]
	}
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	3720      	adds	r7, #32
 8004c80:	46bd      	mov	sp, r7
 8004c82:	bd80      	pop	{r7, pc}

08004c84 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b088      	sub	sp, #32
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	60f8      	str	r0, [r7, #12]
 8004c8c:	60b9      	str	r1, [r7, #8]
 8004c8e:	607a      	str	r2, [r7, #4]
 8004c90:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004c92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c94:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	009b      	lsls	r3, r3, #2
 8004c9a:	461a      	mov	r2, r3
 8004c9c:	21a5      	movs	r1, #165	; 0xa5
 8004c9e:	f002 f8c6 	bl	8006e2e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004ca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ca4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004cac:	3b01      	subs	r3, #1
 8004cae:	009b      	lsls	r3, r3, #2
 8004cb0:	4413      	add	r3, r2
 8004cb2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004cb4:	69bb      	ldr	r3, [r7, #24]
 8004cb6:	f023 0307 	bic.w	r3, r3, #7
 8004cba:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004cbc:	69bb      	ldr	r3, [r7, #24]
 8004cbe:	f003 0307 	and.w	r3, r3, #7
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d00a      	beq.n	8004cdc <prvInitialiseNewTask+0x58>
	__asm volatile
 8004cc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cca:	f383 8811 	msr	BASEPRI, r3
 8004cce:	f3bf 8f6f 	isb	sy
 8004cd2:	f3bf 8f4f 	dsb	sy
 8004cd6:	617b      	str	r3, [r7, #20]
}
 8004cd8:	bf00      	nop
 8004cda:	e7fe      	b.n	8004cda <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004cdc:	68bb      	ldr	r3, [r7, #8]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d01f      	beq.n	8004d22 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	61fb      	str	r3, [r7, #28]
 8004ce6:	e012      	b.n	8004d0e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004ce8:	68ba      	ldr	r2, [r7, #8]
 8004cea:	69fb      	ldr	r3, [r7, #28]
 8004cec:	4413      	add	r3, r2
 8004cee:	7819      	ldrb	r1, [r3, #0]
 8004cf0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004cf2:	69fb      	ldr	r3, [r7, #28]
 8004cf4:	4413      	add	r3, r2
 8004cf6:	3334      	adds	r3, #52	; 0x34
 8004cf8:	460a      	mov	r2, r1
 8004cfa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004cfc:	68ba      	ldr	r2, [r7, #8]
 8004cfe:	69fb      	ldr	r3, [r7, #28]
 8004d00:	4413      	add	r3, r2
 8004d02:	781b      	ldrb	r3, [r3, #0]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d006      	beq.n	8004d16 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004d08:	69fb      	ldr	r3, [r7, #28]
 8004d0a:	3301      	adds	r3, #1
 8004d0c:	61fb      	str	r3, [r7, #28]
 8004d0e:	69fb      	ldr	r3, [r7, #28]
 8004d10:	2b0f      	cmp	r3, #15
 8004d12:	d9e9      	bls.n	8004ce8 <prvInitialiseNewTask+0x64>
 8004d14:	e000      	b.n	8004d18 <prvInitialiseNewTask+0x94>
			{
				break;
 8004d16:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004d18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004d20:	e003      	b.n	8004d2a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004d22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d24:	2200      	movs	r2, #0
 8004d26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004d2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d2c:	2b37      	cmp	r3, #55	; 0x37
 8004d2e:	d901      	bls.n	8004d34 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004d30:	2337      	movs	r3, #55	; 0x37
 8004d32:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004d34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d38:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004d3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d3c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d3e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004d40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d42:	2200      	movs	r2, #0
 8004d44:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d48:	3304      	adds	r3, #4
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	f7fe ff64 	bl	8003c18 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004d50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d52:	3318      	adds	r3, #24
 8004d54:	4618      	mov	r0, r3
 8004d56:	f7fe ff5f 	bl	8003c18 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004d5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d5e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d62:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d68:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004d6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d6e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004d70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d72:	2200      	movs	r2, #0
 8004d74:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004d78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004d80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d82:	3354      	adds	r3, #84	; 0x54
 8004d84:	2260      	movs	r2, #96	; 0x60
 8004d86:	2100      	movs	r1, #0
 8004d88:	4618      	mov	r0, r3
 8004d8a:	f002 f850 	bl	8006e2e <memset>
 8004d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d90:	4a0c      	ldr	r2, [pc, #48]	; (8004dc4 <prvInitialiseNewTask+0x140>)
 8004d92:	659a      	str	r2, [r3, #88]	; 0x58
 8004d94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d96:	4a0c      	ldr	r2, [pc, #48]	; (8004dc8 <prvInitialiseNewTask+0x144>)
 8004d98:	65da      	str	r2, [r3, #92]	; 0x5c
 8004d9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d9c:	4a0b      	ldr	r2, [pc, #44]	; (8004dcc <prvInitialiseNewTask+0x148>)
 8004d9e:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004da0:	683a      	ldr	r2, [r7, #0]
 8004da2:	68f9      	ldr	r1, [r7, #12]
 8004da4:	69b8      	ldr	r0, [r7, #24]
 8004da6:	f001 fad5 	bl	8006354 <pxPortInitialiseStack>
 8004daa:	4602      	mov	r2, r0
 8004dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dae:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004db0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d002      	beq.n	8004dbc <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004db6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004db8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004dba:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004dbc:	bf00      	nop
 8004dbe:	3720      	adds	r7, #32
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	bd80      	pop	{r7, pc}
 8004dc4:	08008150 	.word	0x08008150
 8004dc8:	08008170 	.word	0x08008170
 8004dcc:	08008130 	.word	0x08008130

08004dd0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b082      	sub	sp, #8
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004dd8:	f001 fbec 	bl	80065b4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004ddc:	4b2d      	ldr	r3, [pc, #180]	; (8004e94 <prvAddNewTaskToReadyList+0xc4>)
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	3301      	adds	r3, #1
 8004de2:	4a2c      	ldr	r2, [pc, #176]	; (8004e94 <prvAddNewTaskToReadyList+0xc4>)
 8004de4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004de6:	4b2c      	ldr	r3, [pc, #176]	; (8004e98 <prvAddNewTaskToReadyList+0xc8>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d109      	bne.n	8004e02 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004dee:	4a2a      	ldr	r2, [pc, #168]	; (8004e98 <prvAddNewTaskToReadyList+0xc8>)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004df4:	4b27      	ldr	r3, [pc, #156]	; (8004e94 <prvAddNewTaskToReadyList+0xc4>)
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	2b01      	cmp	r3, #1
 8004dfa:	d110      	bne.n	8004e1e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004dfc:	f000 fbf2 	bl	80055e4 <prvInitialiseTaskLists>
 8004e00:	e00d      	b.n	8004e1e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004e02:	4b26      	ldr	r3, [pc, #152]	; (8004e9c <prvAddNewTaskToReadyList+0xcc>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d109      	bne.n	8004e1e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004e0a:	4b23      	ldr	r3, [pc, #140]	; (8004e98 <prvAddNewTaskToReadyList+0xc8>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e14:	429a      	cmp	r2, r3
 8004e16:	d802      	bhi.n	8004e1e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004e18:	4a1f      	ldr	r2, [pc, #124]	; (8004e98 <prvAddNewTaskToReadyList+0xc8>)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004e1e:	4b20      	ldr	r3, [pc, #128]	; (8004ea0 <prvAddNewTaskToReadyList+0xd0>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	3301      	adds	r3, #1
 8004e24:	4a1e      	ldr	r2, [pc, #120]	; (8004ea0 <prvAddNewTaskToReadyList+0xd0>)
 8004e26:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004e28:	4b1d      	ldr	r3, [pc, #116]	; (8004ea0 <prvAddNewTaskToReadyList+0xd0>)
 8004e2a:	681a      	ldr	r2, [r3, #0]
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e34:	4b1b      	ldr	r3, [pc, #108]	; (8004ea4 <prvAddNewTaskToReadyList+0xd4>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	429a      	cmp	r2, r3
 8004e3a:	d903      	bls.n	8004e44 <prvAddNewTaskToReadyList+0x74>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e40:	4a18      	ldr	r2, [pc, #96]	; (8004ea4 <prvAddNewTaskToReadyList+0xd4>)
 8004e42:	6013      	str	r3, [r2, #0]
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e48:	4613      	mov	r3, r2
 8004e4a:	009b      	lsls	r3, r3, #2
 8004e4c:	4413      	add	r3, r2
 8004e4e:	009b      	lsls	r3, r3, #2
 8004e50:	4a15      	ldr	r2, [pc, #84]	; (8004ea8 <prvAddNewTaskToReadyList+0xd8>)
 8004e52:	441a      	add	r2, r3
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	3304      	adds	r3, #4
 8004e58:	4619      	mov	r1, r3
 8004e5a:	4610      	mov	r0, r2
 8004e5c:	f7fe fee9 	bl	8003c32 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004e60:	f001 fbd8 	bl	8006614 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004e64:	4b0d      	ldr	r3, [pc, #52]	; (8004e9c <prvAddNewTaskToReadyList+0xcc>)
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d00e      	beq.n	8004e8a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004e6c:	4b0a      	ldr	r3, [pc, #40]	; (8004e98 <prvAddNewTaskToReadyList+0xc8>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e76:	429a      	cmp	r2, r3
 8004e78:	d207      	bcs.n	8004e8a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004e7a:	4b0c      	ldr	r3, [pc, #48]	; (8004eac <prvAddNewTaskToReadyList+0xdc>)
 8004e7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e80:	601a      	str	r2, [r3, #0]
 8004e82:	f3bf 8f4f 	dsb	sy
 8004e86:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004e8a:	bf00      	nop
 8004e8c:	3708      	adds	r7, #8
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	bd80      	pop	{r7, pc}
 8004e92:	bf00      	nop
 8004e94:	20000eec 	.word	0x20000eec
 8004e98:	20000a18 	.word	0x20000a18
 8004e9c:	20000ef8 	.word	0x20000ef8
 8004ea0:	20000f08 	.word	0x20000f08
 8004ea4:	20000ef4 	.word	0x20000ef4
 8004ea8:	20000a1c 	.word	0x20000a1c
 8004eac:	e000ed04 	.word	0xe000ed04

08004eb0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b08a      	sub	sp, #40	; 0x28
 8004eb4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004eba:	2300      	movs	r3, #0
 8004ebc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004ebe:	463a      	mov	r2, r7
 8004ec0:	1d39      	adds	r1, r7, #4
 8004ec2:	f107 0308 	add.w	r3, r7, #8
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	f7fe fe52 	bl	8003b70 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004ecc:	6839      	ldr	r1, [r7, #0]
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	68ba      	ldr	r2, [r7, #8]
 8004ed2:	9202      	str	r2, [sp, #8]
 8004ed4:	9301      	str	r3, [sp, #4]
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	9300      	str	r3, [sp, #0]
 8004eda:	2300      	movs	r3, #0
 8004edc:	460a      	mov	r2, r1
 8004ede:	4924      	ldr	r1, [pc, #144]	; (8004f70 <vTaskStartScheduler+0xc0>)
 8004ee0:	4824      	ldr	r0, [pc, #144]	; (8004f74 <vTaskStartScheduler+0xc4>)
 8004ee2:	f7ff fe2d 	bl	8004b40 <xTaskCreateStatic>
 8004ee6:	4603      	mov	r3, r0
 8004ee8:	4a23      	ldr	r2, [pc, #140]	; (8004f78 <vTaskStartScheduler+0xc8>)
 8004eea:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004eec:	4b22      	ldr	r3, [pc, #136]	; (8004f78 <vTaskStartScheduler+0xc8>)
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d002      	beq.n	8004efa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004ef4:	2301      	movs	r3, #1
 8004ef6:	617b      	str	r3, [r7, #20]
 8004ef8:	e001      	b.n	8004efe <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004efa:	2300      	movs	r3, #0
 8004efc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004efe:	697b      	ldr	r3, [r7, #20]
 8004f00:	2b01      	cmp	r3, #1
 8004f02:	d102      	bne.n	8004f0a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004f04:	f000 fe1e 	bl	8005b44 <xTimerCreateTimerTask>
 8004f08:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004f0a:	697b      	ldr	r3, [r7, #20]
 8004f0c:	2b01      	cmp	r3, #1
 8004f0e:	d11b      	bne.n	8004f48 <vTaskStartScheduler+0x98>
	__asm volatile
 8004f10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f14:	f383 8811 	msr	BASEPRI, r3
 8004f18:	f3bf 8f6f 	isb	sy
 8004f1c:	f3bf 8f4f 	dsb	sy
 8004f20:	613b      	str	r3, [r7, #16]
}
 8004f22:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004f24:	4b15      	ldr	r3, [pc, #84]	; (8004f7c <vTaskStartScheduler+0xcc>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	3354      	adds	r3, #84	; 0x54
 8004f2a:	4a15      	ldr	r2, [pc, #84]	; (8004f80 <vTaskStartScheduler+0xd0>)
 8004f2c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004f2e:	4b15      	ldr	r3, [pc, #84]	; (8004f84 <vTaskStartScheduler+0xd4>)
 8004f30:	f04f 32ff 	mov.w	r2, #4294967295
 8004f34:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004f36:	4b14      	ldr	r3, [pc, #80]	; (8004f88 <vTaskStartScheduler+0xd8>)
 8004f38:	2201      	movs	r2, #1
 8004f3a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004f3c:	4b13      	ldr	r3, [pc, #76]	; (8004f8c <vTaskStartScheduler+0xdc>)
 8004f3e:	2200      	movs	r2, #0
 8004f40:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004f42:	f001 fa95 	bl	8006470 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004f46:	e00e      	b.n	8004f66 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004f48:	697b      	ldr	r3, [r7, #20]
 8004f4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f4e:	d10a      	bne.n	8004f66 <vTaskStartScheduler+0xb6>
	__asm volatile
 8004f50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f54:	f383 8811 	msr	BASEPRI, r3
 8004f58:	f3bf 8f6f 	isb	sy
 8004f5c:	f3bf 8f4f 	dsb	sy
 8004f60:	60fb      	str	r3, [r7, #12]
}
 8004f62:	bf00      	nop
 8004f64:	e7fe      	b.n	8004f64 <vTaskStartScheduler+0xb4>
}
 8004f66:	bf00      	nop
 8004f68:	3718      	adds	r7, #24
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	bd80      	pop	{r7, pc}
 8004f6e:	bf00      	nop
 8004f70:	080080bc 	.word	0x080080bc
 8004f74:	080055b5 	.word	0x080055b5
 8004f78:	20000f10 	.word	0x20000f10
 8004f7c:	20000a18 	.word	0x20000a18
 8004f80:	20000010 	.word	0x20000010
 8004f84:	20000f0c 	.word	0x20000f0c
 8004f88:	20000ef8 	.word	0x20000ef8
 8004f8c:	20000ef0 	.word	0x20000ef0

08004f90 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004f90:	b480      	push	{r7}
 8004f92:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004f94:	4b04      	ldr	r3, [pc, #16]	; (8004fa8 <vTaskSuspendAll+0x18>)
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	3301      	adds	r3, #1
 8004f9a:	4a03      	ldr	r2, [pc, #12]	; (8004fa8 <vTaskSuspendAll+0x18>)
 8004f9c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004f9e:	bf00      	nop
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa6:	4770      	bx	lr
 8004fa8:	20000f14 	.word	0x20000f14

08004fac <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b084      	sub	sp, #16
 8004fb0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004fba:	4b42      	ldr	r3, [pc, #264]	; (80050c4 <xTaskResumeAll+0x118>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d10a      	bne.n	8004fd8 <xTaskResumeAll+0x2c>
	__asm volatile
 8004fc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fc6:	f383 8811 	msr	BASEPRI, r3
 8004fca:	f3bf 8f6f 	isb	sy
 8004fce:	f3bf 8f4f 	dsb	sy
 8004fd2:	603b      	str	r3, [r7, #0]
}
 8004fd4:	bf00      	nop
 8004fd6:	e7fe      	b.n	8004fd6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004fd8:	f001 faec 	bl	80065b4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004fdc:	4b39      	ldr	r3, [pc, #228]	; (80050c4 <xTaskResumeAll+0x118>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	3b01      	subs	r3, #1
 8004fe2:	4a38      	ldr	r2, [pc, #224]	; (80050c4 <xTaskResumeAll+0x118>)
 8004fe4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004fe6:	4b37      	ldr	r3, [pc, #220]	; (80050c4 <xTaskResumeAll+0x118>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d162      	bne.n	80050b4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004fee:	4b36      	ldr	r3, [pc, #216]	; (80050c8 <xTaskResumeAll+0x11c>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d05e      	beq.n	80050b4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004ff6:	e02f      	b.n	8005058 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ff8:	4b34      	ldr	r3, [pc, #208]	; (80050cc <xTaskResumeAll+0x120>)
 8004ffa:	68db      	ldr	r3, [r3, #12]
 8004ffc:	68db      	ldr	r3, [r3, #12]
 8004ffe:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	3318      	adds	r3, #24
 8005004:	4618      	mov	r0, r3
 8005006:	f7fe fe71 	bl	8003cec <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	3304      	adds	r3, #4
 800500e:	4618      	mov	r0, r3
 8005010:	f7fe fe6c 	bl	8003cec <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005018:	4b2d      	ldr	r3, [pc, #180]	; (80050d0 <xTaskResumeAll+0x124>)
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	429a      	cmp	r2, r3
 800501e:	d903      	bls.n	8005028 <xTaskResumeAll+0x7c>
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005024:	4a2a      	ldr	r2, [pc, #168]	; (80050d0 <xTaskResumeAll+0x124>)
 8005026:	6013      	str	r3, [r2, #0]
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800502c:	4613      	mov	r3, r2
 800502e:	009b      	lsls	r3, r3, #2
 8005030:	4413      	add	r3, r2
 8005032:	009b      	lsls	r3, r3, #2
 8005034:	4a27      	ldr	r2, [pc, #156]	; (80050d4 <xTaskResumeAll+0x128>)
 8005036:	441a      	add	r2, r3
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	3304      	adds	r3, #4
 800503c:	4619      	mov	r1, r3
 800503e:	4610      	mov	r0, r2
 8005040:	f7fe fdf7 	bl	8003c32 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005048:	4b23      	ldr	r3, [pc, #140]	; (80050d8 <xTaskResumeAll+0x12c>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800504e:	429a      	cmp	r2, r3
 8005050:	d302      	bcc.n	8005058 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005052:	4b22      	ldr	r3, [pc, #136]	; (80050dc <xTaskResumeAll+0x130>)
 8005054:	2201      	movs	r2, #1
 8005056:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005058:	4b1c      	ldr	r3, [pc, #112]	; (80050cc <xTaskResumeAll+0x120>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d1cb      	bne.n	8004ff8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d001      	beq.n	800506a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005066:	f000 fb5f 	bl	8005728 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800506a:	4b1d      	ldr	r3, [pc, #116]	; (80050e0 <xTaskResumeAll+0x134>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d010      	beq.n	8005098 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005076:	f000 f847 	bl	8005108 <xTaskIncrementTick>
 800507a:	4603      	mov	r3, r0
 800507c:	2b00      	cmp	r3, #0
 800507e:	d002      	beq.n	8005086 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005080:	4b16      	ldr	r3, [pc, #88]	; (80050dc <xTaskResumeAll+0x130>)
 8005082:	2201      	movs	r2, #1
 8005084:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	3b01      	subs	r3, #1
 800508a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d1f1      	bne.n	8005076 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8005092:	4b13      	ldr	r3, [pc, #76]	; (80050e0 <xTaskResumeAll+0x134>)
 8005094:	2200      	movs	r2, #0
 8005096:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005098:	4b10      	ldr	r3, [pc, #64]	; (80050dc <xTaskResumeAll+0x130>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d009      	beq.n	80050b4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80050a0:	2301      	movs	r3, #1
 80050a2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80050a4:	4b0f      	ldr	r3, [pc, #60]	; (80050e4 <xTaskResumeAll+0x138>)
 80050a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050aa:	601a      	str	r2, [r3, #0]
 80050ac:	f3bf 8f4f 	dsb	sy
 80050b0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80050b4:	f001 faae 	bl	8006614 <vPortExitCritical>

	return xAlreadyYielded;
 80050b8:	68bb      	ldr	r3, [r7, #8]
}
 80050ba:	4618      	mov	r0, r3
 80050bc:	3710      	adds	r7, #16
 80050be:	46bd      	mov	sp, r7
 80050c0:	bd80      	pop	{r7, pc}
 80050c2:	bf00      	nop
 80050c4:	20000f14 	.word	0x20000f14
 80050c8:	20000eec 	.word	0x20000eec
 80050cc:	20000eac 	.word	0x20000eac
 80050d0:	20000ef4 	.word	0x20000ef4
 80050d4:	20000a1c 	.word	0x20000a1c
 80050d8:	20000a18 	.word	0x20000a18
 80050dc:	20000f00 	.word	0x20000f00
 80050e0:	20000efc 	.word	0x20000efc
 80050e4:	e000ed04 	.word	0xe000ed04

080050e8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80050e8:	b480      	push	{r7}
 80050ea:	b083      	sub	sp, #12
 80050ec:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80050ee:	4b05      	ldr	r3, [pc, #20]	; (8005104 <xTaskGetTickCount+0x1c>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80050f4:	687b      	ldr	r3, [r7, #4]
}
 80050f6:	4618      	mov	r0, r3
 80050f8:	370c      	adds	r7, #12
 80050fa:	46bd      	mov	sp, r7
 80050fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005100:	4770      	bx	lr
 8005102:	bf00      	nop
 8005104:	20000ef0 	.word	0x20000ef0

08005108 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b086      	sub	sp, #24
 800510c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800510e:	2300      	movs	r3, #0
 8005110:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005112:	4b4f      	ldr	r3, [pc, #316]	; (8005250 <xTaskIncrementTick+0x148>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	2b00      	cmp	r3, #0
 8005118:	f040 808f 	bne.w	800523a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800511c:	4b4d      	ldr	r3, [pc, #308]	; (8005254 <xTaskIncrementTick+0x14c>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	3301      	adds	r3, #1
 8005122:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005124:	4a4b      	ldr	r2, [pc, #300]	; (8005254 <xTaskIncrementTick+0x14c>)
 8005126:	693b      	ldr	r3, [r7, #16]
 8005128:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800512a:	693b      	ldr	r3, [r7, #16]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d120      	bne.n	8005172 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005130:	4b49      	ldr	r3, [pc, #292]	; (8005258 <xTaskIncrementTick+0x150>)
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d00a      	beq.n	8005150 <xTaskIncrementTick+0x48>
	__asm volatile
 800513a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800513e:	f383 8811 	msr	BASEPRI, r3
 8005142:	f3bf 8f6f 	isb	sy
 8005146:	f3bf 8f4f 	dsb	sy
 800514a:	603b      	str	r3, [r7, #0]
}
 800514c:	bf00      	nop
 800514e:	e7fe      	b.n	800514e <xTaskIncrementTick+0x46>
 8005150:	4b41      	ldr	r3, [pc, #260]	; (8005258 <xTaskIncrementTick+0x150>)
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	60fb      	str	r3, [r7, #12]
 8005156:	4b41      	ldr	r3, [pc, #260]	; (800525c <xTaskIncrementTick+0x154>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	4a3f      	ldr	r2, [pc, #252]	; (8005258 <xTaskIncrementTick+0x150>)
 800515c:	6013      	str	r3, [r2, #0]
 800515e:	4a3f      	ldr	r2, [pc, #252]	; (800525c <xTaskIncrementTick+0x154>)
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	6013      	str	r3, [r2, #0]
 8005164:	4b3e      	ldr	r3, [pc, #248]	; (8005260 <xTaskIncrementTick+0x158>)
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	3301      	adds	r3, #1
 800516a:	4a3d      	ldr	r2, [pc, #244]	; (8005260 <xTaskIncrementTick+0x158>)
 800516c:	6013      	str	r3, [r2, #0]
 800516e:	f000 fadb 	bl	8005728 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005172:	4b3c      	ldr	r3, [pc, #240]	; (8005264 <xTaskIncrementTick+0x15c>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	693a      	ldr	r2, [r7, #16]
 8005178:	429a      	cmp	r2, r3
 800517a:	d349      	bcc.n	8005210 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800517c:	4b36      	ldr	r3, [pc, #216]	; (8005258 <xTaskIncrementTick+0x150>)
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d104      	bne.n	8005190 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005186:	4b37      	ldr	r3, [pc, #220]	; (8005264 <xTaskIncrementTick+0x15c>)
 8005188:	f04f 32ff 	mov.w	r2, #4294967295
 800518c:	601a      	str	r2, [r3, #0]
					break;
 800518e:	e03f      	b.n	8005210 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005190:	4b31      	ldr	r3, [pc, #196]	; (8005258 <xTaskIncrementTick+0x150>)
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	68db      	ldr	r3, [r3, #12]
 8005196:	68db      	ldr	r3, [r3, #12]
 8005198:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800519a:	68bb      	ldr	r3, [r7, #8]
 800519c:	685b      	ldr	r3, [r3, #4]
 800519e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80051a0:	693a      	ldr	r2, [r7, #16]
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	429a      	cmp	r2, r3
 80051a6:	d203      	bcs.n	80051b0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80051a8:	4a2e      	ldr	r2, [pc, #184]	; (8005264 <xTaskIncrementTick+0x15c>)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80051ae:	e02f      	b.n	8005210 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80051b0:	68bb      	ldr	r3, [r7, #8]
 80051b2:	3304      	adds	r3, #4
 80051b4:	4618      	mov	r0, r3
 80051b6:	f7fe fd99 	bl	8003cec <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80051ba:	68bb      	ldr	r3, [r7, #8]
 80051bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d004      	beq.n	80051cc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80051c2:	68bb      	ldr	r3, [r7, #8]
 80051c4:	3318      	adds	r3, #24
 80051c6:	4618      	mov	r0, r3
 80051c8:	f7fe fd90 	bl	8003cec <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80051cc:	68bb      	ldr	r3, [r7, #8]
 80051ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051d0:	4b25      	ldr	r3, [pc, #148]	; (8005268 <xTaskIncrementTick+0x160>)
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	429a      	cmp	r2, r3
 80051d6:	d903      	bls.n	80051e0 <xTaskIncrementTick+0xd8>
 80051d8:	68bb      	ldr	r3, [r7, #8]
 80051da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051dc:	4a22      	ldr	r2, [pc, #136]	; (8005268 <xTaskIncrementTick+0x160>)
 80051de:	6013      	str	r3, [r2, #0]
 80051e0:	68bb      	ldr	r3, [r7, #8]
 80051e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051e4:	4613      	mov	r3, r2
 80051e6:	009b      	lsls	r3, r3, #2
 80051e8:	4413      	add	r3, r2
 80051ea:	009b      	lsls	r3, r3, #2
 80051ec:	4a1f      	ldr	r2, [pc, #124]	; (800526c <xTaskIncrementTick+0x164>)
 80051ee:	441a      	add	r2, r3
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	3304      	adds	r3, #4
 80051f4:	4619      	mov	r1, r3
 80051f6:	4610      	mov	r0, r2
 80051f8:	f7fe fd1b 	bl	8003c32 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80051fc:	68bb      	ldr	r3, [r7, #8]
 80051fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005200:	4b1b      	ldr	r3, [pc, #108]	; (8005270 <xTaskIncrementTick+0x168>)
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005206:	429a      	cmp	r2, r3
 8005208:	d3b8      	bcc.n	800517c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800520a:	2301      	movs	r3, #1
 800520c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800520e:	e7b5      	b.n	800517c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005210:	4b17      	ldr	r3, [pc, #92]	; (8005270 <xTaskIncrementTick+0x168>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005216:	4915      	ldr	r1, [pc, #84]	; (800526c <xTaskIncrementTick+0x164>)
 8005218:	4613      	mov	r3, r2
 800521a:	009b      	lsls	r3, r3, #2
 800521c:	4413      	add	r3, r2
 800521e:	009b      	lsls	r3, r3, #2
 8005220:	440b      	add	r3, r1
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	2b01      	cmp	r3, #1
 8005226:	d901      	bls.n	800522c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005228:	2301      	movs	r3, #1
 800522a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800522c:	4b11      	ldr	r3, [pc, #68]	; (8005274 <xTaskIncrementTick+0x16c>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d007      	beq.n	8005244 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005234:	2301      	movs	r3, #1
 8005236:	617b      	str	r3, [r7, #20]
 8005238:	e004      	b.n	8005244 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800523a:	4b0f      	ldr	r3, [pc, #60]	; (8005278 <xTaskIncrementTick+0x170>)
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	3301      	adds	r3, #1
 8005240:	4a0d      	ldr	r2, [pc, #52]	; (8005278 <xTaskIncrementTick+0x170>)
 8005242:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005244:	697b      	ldr	r3, [r7, #20]
}
 8005246:	4618      	mov	r0, r3
 8005248:	3718      	adds	r7, #24
 800524a:	46bd      	mov	sp, r7
 800524c:	bd80      	pop	{r7, pc}
 800524e:	bf00      	nop
 8005250:	20000f14 	.word	0x20000f14
 8005254:	20000ef0 	.word	0x20000ef0
 8005258:	20000ea4 	.word	0x20000ea4
 800525c:	20000ea8 	.word	0x20000ea8
 8005260:	20000f04 	.word	0x20000f04
 8005264:	20000f0c 	.word	0x20000f0c
 8005268:	20000ef4 	.word	0x20000ef4
 800526c:	20000a1c 	.word	0x20000a1c
 8005270:	20000a18 	.word	0x20000a18
 8005274:	20000f00 	.word	0x20000f00
 8005278:	20000efc 	.word	0x20000efc

0800527c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800527c:	b480      	push	{r7}
 800527e:	b085      	sub	sp, #20
 8005280:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005282:	4b2a      	ldr	r3, [pc, #168]	; (800532c <vTaskSwitchContext+0xb0>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d003      	beq.n	8005292 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800528a:	4b29      	ldr	r3, [pc, #164]	; (8005330 <vTaskSwitchContext+0xb4>)
 800528c:	2201      	movs	r2, #1
 800528e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005290:	e046      	b.n	8005320 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8005292:	4b27      	ldr	r3, [pc, #156]	; (8005330 <vTaskSwitchContext+0xb4>)
 8005294:	2200      	movs	r2, #0
 8005296:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005298:	4b26      	ldr	r3, [pc, #152]	; (8005334 <vTaskSwitchContext+0xb8>)
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	60fb      	str	r3, [r7, #12]
 800529e:	e010      	b.n	80052c2 <vTaskSwitchContext+0x46>
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d10a      	bne.n	80052bc <vTaskSwitchContext+0x40>
	__asm volatile
 80052a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052aa:	f383 8811 	msr	BASEPRI, r3
 80052ae:	f3bf 8f6f 	isb	sy
 80052b2:	f3bf 8f4f 	dsb	sy
 80052b6:	607b      	str	r3, [r7, #4]
}
 80052b8:	bf00      	nop
 80052ba:	e7fe      	b.n	80052ba <vTaskSwitchContext+0x3e>
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	3b01      	subs	r3, #1
 80052c0:	60fb      	str	r3, [r7, #12]
 80052c2:	491d      	ldr	r1, [pc, #116]	; (8005338 <vTaskSwitchContext+0xbc>)
 80052c4:	68fa      	ldr	r2, [r7, #12]
 80052c6:	4613      	mov	r3, r2
 80052c8:	009b      	lsls	r3, r3, #2
 80052ca:	4413      	add	r3, r2
 80052cc:	009b      	lsls	r3, r3, #2
 80052ce:	440b      	add	r3, r1
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d0e4      	beq.n	80052a0 <vTaskSwitchContext+0x24>
 80052d6:	68fa      	ldr	r2, [r7, #12]
 80052d8:	4613      	mov	r3, r2
 80052da:	009b      	lsls	r3, r3, #2
 80052dc:	4413      	add	r3, r2
 80052de:	009b      	lsls	r3, r3, #2
 80052e0:	4a15      	ldr	r2, [pc, #84]	; (8005338 <vTaskSwitchContext+0xbc>)
 80052e2:	4413      	add	r3, r2
 80052e4:	60bb      	str	r3, [r7, #8]
 80052e6:	68bb      	ldr	r3, [r7, #8]
 80052e8:	685b      	ldr	r3, [r3, #4]
 80052ea:	685a      	ldr	r2, [r3, #4]
 80052ec:	68bb      	ldr	r3, [r7, #8]
 80052ee:	605a      	str	r2, [r3, #4]
 80052f0:	68bb      	ldr	r3, [r7, #8]
 80052f2:	685a      	ldr	r2, [r3, #4]
 80052f4:	68bb      	ldr	r3, [r7, #8]
 80052f6:	3308      	adds	r3, #8
 80052f8:	429a      	cmp	r2, r3
 80052fa:	d104      	bne.n	8005306 <vTaskSwitchContext+0x8a>
 80052fc:	68bb      	ldr	r3, [r7, #8]
 80052fe:	685b      	ldr	r3, [r3, #4]
 8005300:	685a      	ldr	r2, [r3, #4]
 8005302:	68bb      	ldr	r3, [r7, #8]
 8005304:	605a      	str	r2, [r3, #4]
 8005306:	68bb      	ldr	r3, [r7, #8]
 8005308:	685b      	ldr	r3, [r3, #4]
 800530a:	68db      	ldr	r3, [r3, #12]
 800530c:	4a0b      	ldr	r2, [pc, #44]	; (800533c <vTaskSwitchContext+0xc0>)
 800530e:	6013      	str	r3, [r2, #0]
 8005310:	4a08      	ldr	r2, [pc, #32]	; (8005334 <vTaskSwitchContext+0xb8>)
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005316:	4b09      	ldr	r3, [pc, #36]	; (800533c <vTaskSwitchContext+0xc0>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	3354      	adds	r3, #84	; 0x54
 800531c:	4a08      	ldr	r2, [pc, #32]	; (8005340 <vTaskSwitchContext+0xc4>)
 800531e:	6013      	str	r3, [r2, #0]
}
 8005320:	bf00      	nop
 8005322:	3714      	adds	r7, #20
 8005324:	46bd      	mov	sp, r7
 8005326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532a:	4770      	bx	lr
 800532c:	20000f14 	.word	0x20000f14
 8005330:	20000f00 	.word	0x20000f00
 8005334:	20000ef4 	.word	0x20000ef4
 8005338:	20000a1c 	.word	0x20000a1c
 800533c:	20000a18 	.word	0x20000a18
 8005340:	20000010 	.word	0x20000010

08005344 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b084      	sub	sp, #16
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
 800534c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d10a      	bne.n	800536a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005354:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005358:	f383 8811 	msr	BASEPRI, r3
 800535c:	f3bf 8f6f 	isb	sy
 8005360:	f3bf 8f4f 	dsb	sy
 8005364:	60fb      	str	r3, [r7, #12]
}
 8005366:	bf00      	nop
 8005368:	e7fe      	b.n	8005368 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800536a:	4b07      	ldr	r3, [pc, #28]	; (8005388 <vTaskPlaceOnEventList+0x44>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	3318      	adds	r3, #24
 8005370:	4619      	mov	r1, r3
 8005372:	6878      	ldr	r0, [r7, #4]
 8005374:	f7fe fc81 	bl	8003c7a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005378:	2101      	movs	r1, #1
 800537a:	6838      	ldr	r0, [r7, #0]
 800537c:	f000 fb8e 	bl	8005a9c <prvAddCurrentTaskToDelayedList>
}
 8005380:	bf00      	nop
 8005382:	3710      	adds	r7, #16
 8005384:	46bd      	mov	sp, r7
 8005386:	bd80      	pop	{r7, pc}
 8005388:	20000a18 	.word	0x20000a18

0800538c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800538c:	b580      	push	{r7, lr}
 800538e:	b086      	sub	sp, #24
 8005390:	af00      	add	r7, sp, #0
 8005392:	60f8      	str	r0, [r7, #12]
 8005394:	60b9      	str	r1, [r7, #8]
 8005396:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d10a      	bne.n	80053b4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800539e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053a2:	f383 8811 	msr	BASEPRI, r3
 80053a6:	f3bf 8f6f 	isb	sy
 80053aa:	f3bf 8f4f 	dsb	sy
 80053ae:	617b      	str	r3, [r7, #20]
}
 80053b0:	bf00      	nop
 80053b2:	e7fe      	b.n	80053b2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80053b4:	4b0a      	ldr	r3, [pc, #40]	; (80053e0 <vTaskPlaceOnEventListRestricted+0x54>)
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	3318      	adds	r3, #24
 80053ba:	4619      	mov	r1, r3
 80053bc:	68f8      	ldr	r0, [r7, #12]
 80053be:	f7fe fc38 	bl	8003c32 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d002      	beq.n	80053ce <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80053c8:	f04f 33ff 	mov.w	r3, #4294967295
 80053cc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80053ce:	6879      	ldr	r1, [r7, #4]
 80053d0:	68b8      	ldr	r0, [r7, #8]
 80053d2:	f000 fb63 	bl	8005a9c <prvAddCurrentTaskToDelayedList>
	}
 80053d6:	bf00      	nop
 80053d8:	3718      	adds	r7, #24
 80053da:	46bd      	mov	sp, r7
 80053dc:	bd80      	pop	{r7, pc}
 80053de:	bf00      	nop
 80053e0:	20000a18 	.word	0x20000a18

080053e4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b086      	sub	sp, #24
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	68db      	ldr	r3, [r3, #12]
 80053f0:	68db      	ldr	r3, [r3, #12]
 80053f2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80053f4:	693b      	ldr	r3, [r7, #16]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d10a      	bne.n	8005410 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80053fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053fe:	f383 8811 	msr	BASEPRI, r3
 8005402:	f3bf 8f6f 	isb	sy
 8005406:	f3bf 8f4f 	dsb	sy
 800540a:	60fb      	str	r3, [r7, #12]
}
 800540c:	bf00      	nop
 800540e:	e7fe      	b.n	800540e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005410:	693b      	ldr	r3, [r7, #16]
 8005412:	3318      	adds	r3, #24
 8005414:	4618      	mov	r0, r3
 8005416:	f7fe fc69 	bl	8003cec <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800541a:	4b1e      	ldr	r3, [pc, #120]	; (8005494 <xTaskRemoveFromEventList+0xb0>)
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d11d      	bne.n	800545e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005422:	693b      	ldr	r3, [r7, #16]
 8005424:	3304      	adds	r3, #4
 8005426:	4618      	mov	r0, r3
 8005428:	f7fe fc60 	bl	8003cec <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800542c:	693b      	ldr	r3, [r7, #16]
 800542e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005430:	4b19      	ldr	r3, [pc, #100]	; (8005498 <xTaskRemoveFromEventList+0xb4>)
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	429a      	cmp	r2, r3
 8005436:	d903      	bls.n	8005440 <xTaskRemoveFromEventList+0x5c>
 8005438:	693b      	ldr	r3, [r7, #16]
 800543a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800543c:	4a16      	ldr	r2, [pc, #88]	; (8005498 <xTaskRemoveFromEventList+0xb4>)
 800543e:	6013      	str	r3, [r2, #0]
 8005440:	693b      	ldr	r3, [r7, #16]
 8005442:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005444:	4613      	mov	r3, r2
 8005446:	009b      	lsls	r3, r3, #2
 8005448:	4413      	add	r3, r2
 800544a:	009b      	lsls	r3, r3, #2
 800544c:	4a13      	ldr	r2, [pc, #76]	; (800549c <xTaskRemoveFromEventList+0xb8>)
 800544e:	441a      	add	r2, r3
 8005450:	693b      	ldr	r3, [r7, #16]
 8005452:	3304      	adds	r3, #4
 8005454:	4619      	mov	r1, r3
 8005456:	4610      	mov	r0, r2
 8005458:	f7fe fbeb 	bl	8003c32 <vListInsertEnd>
 800545c:	e005      	b.n	800546a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800545e:	693b      	ldr	r3, [r7, #16]
 8005460:	3318      	adds	r3, #24
 8005462:	4619      	mov	r1, r3
 8005464:	480e      	ldr	r0, [pc, #56]	; (80054a0 <xTaskRemoveFromEventList+0xbc>)
 8005466:	f7fe fbe4 	bl	8003c32 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800546a:	693b      	ldr	r3, [r7, #16]
 800546c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800546e:	4b0d      	ldr	r3, [pc, #52]	; (80054a4 <xTaskRemoveFromEventList+0xc0>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005474:	429a      	cmp	r2, r3
 8005476:	d905      	bls.n	8005484 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005478:	2301      	movs	r3, #1
 800547a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800547c:	4b0a      	ldr	r3, [pc, #40]	; (80054a8 <xTaskRemoveFromEventList+0xc4>)
 800547e:	2201      	movs	r2, #1
 8005480:	601a      	str	r2, [r3, #0]
 8005482:	e001      	b.n	8005488 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005484:	2300      	movs	r3, #0
 8005486:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005488:	697b      	ldr	r3, [r7, #20]
}
 800548a:	4618      	mov	r0, r3
 800548c:	3718      	adds	r7, #24
 800548e:	46bd      	mov	sp, r7
 8005490:	bd80      	pop	{r7, pc}
 8005492:	bf00      	nop
 8005494:	20000f14 	.word	0x20000f14
 8005498:	20000ef4 	.word	0x20000ef4
 800549c:	20000a1c 	.word	0x20000a1c
 80054a0:	20000eac 	.word	0x20000eac
 80054a4:	20000a18 	.word	0x20000a18
 80054a8:	20000f00 	.word	0x20000f00

080054ac <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80054ac:	b480      	push	{r7}
 80054ae:	b083      	sub	sp, #12
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80054b4:	4b06      	ldr	r3, [pc, #24]	; (80054d0 <vTaskInternalSetTimeOutState+0x24>)
 80054b6:	681a      	ldr	r2, [r3, #0]
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80054bc:	4b05      	ldr	r3, [pc, #20]	; (80054d4 <vTaskInternalSetTimeOutState+0x28>)
 80054be:	681a      	ldr	r2, [r3, #0]
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	605a      	str	r2, [r3, #4]
}
 80054c4:	bf00      	nop
 80054c6:	370c      	adds	r7, #12
 80054c8:	46bd      	mov	sp, r7
 80054ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ce:	4770      	bx	lr
 80054d0:	20000f04 	.word	0x20000f04
 80054d4:	20000ef0 	.word	0x20000ef0

080054d8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b088      	sub	sp, #32
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
 80054e0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d10a      	bne.n	80054fe <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80054e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054ec:	f383 8811 	msr	BASEPRI, r3
 80054f0:	f3bf 8f6f 	isb	sy
 80054f4:	f3bf 8f4f 	dsb	sy
 80054f8:	613b      	str	r3, [r7, #16]
}
 80054fa:	bf00      	nop
 80054fc:	e7fe      	b.n	80054fc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d10a      	bne.n	800551a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005504:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005508:	f383 8811 	msr	BASEPRI, r3
 800550c:	f3bf 8f6f 	isb	sy
 8005510:	f3bf 8f4f 	dsb	sy
 8005514:	60fb      	str	r3, [r7, #12]
}
 8005516:	bf00      	nop
 8005518:	e7fe      	b.n	8005518 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800551a:	f001 f84b 	bl	80065b4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800551e:	4b1d      	ldr	r3, [pc, #116]	; (8005594 <xTaskCheckForTimeOut+0xbc>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	685b      	ldr	r3, [r3, #4]
 8005528:	69ba      	ldr	r2, [r7, #24]
 800552a:	1ad3      	subs	r3, r2, r3
 800552c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005536:	d102      	bne.n	800553e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005538:	2300      	movs	r3, #0
 800553a:	61fb      	str	r3, [r7, #28]
 800553c:	e023      	b.n	8005586 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681a      	ldr	r2, [r3, #0]
 8005542:	4b15      	ldr	r3, [pc, #84]	; (8005598 <xTaskCheckForTimeOut+0xc0>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	429a      	cmp	r2, r3
 8005548:	d007      	beq.n	800555a <xTaskCheckForTimeOut+0x82>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	685b      	ldr	r3, [r3, #4]
 800554e:	69ba      	ldr	r2, [r7, #24]
 8005550:	429a      	cmp	r2, r3
 8005552:	d302      	bcc.n	800555a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005554:	2301      	movs	r3, #1
 8005556:	61fb      	str	r3, [r7, #28]
 8005558:	e015      	b.n	8005586 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	697a      	ldr	r2, [r7, #20]
 8005560:	429a      	cmp	r2, r3
 8005562:	d20b      	bcs.n	800557c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	681a      	ldr	r2, [r3, #0]
 8005568:	697b      	ldr	r3, [r7, #20]
 800556a:	1ad2      	subs	r2, r2, r3
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005570:	6878      	ldr	r0, [r7, #4]
 8005572:	f7ff ff9b 	bl	80054ac <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005576:	2300      	movs	r3, #0
 8005578:	61fb      	str	r3, [r7, #28]
 800557a:	e004      	b.n	8005586 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	2200      	movs	r2, #0
 8005580:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005582:	2301      	movs	r3, #1
 8005584:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005586:	f001 f845 	bl	8006614 <vPortExitCritical>

	return xReturn;
 800558a:	69fb      	ldr	r3, [r7, #28]
}
 800558c:	4618      	mov	r0, r3
 800558e:	3720      	adds	r7, #32
 8005590:	46bd      	mov	sp, r7
 8005592:	bd80      	pop	{r7, pc}
 8005594:	20000ef0 	.word	0x20000ef0
 8005598:	20000f04 	.word	0x20000f04

0800559c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800559c:	b480      	push	{r7}
 800559e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80055a0:	4b03      	ldr	r3, [pc, #12]	; (80055b0 <vTaskMissedYield+0x14>)
 80055a2:	2201      	movs	r2, #1
 80055a4:	601a      	str	r2, [r3, #0]
}
 80055a6:	bf00      	nop
 80055a8:	46bd      	mov	sp, r7
 80055aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ae:	4770      	bx	lr
 80055b0:	20000f00 	.word	0x20000f00

080055b4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b082      	sub	sp, #8
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80055bc:	f000 f852 	bl	8005664 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80055c0:	4b06      	ldr	r3, [pc, #24]	; (80055dc <prvIdleTask+0x28>)
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	2b01      	cmp	r3, #1
 80055c6:	d9f9      	bls.n	80055bc <prvIdleTask+0x8>
			{
				taskYIELD();
 80055c8:	4b05      	ldr	r3, [pc, #20]	; (80055e0 <prvIdleTask+0x2c>)
 80055ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055ce:	601a      	str	r2, [r3, #0]
 80055d0:	f3bf 8f4f 	dsb	sy
 80055d4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80055d8:	e7f0      	b.n	80055bc <prvIdleTask+0x8>
 80055da:	bf00      	nop
 80055dc:	20000a1c 	.word	0x20000a1c
 80055e0:	e000ed04 	.word	0xe000ed04

080055e4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b082      	sub	sp, #8
 80055e8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80055ea:	2300      	movs	r3, #0
 80055ec:	607b      	str	r3, [r7, #4]
 80055ee:	e00c      	b.n	800560a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80055f0:	687a      	ldr	r2, [r7, #4]
 80055f2:	4613      	mov	r3, r2
 80055f4:	009b      	lsls	r3, r3, #2
 80055f6:	4413      	add	r3, r2
 80055f8:	009b      	lsls	r3, r3, #2
 80055fa:	4a12      	ldr	r2, [pc, #72]	; (8005644 <prvInitialiseTaskLists+0x60>)
 80055fc:	4413      	add	r3, r2
 80055fe:	4618      	mov	r0, r3
 8005600:	f7fe faea 	bl	8003bd8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	3301      	adds	r3, #1
 8005608:	607b      	str	r3, [r7, #4]
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2b37      	cmp	r3, #55	; 0x37
 800560e:	d9ef      	bls.n	80055f0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005610:	480d      	ldr	r0, [pc, #52]	; (8005648 <prvInitialiseTaskLists+0x64>)
 8005612:	f7fe fae1 	bl	8003bd8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005616:	480d      	ldr	r0, [pc, #52]	; (800564c <prvInitialiseTaskLists+0x68>)
 8005618:	f7fe fade 	bl	8003bd8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800561c:	480c      	ldr	r0, [pc, #48]	; (8005650 <prvInitialiseTaskLists+0x6c>)
 800561e:	f7fe fadb 	bl	8003bd8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005622:	480c      	ldr	r0, [pc, #48]	; (8005654 <prvInitialiseTaskLists+0x70>)
 8005624:	f7fe fad8 	bl	8003bd8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005628:	480b      	ldr	r0, [pc, #44]	; (8005658 <prvInitialiseTaskLists+0x74>)
 800562a:	f7fe fad5 	bl	8003bd8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800562e:	4b0b      	ldr	r3, [pc, #44]	; (800565c <prvInitialiseTaskLists+0x78>)
 8005630:	4a05      	ldr	r2, [pc, #20]	; (8005648 <prvInitialiseTaskLists+0x64>)
 8005632:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005634:	4b0a      	ldr	r3, [pc, #40]	; (8005660 <prvInitialiseTaskLists+0x7c>)
 8005636:	4a05      	ldr	r2, [pc, #20]	; (800564c <prvInitialiseTaskLists+0x68>)
 8005638:	601a      	str	r2, [r3, #0]
}
 800563a:	bf00      	nop
 800563c:	3708      	adds	r7, #8
 800563e:	46bd      	mov	sp, r7
 8005640:	bd80      	pop	{r7, pc}
 8005642:	bf00      	nop
 8005644:	20000a1c 	.word	0x20000a1c
 8005648:	20000e7c 	.word	0x20000e7c
 800564c:	20000e90 	.word	0x20000e90
 8005650:	20000eac 	.word	0x20000eac
 8005654:	20000ec0 	.word	0x20000ec0
 8005658:	20000ed8 	.word	0x20000ed8
 800565c:	20000ea4 	.word	0x20000ea4
 8005660:	20000ea8 	.word	0x20000ea8

08005664 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b082      	sub	sp, #8
 8005668:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800566a:	e019      	b.n	80056a0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800566c:	f000 ffa2 	bl	80065b4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005670:	4b10      	ldr	r3, [pc, #64]	; (80056b4 <prvCheckTasksWaitingTermination+0x50>)
 8005672:	68db      	ldr	r3, [r3, #12]
 8005674:	68db      	ldr	r3, [r3, #12]
 8005676:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	3304      	adds	r3, #4
 800567c:	4618      	mov	r0, r3
 800567e:	f7fe fb35 	bl	8003cec <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005682:	4b0d      	ldr	r3, [pc, #52]	; (80056b8 <prvCheckTasksWaitingTermination+0x54>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	3b01      	subs	r3, #1
 8005688:	4a0b      	ldr	r2, [pc, #44]	; (80056b8 <prvCheckTasksWaitingTermination+0x54>)
 800568a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800568c:	4b0b      	ldr	r3, [pc, #44]	; (80056bc <prvCheckTasksWaitingTermination+0x58>)
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	3b01      	subs	r3, #1
 8005692:	4a0a      	ldr	r2, [pc, #40]	; (80056bc <prvCheckTasksWaitingTermination+0x58>)
 8005694:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005696:	f000 ffbd 	bl	8006614 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800569a:	6878      	ldr	r0, [r7, #4]
 800569c:	f000 f810 	bl	80056c0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80056a0:	4b06      	ldr	r3, [pc, #24]	; (80056bc <prvCheckTasksWaitingTermination+0x58>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d1e1      	bne.n	800566c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80056a8:	bf00      	nop
 80056aa:	bf00      	nop
 80056ac:	3708      	adds	r7, #8
 80056ae:	46bd      	mov	sp, r7
 80056b0:	bd80      	pop	{r7, pc}
 80056b2:	bf00      	nop
 80056b4:	20000ec0 	.word	0x20000ec0
 80056b8:	20000eec 	.word	0x20000eec
 80056bc:	20000ed4 	.word	0x20000ed4

080056c0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b084      	sub	sp, #16
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	3354      	adds	r3, #84	; 0x54
 80056cc:	4618      	mov	r0, r3
 80056ce:	f001 fc71 	bl	8006fb4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d108      	bne.n	80056ee <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056e0:	4618      	mov	r0, r3
 80056e2:	f001 f955 	bl	8006990 <vPortFree>
				vPortFree( pxTCB );
 80056e6:	6878      	ldr	r0, [r7, #4]
 80056e8:	f001 f952 	bl	8006990 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80056ec:	e018      	b.n	8005720 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80056f4:	2b01      	cmp	r3, #1
 80056f6:	d103      	bne.n	8005700 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80056f8:	6878      	ldr	r0, [r7, #4]
 80056fa:	f001 f949 	bl	8006990 <vPortFree>
	}
 80056fe:	e00f      	b.n	8005720 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005706:	2b02      	cmp	r3, #2
 8005708:	d00a      	beq.n	8005720 <prvDeleteTCB+0x60>
	__asm volatile
 800570a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800570e:	f383 8811 	msr	BASEPRI, r3
 8005712:	f3bf 8f6f 	isb	sy
 8005716:	f3bf 8f4f 	dsb	sy
 800571a:	60fb      	str	r3, [r7, #12]
}
 800571c:	bf00      	nop
 800571e:	e7fe      	b.n	800571e <prvDeleteTCB+0x5e>
	}
 8005720:	bf00      	nop
 8005722:	3710      	adds	r7, #16
 8005724:	46bd      	mov	sp, r7
 8005726:	bd80      	pop	{r7, pc}

08005728 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005728:	b480      	push	{r7}
 800572a:	b083      	sub	sp, #12
 800572c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800572e:	4b0c      	ldr	r3, [pc, #48]	; (8005760 <prvResetNextTaskUnblockTime+0x38>)
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d104      	bne.n	8005742 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005738:	4b0a      	ldr	r3, [pc, #40]	; (8005764 <prvResetNextTaskUnblockTime+0x3c>)
 800573a:	f04f 32ff 	mov.w	r2, #4294967295
 800573e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005740:	e008      	b.n	8005754 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005742:	4b07      	ldr	r3, [pc, #28]	; (8005760 <prvResetNextTaskUnblockTime+0x38>)
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	68db      	ldr	r3, [r3, #12]
 8005748:	68db      	ldr	r3, [r3, #12]
 800574a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	685b      	ldr	r3, [r3, #4]
 8005750:	4a04      	ldr	r2, [pc, #16]	; (8005764 <prvResetNextTaskUnblockTime+0x3c>)
 8005752:	6013      	str	r3, [r2, #0]
}
 8005754:	bf00      	nop
 8005756:	370c      	adds	r7, #12
 8005758:	46bd      	mov	sp, r7
 800575a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575e:	4770      	bx	lr
 8005760:	20000ea4 	.word	0x20000ea4
 8005764:	20000f0c 	.word	0x20000f0c

08005768 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8005768:	b480      	push	{r7}
 800576a:	b083      	sub	sp, #12
 800576c:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800576e:	4b05      	ldr	r3, [pc, #20]	; (8005784 <xTaskGetCurrentTaskHandle+0x1c>)
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	607b      	str	r3, [r7, #4]

		return xReturn;
 8005774:	687b      	ldr	r3, [r7, #4]
	}
 8005776:	4618      	mov	r0, r3
 8005778:	370c      	adds	r7, #12
 800577a:	46bd      	mov	sp, r7
 800577c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005780:	4770      	bx	lr
 8005782:	bf00      	nop
 8005784:	20000a18 	.word	0x20000a18

08005788 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005788:	b480      	push	{r7}
 800578a:	b083      	sub	sp, #12
 800578c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800578e:	4b0b      	ldr	r3, [pc, #44]	; (80057bc <xTaskGetSchedulerState+0x34>)
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d102      	bne.n	800579c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005796:	2301      	movs	r3, #1
 8005798:	607b      	str	r3, [r7, #4]
 800579a:	e008      	b.n	80057ae <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800579c:	4b08      	ldr	r3, [pc, #32]	; (80057c0 <xTaskGetSchedulerState+0x38>)
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d102      	bne.n	80057aa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80057a4:	2302      	movs	r3, #2
 80057a6:	607b      	str	r3, [r7, #4]
 80057a8:	e001      	b.n	80057ae <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80057aa:	2300      	movs	r3, #0
 80057ac:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80057ae:	687b      	ldr	r3, [r7, #4]
	}
 80057b0:	4618      	mov	r0, r3
 80057b2:	370c      	adds	r7, #12
 80057b4:	46bd      	mov	sp, r7
 80057b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ba:	4770      	bx	lr
 80057bc:	20000ef8 	.word	0x20000ef8
 80057c0:	20000f14 	.word	0x20000f14

080057c4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b084      	sub	sp, #16
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80057d0:	2300      	movs	r3, #0
 80057d2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d051      	beq.n	800587e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80057da:	68bb      	ldr	r3, [r7, #8]
 80057dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057de:	4b2a      	ldr	r3, [pc, #168]	; (8005888 <xTaskPriorityInherit+0xc4>)
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057e4:	429a      	cmp	r2, r3
 80057e6:	d241      	bcs.n	800586c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80057e8:	68bb      	ldr	r3, [r7, #8]
 80057ea:	699b      	ldr	r3, [r3, #24]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	db06      	blt.n	80057fe <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80057f0:	4b25      	ldr	r3, [pc, #148]	; (8005888 <xTaskPriorityInherit+0xc4>)
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057f6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80057fa:	68bb      	ldr	r3, [r7, #8]
 80057fc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80057fe:	68bb      	ldr	r3, [r7, #8]
 8005800:	6959      	ldr	r1, [r3, #20]
 8005802:	68bb      	ldr	r3, [r7, #8]
 8005804:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005806:	4613      	mov	r3, r2
 8005808:	009b      	lsls	r3, r3, #2
 800580a:	4413      	add	r3, r2
 800580c:	009b      	lsls	r3, r3, #2
 800580e:	4a1f      	ldr	r2, [pc, #124]	; (800588c <xTaskPriorityInherit+0xc8>)
 8005810:	4413      	add	r3, r2
 8005812:	4299      	cmp	r1, r3
 8005814:	d122      	bne.n	800585c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005816:	68bb      	ldr	r3, [r7, #8]
 8005818:	3304      	adds	r3, #4
 800581a:	4618      	mov	r0, r3
 800581c:	f7fe fa66 	bl	8003cec <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005820:	4b19      	ldr	r3, [pc, #100]	; (8005888 <xTaskPriorityInherit+0xc4>)
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005826:	68bb      	ldr	r3, [r7, #8]
 8005828:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800582a:	68bb      	ldr	r3, [r7, #8]
 800582c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800582e:	4b18      	ldr	r3, [pc, #96]	; (8005890 <xTaskPriorityInherit+0xcc>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	429a      	cmp	r2, r3
 8005834:	d903      	bls.n	800583e <xTaskPriorityInherit+0x7a>
 8005836:	68bb      	ldr	r3, [r7, #8]
 8005838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800583a:	4a15      	ldr	r2, [pc, #84]	; (8005890 <xTaskPriorityInherit+0xcc>)
 800583c:	6013      	str	r3, [r2, #0]
 800583e:	68bb      	ldr	r3, [r7, #8]
 8005840:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005842:	4613      	mov	r3, r2
 8005844:	009b      	lsls	r3, r3, #2
 8005846:	4413      	add	r3, r2
 8005848:	009b      	lsls	r3, r3, #2
 800584a:	4a10      	ldr	r2, [pc, #64]	; (800588c <xTaskPriorityInherit+0xc8>)
 800584c:	441a      	add	r2, r3
 800584e:	68bb      	ldr	r3, [r7, #8]
 8005850:	3304      	adds	r3, #4
 8005852:	4619      	mov	r1, r3
 8005854:	4610      	mov	r0, r2
 8005856:	f7fe f9ec 	bl	8003c32 <vListInsertEnd>
 800585a:	e004      	b.n	8005866 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800585c:	4b0a      	ldr	r3, [pc, #40]	; (8005888 <xTaskPriorityInherit+0xc4>)
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005862:	68bb      	ldr	r3, [r7, #8]
 8005864:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8005866:	2301      	movs	r3, #1
 8005868:	60fb      	str	r3, [r7, #12]
 800586a:	e008      	b.n	800587e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800586c:	68bb      	ldr	r3, [r7, #8]
 800586e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005870:	4b05      	ldr	r3, [pc, #20]	; (8005888 <xTaskPriorityInherit+0xc4>)
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005876:	429a      	cmp	r2, r3
 8005878:	d201      	bcs.n	800587e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800587a:	2301      	movs	r3, #1
 800587c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800587e:	68fb      	ldr	r3, [r7, #12]
	}
 8005880:	4618      	mov	r0, r3
 8005882:	3710      	adds	r7, #16
 8005884:	46bd      	mov	sp, r7
 8005886:	bd80      	pop	{r7, pc}
 8005888:	20000a18 	.word	0x20000a18
 800588c:	20000a1c 	.word	0x20000a1c
 8005890:	20000ef4 	.word	0x20000ef4

08005894 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005894:	b580      	push	{r7, lr}
 8005896:	b086      	sub	sp, #24
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80058a0:	2300      	movs	r3, #0
 80058a2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d056      	beq.n	8005958 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80058aa:	4b2e      	ldr	r3, [pc, #184]	; (8005964 <xTaskPriorityDisinherit+0xd0>)
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	693a      	ldr	r2, [r7, #16]
 80058b0:	429a      	cmp	r2, r3
 80058b2:	d00a      	beq.n	80058ca <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80058b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058b8:	f383 8811 	msr	BASEPRI, r3
 80058bc:	f3bf 8f6f 	isb	sy
 80058c0:	f3bf 8f4f 	dsb	sy
 80058c4:	60fb      	str	r3, [r7, #12]
}
 80058c6:	bf00      	nop
 80058c8:	e7fe      	b.n	80058c8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80058ca:	693b      	ldr	r3, [r7, #16]
 80058cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d10a      	bne.n	80058e8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80058d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058d6:	f383 8811 	msr	BASEPRI, r3
 80058da:	f3bf 8f6f 	isb	sy
 80058de:	f3bf 8f4f 	dsb	sy
 80058e2:	60bb      	str	r3, [r7, #8]
}
 80058e4:	bf00      	nop
 80058e6:	e7fe      	b.n	80058e6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80058e8:	693b      	ldr	r3, [r7, #16]
 80058ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058ec:	1e5a      	subs	r2, r3, #1
 80058ee:	693b      	ldr	r3, [r7, #16]
 80058f0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80058f2:	693b      	ldr	r3, [r7, #16]
 80058f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058f6:	693b      	ldr	r3, [r7, #16]
 80058f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058fa:	429a      	cmp	r2, r3
 80058fc:	d02c      	beq.n	8005958 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80058fe:	693b      	ldr	r3, [r7, #16]
 8005900:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005902:	2b00      	cmp	r3, #0
 8005904:	d128      	bne.n	8005958 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005906:	693b      	ldr	r3, [r7, #16]
 8005908:	3304      	adds	r3, #4
 800590a:	4618      	mov	r0, r3
 800590c:	f7fe f9ee 	bl	8003cec <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005910:	693b      	ldr	r3, [r7, #16]
 8005912:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005914:	693b      	ldr	r3, [r7, #16]
 8005916:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005918:	693b      	ldr	r3, [r7, #16]
 800591a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800591c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005920:	693b      	ldr	r3, [r7, #16]
 8005922:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005924:	693b      	ldr	r3, [r7, #16]
 8005926:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005928:	4b0f      	ldr	r3, [pc, #60]	; (8005968 <xTaskPriorityDisinherit+0xd4>)
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	429a      	cmp	r2, r3
 800592e:	d903      	bls.n	8005938 <xTaskPriorityDisinherit+0xa4>
 8005930:	693b      	ldr	r3, [r7, #16]
 8005932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005934:	4a0c      	ldr	r2, [pc, #48]	; (8005968 <xTaskPriorityDisinherit+0xd4>)
 8005936:	6013      	str	r3, [r2, #0]
 8005938:	693b      	ldr	r3, [r7, #16]
 800593a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800593c:	4613      	mov	r3, r2
 800593e:	009b      	lsls	r3, r3, #2
 8005940:	4413      	add	r3, r2
 8005942:	009b      	lsls	r3, r3, #2
 8005944:	4a09      	ldr	r2, [pc, #36]	; (800596c <xTaskPriorityDisinherit+0xd8>)
 8005946:	441a      	add	r2, r3
 8005948:	693b      	ldr	r3, [r7, #16]
 800594a:	3304      	adds	r3, #4
 800594c:	4619      	mov	r1, r3
 800594e:	4610      	mov	r0, r2
 8005950:	f7fe f96f 	bl	8003c32 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005954:	2301      	movs	r3, #1
 8005956:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005958:	697b      	ldr	r3, [r7, #20]
	}
 800595a:	4618      	mov	r0, r3
 800595c:	3718      	adds	r7, #24
 800595e:	46bd      	mov	sp, r7
 8005960:	bd80      	pop	{r7, pc}
 8005962:	bf00      	nop
 8005964:	20000a18 	.word	0x20000a18
 8005968:	20000ef4 	.word	0x20000ef4
 800596c:	20000a1c 	.word	0x20000a1c

08005970 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8005970:	b580      	push	{r7, lr}
 8005972:	b088      	sub	sp, #32
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
 8005978:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800597e:	2301      	movs	r3, #1
 8005980:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d06a      	beq.n	8005a5e <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8005988:	69bb      	ldr	r3, [r7, #24]
 800598a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800598c:	2b00      	cmp	r3, #0
 800598e:	d10a      	bne.n	80059a6 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8005990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005994:	f383 8811 	msr	BASEPRI, r3
 8005998:	f3bf 8f6f 	isb	sy
 800599c:	f3bf 8f4f 	dsb	sy
 80059a0:	60fb      	str	r3, [r7, #12]
}
 80059a2:	bf00      	nop
 80059a4:	e7fe      	b.n	80059a4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80059a6:	69bb      	ldr	r3, [r7, #24]
 80059a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059aa:	683a      	ldr	r2, [r7, #0]
 80059ac:	429a      	cmp	r2, r3
 80059ae:	d902      	bls.n	80059b6 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	61fb      	str	r3, [r7, #28]
 80059b4:	e002      	b.n	80059bc <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80059b6:	69bb      	ldr	r3, [r7, #24]
 80059b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059ba:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80059bc:	69bb      	ldr	r3, [r7, #24]
 80059be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059c0:	69fa      	ldr	r2, [r7, #28]
 80059c2:	429a      	cmp	r2, r3
 80059c4:	d04b      	beq.n	8005a5e <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80059c6:	69bb      	ldr	r3, [r7, #24]
 80059c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059ca:	697a      	ldr	r2, [r7, #20]
 80059cc:	429a      	cmp	r2, r3
 80059ce:	d146      	bne.n	8005a5e <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80059d0:	4b25      	ldr	r3, [pc, #148]	; (8005a68 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	69ba      	ldr	r2, [r7, #24]
 80059d6:	429a      	cmp	r2, r3
 80059d8:	d10a      	bne.n	80059f0 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80059da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059de:	f383 8811 	msr	BASEPRI, r3
 80059e2:	f3bf 8f6f 	isb	sy
 80059e6:	f3bf 8f4f 	dsb	sy
 80059ea:	60bb      	str	r3, [r7, #8]
}
 80059ec:	bf00      	nop
 80059ee:	e7fe      	b.n	80059ee <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80059f0:	69bb      	ldr	r3, [r7, #24]
 80059f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059f4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80059f6:	69bb      	ldr	r3, [r7, #24]
 80059f8:	69fa      	ldr	r2, [r7, #28]
 80059fa:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80059fc:	69bb      	ldr	r3, [r7, #24]
 80059fe:	699b      	ldr	r3, [r3, #24]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	db04      	blt.n	8005a0e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a04:	69fb      	ldr	r3, [r7, #28]
 8005a06:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005a0a:	69bb      	ldr	r3, [r7, #24]
 8005a0c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005a0e:	69bb      	ldr	r3, [r7, #24]
 8005a10:	6959      	ldr	r1, [r3, #20]
 8005a12:	693a      	ldr	r2, [r7, #16]
 8005a14:	4613      	mov	r3, r2
 8005a16:	009b      	lsls	r3, r3, #2
 8005a18:	4413      	add	r3, r2
 8005a1a:	009b      	lsls	r3, r3, #2
 8005a1c:	4a13      	ldr	r2, [pc, #76]	; (8005a6c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8005a1e:	4413      	add	r3, r2
 8005a20:	4299      	cmp	r1, r3
 8005a22:	d11c      	bne.n	8005a5e <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005a24:	69bb      	ldr	r3, [r7, #24]
 8005a26:	3304      	adds	r3, #4
 8005a28:	4618      	mov	r0, r3
 8005a2a:	f7fe f95f 	bl	8003cec <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8005a2e:	69bb      	ldr	r3, [r7, #24]
 8005a30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a32:	4b0f      	ldr	r3, [pc, #60]	; (8005a70 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	429a      	cmp	r2, r3
 8005a38:	d903      	bls.n	8005a42 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8005a3a:	69bb      	ldr	r3, [r7, #24]
 8005a3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a3e:	4a0c      	ldr	r2, [pc, #48]	; (8005a70 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8005a40:	6013      	str	r3, [r2, #0]
 8005a42:	69bb      	ldr	r3, [r7, #24]
 8005a44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a46:	4613      	mov	r3, r2
 8005a48:	009b      	lsls	r3, r3, #2
 8005a4a:	4413      	add	r3, r2
 8005a4c:	009b      	lsls	r3, r3, #2
 8005a4e:	4a07      	ldr	r2, [pc, #28]	; (8005a6c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8005a50:	441a      	add	r2, r3
 8005a52:	69bb      	ldr	r3, [r7, #24]
 8005a54:	3304      	adds	r3, #4
 8005a56:	4619      	mov	r1, r3
 8005a58:	4610      	mov	r0, r2
 8005a5a:	f7fe f8ea 	bl	8003c32 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005a5e:	bf00      	nop
 8005a60:	3720      	adds	r7, #32
 8005a62:	46bd      	mov	sp, r7
 8005a64:	bd80      	pop	{r7, pc}
 8005a66:	bf00      	nop
 8005a68:	20000a18 	.word	0x20000a18
 8005a6c:	20000a1c 	.word	0x20000a1c
 8005a70:	20000ef4 	.word	0x20000ef4

08005a74 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8005a74:	b480      	push	{r7}
 8005a76:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8005a78:	4b07      	ldr	r3, [pc, #28]	; (8005a98 <pvTaskIncrementMutexHeldCount+0x24>)
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d004      	beq.n	8005a8a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8005a80:	4b05      	ldr	r3, [pc, #20]	; (8005a98 <pvTaskIncrementMutexHeldCount+0x24>)
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005a86:	3201      	adds	r2, #1
 8005a88:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8005a8a:	4b03      	ldr	r3, [pc, #12]	; (8005a98 <pvTaskIncrementMutexHeldCount+0x24>)
 8005a8c:	681b      	ldr	r3, [r3, #0]
	}
 8005a8e:	4618      	mov	r0, r3
 8005a90:	46bd      	mov	sp, r7
 8005a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a96:	4770      	bx	lr
 8005a98:	20000a18 	.word	0x20000a18

08005a9c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b084      	sub	sp, #16
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
 8005aa4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005aa6:	4b21      	ldr	r3, [pc, #132]	; (8005b2c <prvAddCurrentTaskToDelayedList+0x90>)
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005aac:	4b20      	ldr	r3, [pc, #128]	; (8005b30 <prvAddCurrentTaskToDelayedList+0x94>)
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	3304      	adds	r3, #4
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	f7fe f91a 	bl	8003cec <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005abe:	d10a      	bne.n	8005ad6 <prvAddCurrentTaskToDelayedList+0x3a>
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d007      	beq.n	8005ad6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005ac6:	4b1a      	ldr	r3, [pc, #104]	; (8005b30 <prvAddCurrentTaskToDelayedList+0x94>)
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	3304      	adds	r3, #4
 8005acc:	4619      	mov	r1, r3
 8005ace:	4819      	ldr	r0, [pc, #100]	; (8005b34 <prvAddCurrentTaskToDelayedList+0x98>)
 8005ad0:	f7fe f8af 	bl	8003c32 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005ad4:	e026      	b.n	8005b24 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005ad6:	68fa      	ldr	r2, [r7, #12]
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	4413      	add	r3, r2
 8005adc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005ade:	4b14      	ldr	r3, [pc, #80]	; (8005b30 <prvAddCurrentTaskToDelayedList+0x94>)
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	68ba      	ldr	r2, [r7, #8]
 8005ae4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005ae6:	68ba      	ldr	r2, [r7, #8]
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	429a      	cmp	r2, r3
 8005aec:	d209      	bcs.n	8005b02 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005aee:	4b12      	ldr	r3, [pc, #72]	; (8005b38 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005af0:	681a      	ldr	r2, [r3, #0]
 8005af2:	4b0f      	ldr	r3, [pc, #60]	; (8005b30 <prvAddCurrentTaskToDelayedList+0x94>)
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	3304      	adds	r3, #4
 8005af8:	4619      	mov	r1, r3
 8005afa:	4610      	mov	r0, r2
 8005afc:	f7fe f8bd 	bl	8003c7a <vListInsert>
}
 8005b00:	e010      	b.n	8005b24 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005b02:	4b0e      	ldr	r3, [pc, #56]	; (8005b3c <prvAddCurrentTaskToDelayedList+0xa0>)
 8005b04:	681a      	ldr	r2, [r3, #0]
 8005b06:	4b0a      	ldr	r3, [pc, #40]	; (8005b30 <prvAddCurrentTaskToDelayedList+0x94>)
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	3304      	adds	r3, #4
 8005b0c:	4619      	mov	r1, r3
 8005b0e:	4610      	mov	r0, r2
 8005b10:	f7fe f8b3 	bl	8003c7a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005b14:	4b0a      	ldr	r3, [pc, #40]	; (8005b40 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	68ba      	ldr	r2, [r7, #8]
 8005b1a:	429a      	cmp	r2, r3
 8005b1c:	d202      	bcs.n	8005b24 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005b1e:	4a08      	ldr	r2, [pc, #32]	; (8005b40 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005b20:	68bb      	ldr	r3, [r7, #8]
 8005b22:	6013      	str	r3, [r2, #0]
}
 8005b24:	bf00      	nop
 8005b26:	3710      	adds	r7, #16
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	bd80      	pop	{r7, pc}
 8005b2c:	20000ef0 	.word	0x20000ef0
 8005b30:	20000a18 	.word	0x20000a18
 8005b34:	20000ed8 	.word	0x20000ed8
 8005b38:	20000ea8 	.word	0x20000ea8
 8005b3c:	20000ea4 	.word	0x20000ea4
 8005b40:	20000f0c 	.word	0x20000f0c

08005b44 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b08a      	sub	sp, #40	; 0x28
 8005b48:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005b4e:	f000 fba1 	bl	8006294 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005b52:	4b1c      	ldr	r3, [pc, #112]	; (8005bc4 <xTimerCreateTimerTask+0x80>)
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d021      	beq.n	8005b9e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005b5e:	2300      	movs	r3, #0
 8005b60:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005b62:	1d3a      	adds	r2, r7, #4
 8005b64:	f107 0108 	add.w	r1, r7, #8
 8005b68:	f107 030c 	add.w	r3, r7, #12
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	f7fe f819 	bl	8003ba4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005b72:	6879      	ldr	r1, [r7, #4]
 8005b74:	68bb      	ldr	r3, [r7, #8]
 8005b76:	68fa      	ldr	r2, [r7, #12]
 8005b78:	9202      	str	r2, [sp, #8]
 8005b7a:	9301      	str	r3, [sp, #4]
 8005b7c:	2328      	movs	r3, #40	; 0x28
 8005b7e:	9300      	str	r3, [sp, #0]
 8005b80:	2300      	movs	r3, #0
 8005b82:	460a      	mov	r2, r1
 8005b84:	4910      	ldr	r1, [pc, #64]	; (8005bc8 <xTimerCreateTimerTask+0x84>)
 8005b86:	4811      	ldr	r0, [pc, #68]	; (8005bcc <xTimerCreateTimerTask+0x88>)
 8005b88:	f7fe ffda 	bl	8004b40 <xTaskCreateStatic>
 8005b8c:	4603      	mov	r3, r0
 8005b8e:	4a10      	ldr	r2, [pc, #64]	; (8005bd0 <xTimerCreateTimerTask+0x8c>)
 8005b90:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005b92:	4b0f      	ldr	r3, [pc, #60]	; (8005bd0 <xTimerCreateTimerTask+0x8c>)
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d001      	beq.n	8005b9e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005b9a:	2301      	movs	r3, #1
 8005b9c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005b9e:	697b      	ldr	r3, [r7, #20]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d10a      	bne.n	8005bba <xTimerCreateTimerTask+0x76>
	__asm volatile
 8005ba4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ba8:	f383 8811 	msr	BASEPRI, r3
 8005bac:	f3bf 8f6f 	isb	sy
 8005bb0:	f3bf 8f4f 	dsb	sy
 8005bb4:	613b      	str	r3, [r7, #16]
}
 8005bb6:	bf00      	nop
 8005bb8:	e7fe      	b.n	8005bb8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005bba:	697b      	ldr	r3, [r7, #20]
}
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	3718      	adds	r7, #24
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	bd80      	pop	{r7, pc}
 8005bc4:	20000f48 	.word	0x20000f48
 8005bc8:	080080c4 	.word	0x080080c4
 8005bcc:	08005e3d 	.word	0x08005e3d
 8005bd0:	20000f4c 	.word	0x20000f4c

08005bd4 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b088      	sub	sp, #32
 8005bd8:	af02      	add	r7, sp, #8
 8005bda:	60f8      	str	r0, [r7, #12]
 8005bdc:	60b9      	str	r1, [r7, #8]
 8005bde:	607a      	str	r2, [r7, #4]
 8005be0:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8005be2:	202c      	movs	r0, #44	; 0x2c
 8005be4:	f000 fe08 	bl	80067f8 <pvPortMalloc>
 8005be8:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8005bea:	697b      	ldr	r3, [r7, #20]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d00d      	beq.n	8005c0c <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8005bf0:	697b      	ldr	r3, [r7, #20]
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8005bf8:	697b      	ldr	r3, [r7, #20]
 8005bfa:	9301      	str	r3, [sp, #4]
 8005bfc:	6a3b      	ldr	r3, [r7, #32]
 8005bfe:	9300      	str	r3, [sp, #0]
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	687a      	ldr	r2, [r7, #4]
 8005c04:	68b9      	ldr	r1, [r7, #8]
 8005c06:	68f8      	ldr	r0, [r7, #12]
 8005c08:	f000 f843 	bl	8005c92 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8005c0c:	697b      	ldr	r3, [r7, #20]
	}
 8005c0e:	4618      	mov	r0, r3
 8005c10:	3718      	adds	r7, #24
 8005c12:	46bd      	mov	sp, r7
 8005c14:	bd80      	pop	{r7, pc}

08005c16 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 8005c16:	b580      	push	{r7, lr}
 8005c18:	b08a      	sub	sp, #40	; 0x28
 8005c1a:	af02      	add	r7, sp, #8
 8005c1c:	60f8      	str	r0, [r7, #12]
 8005c1e:	60b9      	str	r1, [r7, #8]
 8005c20:	607a      	str	r2, [r7, #4]
 8005c22:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8005c24:	232c      	movs	r3, #44	; 0x2c
 8005c26:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8005c28:	693b      	ldr	r3, [r7, #16]
 8005c2a:	2b2c      	cmp	r3, #44	; 0x2c
 8005c2c:	d00a      	beq.n	8005c44 <xTimerCreateStatic+0x2e>
	__asm volatile
 8005c2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c32:	f383 8811 	msr	BASEPRI, r3
 8005c36:	f3bf 8f6f 	isb	sy
 8005c3a:	f3bf 8f4f 	dsb	sy
 8005c3e:	61bb      	str	r3, [r7, #24]
}
 8005c40:	bf00      	nop
 8005c42:	e7fe      	b.n	8005c42 <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005c44:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 8005c46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d10a      	bne.n	8005c62 <xTimerCreateStatic+0x4c>
	__asm volatile
 8005c4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c50:	f383 8811 	msr	BASEPRI, r3
 8005c54:	f3bf 8f6f 	isb	sy
 8005c58:	f3bf 8f4f 	dsb	sy
 8005c5c:	617b      	str	r3, [r7, #20]
}
 8005c5e:	bf00      	nop
 8005c60:	e7fe      	b.n	8005c60 <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 8005c62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c64:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 8005c66:	69fb      	ldr	r3, [r7, #28]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d00d      	beq.n	8005c88 <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 8005c6c:	69fb      	ldr	r3, [r7, #28]
 8005c6e:	2202      	movs	r2, #2
 8005c70:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8005c74:	69fb      	ldr	r3, [r7, #28]
 8005c76:	9301      	str	r3, [sp, #4]
 8005c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c7a:	9300      	str	r3, [sp, #0]
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	687a      	ldr	r2, [r7, #4]
 8005c80:	68b9      	ldr	r1, [r7, #8]
 8005c82:	68f8      	ldr	r0, [r7, #12]
 8005c84:	f000 f805 	bl	8005c92 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8005c88:	69fb      	ldr	r3, [r7, #28]
	}
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	3720      	adds	r7, #32
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	bd80      	pop	{r7, pc}

08005c92 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8005c92:	b580      	push	{r7, lr}
 8005c94:	b086      	sub	sp, #24
 8005c96:	af00      	add	r7, sp, #0
 8005c98:	60f8      	str	r0, [r7, #12]
 8005c9a:	60b9      	str	r1, [r7, #8]
 8005c9c:	607a      	str	r2, [r7, #4]
 8005c9e:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8005ca0:	68bb      	ldr	r3, [r7, #8]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d10a      	bne.n	8005cbc <prvInitialiseNewTimer+0x2a>
	__asm volatile
 8005ca6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005caa:	f383 8811 	msr	BASEPRI, r3
 8005cae:	f3bf 8f6f 	isb	sy
 8005cb2:	f3bf 8f4f 	dsb	sy
 8005cb6:	617b      	str	r3, [r7, #20]
}
 8005cb8:	bf00      	nop
 8005cba:	e7fe      	b.n	8005cba <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8005cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d01e      	beq.n	8005d00 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8005cc2:	f000 fae7 	bl	8006294 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8005cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cc8:	68fa      	ldr	r2, [r7, #12]
 8005cca:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8005ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cce:	68ba      	ldr	r2, [r7, #8]
 8005cd0:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8005cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cd4:	683a      	ldr	r2, [r7, #0]
 8005cd6:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8005cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cda:	6a3a      	ldr	r2, [r7, #32]
 8005cdc:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8005cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ce0:	3304      	adds	r3, #4
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	f7fd ff98 	bl	8003c18 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d008      	beq.n	8005d00 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8005cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cf0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005cf4:	f043 0304 	orr.w	r3, r3, #4
 8005cf8:	b2da      	uxtb	r2, r3
 8005cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cfc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8005d00:	bf00      	nop
 8005d02:	3718      	adds	r7, #24
 8005d04:	46bd      	mov	sp, r7
 8005d06:	bd80      	pop	{r7, pc}

08005d08 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b08a      	sub	sp, #40	; 0x28
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	60f8      	str	r0, [r7, #12]
 8005d10:	60b9      	str	r1, [r7, #8]
 8005d12:	607a      	str	r2, [r7, #4]
 8005d14:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005d16:	2300      	movs	r3, #0
 8005d18:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d10a      	bne.n	8005d36 <xTimerGenericCommand+0x2e>
	__asm volatile
 8005d20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d24:	f383 8811 	msr	BASEPRI, r3
 8005d28:	f3bf 8f6f 	isb	sy
 8005d2c:	f3bf 8f4f 	dsb	sy
 8005d30:	623b      	str	r3, [r7, #32]
}
 8005d32:	bf00      	nop
 8005d34:	e7fe      	b.n	8005d34 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005d36:	4b1a      	ldr	r3, [pc, #104]	; (8005da0 <xTimerGenericCommand+0x98>)
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d02a      	beq.n	8005d94 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005d3e:	68bb      	ldr	r3, [r7, #8]
 8005d40:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005d4a:	68bb      	ldr	r3, [r7, #8]
 8005d4c:	2b05      	cmp	r3, #5
 8005d4e:	dc18      	bgt.n	8005d82 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005d50:	f7ff fd1a 	bl	8005788 <xTaskGetSchedulerState>
 8005d54:	4603      	mov	r3, r0
 8005d56:	2b02      	cmp	r3, #2
 8005d58:	d109      	bne.n	8005d6e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005d5a:	4b11      	ldr	r3, [pc, #68]	; (8005da0 <xTimerGenericCommand+0x98>)
 8005d5c:	6818      	ldr	r0, [r3, #0]
 8005d5e:	f107 0110 	add.w	r1, r7, #16
 8005d62:	2300      	movs	r3, #0
 8005d64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d66:	f7fe f9df 	bl	8004128 <xQueueGenericSend>
 8005d6a:	6278      	str	r0, [r7, #36]	; 0x24
 8005d6c:	e012      	b.n	8005d94 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005d6e:	4b0c      	ldr	r3, [pc, #48]	; (8005da0 <xTimerGenericCommand+0x98>)
 8005d70:	6818      	ldr	r0, [r3, #0]
 8005d72:	f107 0110 	add.w	r1, r7, #16
 8005d76:	2300      	movs	r3, #0
 8005d78:	2200      	movs	r2, #0
 8005d7a:	f7fe f9d5 	bl	8004128 <xQueueGenericSend>
 8005d7e:	6278      	str	r0, [r7, #36]	; 0x24
 8005d80:	e008      	b.n	8005d94 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005d82:	4b07      	ldr	r3, [pc, #28]	; (8005da0 <xTimerGenericCommand+0x98>)
 8005d84:	6818      	ldr	r0, [r3, #0]
 8005d86:	f107 0110 	add.w	r1, r7, #16
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	683a      	ldr	r2, [r7, #0]
 8005d8e:	f7fe fac9 	bl	8004324 <xQueueGenericSendFromISR>
 8005d92:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005d96:	4618      	mov	r0, r3
 8005d98:	3728      	adds	r7, #40	; 0x28
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	bd80      	pop	{r7, pc}
 8005d9e:	bf00      	nop
 8005da0:	20000f48 	.word	0x20000f48

08005da4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005da4:	b580      	push	{r7, lr}
 8005da6:	b088      	sub	sp, #32
 8005da8:	af02      	add	r7, sp, #8
 8005daa:	6078      	str	r0, [r7, #4]
 8005dac:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005dae:	4b22      	ldr	r3, [pc, #136]	; (8005e38 <prvProcessExpiredTimer+0x94>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	68db      	ldr	r3, [r3, #12]
 8005db4:	68db      	ldr	r3, [r3, #12]
 8005db6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005db8:	697b      	ldr	r3, [r7, #20]
 8005dba:	3304      	adds	r3, #4
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	f7fd ff95 	bl	8003cec <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005dc2:	697b      	ldr	r3, [r7, #20]
 8005dc4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005dc8:	f003 0304 	and.w	r3, r3, #4
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d022      	beq.n	8005e16 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005dd0:	697b      	ldr	r3, [r7, #20]
 8005dd2:	699a      	ldr	r2, [r3, #24]
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	18d1      	adds	r1, r2, r3
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	683a      	ldr	r2, [r7, #0]
 8005ddc:	6978      	ldr	r0, [r7, #20]
 8005dde:	f000 f8d1 	bl	8005f84 <prvInsertTimerInActiveList>
 8005de2:	4603      	mov	r3, r0
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d01f      	beq.n	8005e28 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005de8:	2300      	movs	r3, #0
 8005dea:	9300      	str	r3, [sp, #0]
 8005dec:	2300      	movs	r3, #0
 8005dee:	687a      	ldr	r2, [r7, #4]
 8005df0:	2100      	movs	r1, #0
 8005df2:	6978      	ldr	r0, [r7, #20]
 8005df4:	f7ff ff88 	bl	8005d08 <xTimerGenericCommand>
 8005df8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005dfa:	693b      	ldr	r3, [r7, #16]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d113      	bne.n	8005e28 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8005e00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e04:	f383 8811 	msr	BASEPRI, r3
 8005e08:	f3bf 8f6f 	isb	sy
 8005e0c:	f3bf 8f4f 	dsb	sy
 8005e10:	60fb      	str	r3, [r7, #12]
}
 8005e12:	bf00      	nop
 8005e14:	e7fe      	b.n	8005e14 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005e16:	697b      	ldr	r3, [r7, #20]
 8005e18:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005e1c:	f023 0301 	bic.w	r3, r3, #1
 8005e20:	b2da      	uxtb	r2, r3
 8005e22:	697b      	ldr	r3, [r7, #20]
 8005e24:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005e28:	697b      	ldr	r3, [r7, #20]
 8005e2a:	6a1b      	ldr	r3, [r3, #32]
 8005e2c:	6978      	ldr	r0, [r7, #20]
 8005e2e:	4798      	blx	r3
}
 8005e30:	bf00      	nop
 8005e32:	3718      	adds	r7, #24
 8005e34:	46bd      	mov	sp, r7
 8005e36:	bd80      	pop	{r7, pc}
 8005e38:	20000f40 	.word	0x20000f40

08005e3c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b084      	sub	sp, #16
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005e44:	f107 0308 	add.w	r3, r7, #8
 8005e48:	4618      	mov	r0, r3
 8005e4a:	f000 f857 	bl	8005efc <prvGetNextExpireTime>
 8005e4e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	4619      	mov	r1, r3
 8005e54:	68f8      	ldr	r0, [r7, #12]
 8005e56:	f000 f803 	bl	8005e60 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005e5a:	f000 f8d5 	bl	8006008 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005e5e:	e7f1      	b.n	8005e44 <prvTimerTask+0x8>

08005e60 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b084      	sub	sp, #16
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
 8005e68:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005e6a:	f7ff f891 	bl	8004f90 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005e6e:	f107 0308 	add.w	r3, r7, #8
 8005e72:	4618      	mov	r0, r3
 8005e74:	f000 f866 	bl	8005f44 <prvSampleTimeNow>
 8005e78:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005e7a:	68bb      	ldr	r3, [r7, #8]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d130      	bne.n	8005ee2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d10a      	bne.n	8005e9c <prvProcessTimerOrBlockTask+0x3c>
 8005e86:	687a      	ldr	r2, [r7, #4]
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	429a      	cmp	r2, r3
 8005e8c:	d806      	bhi.n	8005e9c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005e8e:	f7ff f88d 	bl	8004fac <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005e92:	68f9      	ldr	r1, [r7, #12]
 8005e94:	6878      	ldr	r0, [r7, #4]
 8005e96:	f7ff ff85 	bl	8005da4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005e9a:	e024      	b.n	8005ee6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d008      	beq.n	8005eb4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005ea2:	4b13      	ldr	r3, [pc, #76]	; (8005ef0 <prvProcessTimerOrBlockTask+0x90>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d101      	bne.n	8005eb0 <prvProcessTimerOrBlockTask+0x50>
 8005eac:	2301      	movs	r3, #1
 8005eae:	e000      	b.n	8005eb2 <prvProcessTimerOrBlockTask+0x52>
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005eb4:	4b0f      	ldr	r3, [pc, #60]	; (8005ef4 <prvProcessTimerOrBlockTask+0x94>)
 8005eb6:	6818      	ldr	r0, [r3, #0]
 8005eb8:	687a      	ldr	r2, [r7, #4]
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	1ad3      	subs	r3, r2, r3
 8005ebe:	683a      	ldr	r2, [r7, #0]
 8005ec0:	4619      	mov	r1, r3
 8005ec2:	f7fe fe09 	bl	8004ad8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005ec6:	f7ff f871 	bl	8004fac <xTaskResumeAll>
 8005eca:	4603      	mov	r3, r0
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d10a      	bne.n	8005ee6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005ed0:	4b09      	ldr	r3, [pc, #36]	; (8005ef8 <prvProcessTimerOrBlockTask+0x98>)
 8005ed2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ed6:	601a      	str	r2, [r3, #0]
 8005ed8:	f3bf 8f4f 	dsb	sy
 8005edc:	f3bf 8f6f 	isb	sy
}
 8005ee0:	e001      	b.n	8005ee6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005ee2:	f7ff f863 	bl	8004fac <xTaskResumeAll>
}
 8005ee6:	bf00      	nop
 8005ee8:	3710      	adds	r7, #16
 8005eea:	46bd      	mov	sp, r7
 8005eec:	bd80      	pop	{r7, pc}
 8005eee:	bf00      	nop
 8005ef0:	20000f44 	.word	0x20000f44
 8005ef4:	20000f48 	.word	0x20000f48
 8005ef8:	e000ed04 	.word	0xe000ed04

08005efc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005efc:	b480      	push	{r7}
 8005efe:	b085      	sub	sp, #20
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005f04:	4b0e      	ldr	r3, [pc, #56]	; (8005f40 <prvGetNextExpireTime+0x44>)
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d101      	bne.n	8005f12 <prvGetNextExpireTime+0x16>
 8005f0e:	2201      	movs	r2, #1
 8005f10:	e000      	b.n	8005f14 <prvGetNextExpireTime+0x18>
 8005f12:	2200      	movs	r2, #0
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d105      	bne.n	8005f2c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005f20:	4b07      	ldr	r3, [pc, #28]	; (8005f40 <prvGetNextExpireTime+0x44>)
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	68db      	ldr	r3, [r3, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	60fb      	str	r3, [r7, #12]
 8005f2a:	e001      	b.n	8005f30 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005f30:	68fb      	ldr	r3, [r7, #12]
}
 8005f32:	4618      	mov	r0, r3
 8005f34:	3714      	adds	r7, #20
 8005f36:	46bd      	mov	sp, r7
 8005f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3c:	4770      	bx	lr
 8005f3e:	bf00      	nop
 8005f40:	20000f40 	.word	0x20000f40

08005f44 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005f44:	b580      	push	{r7, lr}
 8005f46:	b084      	sub	sp, #16
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005f4c:	f7ff f8cc 	bl	80050e8 <xTaskGetTickCount>
 8005f50:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005f52:	4b0b      	ldr	r3, [pc, #44]	; (8005f80 <prvSampleTimeNow+0x3c>)
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	68fa      	ldr	r2, [r7, #12]
 8005f58:	429a      	cmp	r2, r3
 8005f5a:	d205      	bcs.n	8005f68 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005f5c:	f000 f936 	bl	80061cc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2201      	movs	r2, #1
 8005f64:	601a      	str	r2, [r3, #0]
 8005f66:	e002      	b.n	8005f6e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005f6e:	4a04      	ldr	r2, [pc, #16]	; (8005f80 <prvSampleTimeNow+0x3c>)
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005f74:	68fb      	ldr	r3, [r7, #12]
}
 8005f76:	4618      	mov	r0, r3
 8005f78:	3710      	adds	r7, #16
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	bd80      	pop	{r7, pc}
 8005f7e:	bf00      	nop
 8005f80:	20000f50 	.word	0x20000f50

08005f84 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b086      	sub	sp, #24
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	60f8      	str	r0, [r7, #12]
 8005f8c:	60b9      	str	r1, [r7, #8]
 8005f8e:	607a      	str	r2, [r7, #4]
 8005f90:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005f92:	2300      	movs	r3, #0
 8005f94:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	68ba      	ldr	r2, [r7, #8]
 8005f9a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	68fa      	ldr	r2, [r7, #12]
 8005fa0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005fa2:	68ba      	ldr	r2, [r7, #8]
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	429a      	cmp	r2, r3
 8005fa8:	d812      	bhi.n	8005fd0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005faa:	687a      	ldr	r2, [r7, #4]
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	1ad2      	subs	r2, r2, r3
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	699b      	ldr	r3, [r3, #24]
 8005fb4:	429a      	cmp	r2, r3
 8005fb6:	d302      	bcc.n	8005fbe <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005fb8:	2301      	movs	r3, #1
 8005fba:	617b      	str	r3, [r7, #20]
 8005fbc:	e01b      	b.n	8005ff6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005fbe:	4b10      	ldr	r3, [pc, #64]	; (8006000 <prvInsertTimerInActiveList+0x7c>)
 8005fc0:	681a      	ldr	r2, [r3, #0]
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	3304      	adds	r3, #4
 8005fc6:	4619      	mov	r1, r3
 8005fc8:	4610      	mov	r0, r2
 8005fca:	f7fd fe56 	bl	8003c7a <vListInsert>
 8005fce:	e012      	b.n	8005ff6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005fd0:	687a      	ldr	r2, [r7, #4]
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	429a      	cmp	r2, r3
 8005fd6:	d206      	bcs.n	8005fe6 <prvInsertTimerInActiveList+0x62>
 8005fd8:	68ba      	ldr	r2, [r7, #8]
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	429a      	cmp	r2, r3
 8005fde:	d302      	bcc.n	8005fe6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005fe0:	2301      	movs	r3, #1
 8005fe2:	617b      	str	r3, [r7, #20]
 8005fe4:	e007      	b.n	8005ff6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005fe6:	4b07      	ldr	r3, [pc, #28]	; (8006004 <prvInsertTimerInActiveList+0x80>)
 8005fe8:	681a      	ldr	r2, [r3, #0]
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	3304      	adds	r3, #4
 8005fee:	4619      	mov	r1, r3
 8005ff0:	4610      	mov	r0, r2
 8005ff2:	f7fd fe42 	bl	8003c7a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005ff6:	697b      	ldr	r3, [r7, #20]
}
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	3718      	adds	r7, #24
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	bd80      	pop	{r7, pc}
 8006000:	20000f44 	.word	0x20000f44
 8006004:	20000f40 	.word	0x20000f40

08006008 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b08e      	sub	sp, #56	; 0x38
 800600c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800600e:	e0ca      	b.n	80061a6 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2b00      	cmp	r3, #0
 8006014:	da18      	bge.n	8006048 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006016:	1d3b      	adds	r3, r7, #4
 8006018:	3304      	adds	r3, #4
 800601a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800601c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800601e:	2b00      	cmp	r3, #0
 8006020:	d10a      	bne.n	8006038 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8006022:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006026:	f383 8811 	msr	BASEPRI, r3
 800602a:	f3bf 8f6f 	isb	sy
 800602e:	f3bf 8f4f 	dsb	sy
 8006032:	61fb      	str	r3, [r7, #28]
}
 8006034:	bf00      	nop
 8006036:	e7fe      	b.n	8006036 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800603e:	6850      	ldr	r0, [r2, #4]
 8006040:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006042:	6892      	ldr	r2, [r2, #8]
 8006044:	4611      	mov	r1, r2
 8006046:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2b00      	cmp	r3, #0
 800604c:	f2c0 80aa 	blt.w	80061a4 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006056:	695b      	ldr	r3, [r3, #20]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d004      	beq.n	8006066 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800605c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800605e:	3304      	adds	r3, #4
 8006060:	4618      	mov	r0, r3
 8006062:	f7fd fe43 	bl	8003cec <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006066:	463b      	mov	r3, r7
 8006068:	4618      	mov	r0, r3
 800606a:	f7ff ff6b 	bl	8005f44 <prvSampleTimeNow>
 800606e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2b09      	cmp	r3, #9
 8006074:	f200 8097 	bhi.w	80061a6 <prvProcessReceivedCommands+0x19e>
 8006078:	a201      	add	r2, pc, #4	; (adr r2, 8006080 <prvProcessReceivedCommands+0x78>)
 800607a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800607e:	bf00      	nop
 8006080:	080060a9 	.word	0x080060a9
 8006084:	080060a9 	.word	0x080060a9
 8006088:	080060a9 	.word	0x080060a9
 800608c:	0800611d 	.word	0x0800611d
 8006090:	08006131 	.word	0x08006131
 8006094:	0800617b 	.word	0x0800617b
 8006098:	080060a9 	.word	0x080060a9
 800609c:	080060a9 	.word	0x080060a9
 80060a0:	0800611d 	.word	0x0800611d
 80060a4:	08006131 	.word	0x08006131
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80060a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80060ae:	f043 0301 	orr.w	r3, r3, #1
 80060b2:	b2da      	uxtb	r2, r3
 80060b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80060ba:	68ba      	ldr	r2, [r7, #8]
 80060bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060be:	699b      	ldr	r3, [r3, #24]
 80060c0:	18d1      	adds	r1, r2, r3
 80060c2:	68bb      	ldr	r3, [r7, #8]
 80060c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80060c8:	f7ff ff5c 	bl	8005f84 <prvInsertTimerInActiveList>
 80060cc:	4603      	mov	r3, r0
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d069      	beq.n	80061a6 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80060d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060d4:	6a1b      	ldr	r3, [r3, #32]
 80060d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80060d8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80060da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80060e0:	f003 0304 	and.w	r3, r3, #4
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d05e      	beq.n	80061a6 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80060e8:	68ba      	ldr	r2, [r7, #8]
 80060ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060ec:	699b      	ldr	r3, [r3, #24]
 80060ee:	441a      	add	r2, r3
 80060f0:	2300      	movs	r3, #0
 80060f2:	9300      	str	r3, [sp, #0]
 80060f4:	2300      	movs	r3, #0
 80060f6:	2100      	movs	r1, #0
 80060f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80060fa:	f7ff fe05 	bl	8005d08 <xTimerGenericCommand>
 80060fe:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006100:	6a3b      	ldr	r3, [r7, #32]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d14f      	bne.n	80061a6 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8006106:	f04f 0350 	mov.w	r3, #80	; 0x50
 800610a:	f383 8811 	msr	BASEPRI, r3
 800610e:	f3bf 8f6f 	isb	sy
 8006112:	f3bf 8f4f 	dsb	sy
 8006116:	61bb      	str	r3, [r7, #24]
}
 8006118:	bf00      	nop
 800611a:	e7fe      	b.n	800611a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800611c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800611e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006122:	f023 0301 	bic.w	r3, r3, #1
 8006126:	b2da      	uxtb	r2, r3
 8006128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800612a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800612e:	e03a      	b.n	80061a6 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006132:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006136:	f043 0301 	orr.w	r3, r3, #1
 800613a:	b2da      	uxtb	r2, r3
 800613c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800613e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006142:	68ba      	ldr	r2, [r7, #8]
 8006144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006146:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800614a:	699b      	ldr	r3, [r3, #24]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d10a      	bne.n	8006166 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8006150:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006154:	f383 8811 	msr	BASEPRI, r3
 8006158:	f3bf 8f6f 	isb	sy
 800615c:	f3bf 8f4f 	dsb	sy
 8006160:	617b      	str	r3, [r7, #20]
}
 8006162:	bf00      	nop
 8006164:	e7fe      	b.n	8006164 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006168:	699a      	ldr	r2, [r3, #24]
 800616a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800616c:	18d1      	adds	r1, r2, r3
 800616e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006170:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006172:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006174:	f7ff ff06 	bl	8005f84 <prvInsertTimerInActiveList>
					break;
 8006178:	e015      	b.n	80061a6 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800617a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800617c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006180:	f003 0302 	and.w	r3, r3, #2
 8006184:	2b00      	cmp	r3, #0
 8006186:	d103      	bne.n	8006190 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8006188:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800618a:	f000 fc01 	bl	8006990 <vPortFree>
 800618e:	e00a      	b.n	80061a6 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006192:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006196:	f023 0301 	bic.w	r3, r3, #1
 800619a:	b2da      	uxtb	r2, r3
 800619c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800619e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80061a2:	e000      	b.n	80061a6 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80061a4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80061a6:	4b08      	ldr	r3, [pc, #32]	; (80061c8 <prvProcessReceivedCommands+0x1c0>)
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	1d39      	adds	r1, r7, #4
 80061ac:	2200      	movs	r2, #0
 80061ae:	4618      	mov	r0, r3
 80061b0:	f7fe f954 	bl	800445c <xQueueReceive>
 80061b4:	4603      	mov	r3, r0
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	f47f af2a 	bne.w	8006010 <prvProcessReceivedCommands+0x8>
	}
}
 80061bc:	bf00      	nop
 80061be:	bf00      	nop
 80061c0:	3730      	adds	r7, #48	; 0x30
 80061c2:	46bd      	mov	sp, r7
 80061c4:	bd80      	pop	{r7, pc}
 80061c6:	bf00      	nop
 80061c8:	20000f48 	.word	0x20000f48

080061cc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b088      	sub	sp, #32
 80061d0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80061d2:	e048      	b.n	8006266 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80061d4:	4b2d      	ldr	r3, [pc, #180]	; (800628c <prvSwitchTimerLists+0xc0>)
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	68db      	ldr	r3, [r3, #12]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80061de:	4b2b      	ldr	r3, [pc, #172]	; (800628c <prvSwitchTimerLists+0xc0>)
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	68db      	ldr	r3, [r3, #12]
 80061e4:	68db      	ldr	r3, [r3, #12]
 80061e6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	3304      	adds	r3, #4
 80061ec:	4618      	mov	r0, r3
 80061ee:	f7fd fd7d 	bl	8003cec <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	6a1b      	ldr	r3, [r3, #32]
 80061f6:	68f8      	ldr	r0, [r7, #12]
 80061f8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006200:	f003 0304 	and.w	r3, r3, #4
 8006204:	2b00      	cmp	r3, #0
 8006206:	d02e      	beq.n	8006266 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	699b      	ldr	r3, [r3, #24]
 800620c:	693a      	ldr	r2, [r7, #16]
 800620e:	4413      	add	r3, r2
 8006210:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006212:	68ba      	ldr	r2, [r7, #8]
 8006214:	693b      	ldr	r3, [r7, #16]
 8006216:	429a      	cmp	r2, r3
 8006218:	d90e      	bls.n	8006238 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	68ba      	ldr	r2, [r7, #8]
 800621e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	68fa      	ldr	r2, [r7, #12]
 8006224:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006226:	4b19      	ldr	r3, [pc, #100]	; (800628c <prvSwitchTimerLists+0xc0>)
 8006228:	681a      	ldr	r2, [r3, #0]
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	3304      	adds	r3, #4
 800622e:	4619      	mov	r1, r3
 8006230:	4610      	mov	r0, r2
 8006232:	f7fd fd22 	bl	8003c7a <vListInsert>
 8006236:	e016      	b.n	8006266 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006238:	2300      	movs	r3, #0
 800623a:	9300      	str	r3, [sp, #0]
 800623c:	2300      	movs	r3, #0
 800623e:	693a      	ldr	r2, [r7, #16]
 8006240:	2100      	movs	r1, #0
 8006242:	68f8      	ldr	r0, [r7, #12]
 8006244:	f7ff fd60 	bl	8005d08 <xTimerGenericCommand>
 8006248:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d10a      	bne.n	8006266 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8006250:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006254:	f383 8811 	msr	BASEPRI, r3
 8006258:	f3bf 8f6f 	isb	sy
 800625c:	f3bf 8f4f 	dsb	sy
 8006260:	603b      	str	r3, [r7, #0]
}
 8006262:	bf00      	nop
 8006264:	e7fe      	b.n	8006264 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006266:	4b09      	ldr	r3, [pc, #36]	; (800628c <prvSwitchTimerLists+0xc0>)
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d1b1      	bne.n	80061d4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006270:	4b06      	ldr	r3, [pc, #24]	; (800628c <prvSwitchTimerLists+0xc0>)
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006276:	4b06      	ldr	r3, [pc, #24]	; (8006290 <prvSwitchTimerLists+0xc4>)
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	4a04      	ldr	r2, [pc, #16]	; (800628c <prvSwitchTimerLists+0xc0>)
 800627c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800627e:	4a04      	ldr	r2, [pc, #16]	; (8006290 <prvSwitchTimerLists+0xc4>)
 8006280:	697b      	ldr	r3, [r7, #20]
 8006282:	6013      	str	r3, [r2, #0]
}
 8006284:	bf00      	nop
 8006286:	3718      	adds	r7, #24
 8006288:	46bd      	mov	sp, r7
 800628a:	bd80      	pop	{r7, pc}
 800628c:	20000f40 	.word	0x20000f40
 8006290:	20000f44 	.word	0x20000f44

08006294 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006294:	b580      	push	{r7, lr}
 8006296:	b082      	sub	sp, #8
 8006298:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800629a:	f000 f98b 	bl	80065b4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800629e:	4b15      	ldr	r3, [pc, #84]	; (80062f4 <prvCheckForValidListAndQueue+0x60>)
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d120      	bne.n	80062e8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80062a6:	4814      	ldr	r0, [pc, #80]	; (80062f8 <prvCheckForValidListAndQueue+0x64>)
 80062a8:	f7fd fc96 	bl	8003bd8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80062ac:	4813      	ldr	r0, [pc, #76]	; (80062fc <prvCheckForValidListAndQueue+0x68>)
 80062ae:	f7fd fc93 	bl	8003bd8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80062b2:	4b13      	ldr	r3, [pc, #76]	; (8006300 <prvCheckForValidListAndQueue+0x6c>)
 80062b4:	4a10      	ldr	r2, [pc, #64]	; (80062f8 <prvCheckForValidListAndQueue+0x64>)
 80062b6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80062b8:	4b12      	ldr	r3, [pc, #72]	; (8006304 <prvCheckForValidListAndQueue+0x70>)
 80062ba:	4a10      	ldr	r2, [pc, #64]	; (80062fc <prvCheckForValidListAndQueue+0x68>)
 80062bc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80062be:	2300      	movs	r3, #0
 80062c0:	9300      	str	r3, [sp, #0]
 80062c2:	4b11      	ldr	r3, [pc, #68]	; (8006308 <prvCheckForValidListAndQueue+0x74>)
 80062c4:	4a11      	ldr	r2, [pc, #68]	; (800630c <prvCheckForValidListAndQueue+0x78>)
 80062c6:	2110      	movs	r1, #16
 80062c8:	200a      	movs	r0, #10
 80062ca:	f7fd fda1 	bl	8003e10 <xQueueGenericCreateStatic>
 80062ce:	4603      	mov	r3, r0
 80062d0:	4a08      	ldr	r2, [pc, #32]	; (80062f4 <prvCheckForValidListAndQueue+0x60>)
 80062d2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80062d4:	4b07      	ldr	r3, [pc, #28]	; (80062f4 <prvCheckForValidListAndQueue+0x60>)
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d005      	beq.n	80062e8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80062dc:	4b05      	ldr	r3, [pc, #20]	; (80062f4 <prvCheckForValidListAndQueue+0x60>)
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	490b      	ldr	r1, [pc, #44]	; (8006310 <prvCheckForValidListAndQueue+0x7c>)
 80062e2:	4618      	mov	r0, r3
 80062e4:	f7fe fbce 	bl	8004a84 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80062e8:	f000 f994 	bl	8006614 <vPortExitCritical>
}
 80062ec:	bf00      	nop
 80062ee:	46bd      	mov	sp, r7
 80062f0:	bd80      	pop	{r7, pc}
 80062f2:	bf00      	nop
 80062f4:	20000f48 	.word	0x20000f48
 80062f8:	20000f18 	.word	0x20000f18
 80062fc:	20000f2c 	.word	0x20000f2c
 8006300:	20000f40 	.word	0x20000f40
 8006304:	20000f44 	.word	0x20000f44
 8006308:	20000ff4 	.word	0x20000ff4
 800630c:	20000f54 	.word	0x20000f54
 8006310:	080080cc 	.word	0x080080cc

08006314 <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 8006314:	b580      	push	{r7, lr}
 8006316:	b086      	sub	sp, #24
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d10a      	bne.n	800633c <pvTimerGetTimerID+0x28>
	__asm volatile
 8006326:	f04f 0350 	mov.w	r3, #80	; 0x50
 800632a:	f383 8811 	msr	BASEPRI, r3
 800632e:	f3bf 8f6f 	isb	sy
 8006332:	f3bf 8f4f 	dsb	sy
 8006336:	60fb      	str	r3, [r7, #12]
}
 8006338:	bf00      	nop
 800633a:	e7fe      	b.n	800633a <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 800633c:	f000 f93a 	bl	80065b4 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 8006340:	697b      	ldr	r3, [r7, #20]
 8006342:	69db      	ldr	r3, [r3, #28]
 8006344:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 8006346:	f000 f965 	bl	8006614 <vPortExitCritical>

	return pvReturn;
 800634a:	693b      	ldr	r3, [r7, #16]
}
 800634c:	4618      	mov	r0, r3
 800634e:	3718      	adds	r7, #24
 8006350:	46bd      	mov	sp, r7
 8006352:	bd80      	pop	{r7, pc}

08006354 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006354:	b480      	push	{r7}
 8006356:	b085      	sub	sp, #20
 8006358:	af00      	add	r7, sp, #0
 800635a:	60f8      	str	r0, [r7, #12]
 800635c:	60b9      	str	r1, [r7, #8]
 800635e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	3b04      	subs	r3, #4
 8006364:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800636c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	3b04      	subs	r3, #4
 8006372:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006374:	68bb      	ldr	r3, [r7, #8]
 8006376:	f023 0201 	bic.w	r2, r3, #1
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	3b04      	subs	r3, #4
 8006382:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006384:	4a0c      	ldr	r2, [pc, #48]	; (80063b8 <pxPortInitialiseStack+0x64>)
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	3b14      	subs	r3, #20
 800638e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006390:	687a      	ldr	r2, [r7, #4]
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	3b04      	subs	r3, #4
 800639a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	f06f 0202 	mvn.w	r2, #2
 80063a2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	3b20      	subs	r3, #32
 80063a8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80063aa:	68fb      	ldr	r3, [r7, #12]
}
 80063ac:	4618      	mov	r0, r3
 80063ae:	3714      	adds	r7, #20
 80063b0:	46bd      	mov	sp, r7
 80063b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b6:	4770      	bx	lr
 80063b8:	080063bd 	.word	0x080063bd

080063bc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80063bc:	b480      	push	{r7}
 80063be:	b085      	sub	sp, #20
 80063c0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80063c2:	2300      	movs	r3, #0
 80063c4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80063c6:	4b12      	ldr	r3, [pc, #72]	; (8006410 <prvTaskExitError+0x54>)
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063ce:	d00a      	beq.n	80063e6 <prvTaskExitError+0x2a>
	__asm volatile
 80063d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063d4:	f383 8811 	msr	BASEPRI, r3
 80063d8:	f3bf 8f6f 	isb	sy
 80063dc:	f3bf 8f4f 	dsb	sy
 80063e0:	60fb      	str	r3, [r7, #12]
}
 80063e2:	bf00      	nop
 80063e4:	e7fe      	b.n	80063e4 <prvTaskExitError+0x28>
	__asm volatile
 80063e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063ea:	f383 8811 	msr	BASEPRI, r3
 80063ee:	f3bf 8f6f 	isb	sy
 80063f2:	f3bf 8f4f 	dsb	sy
 80063f6:	60bb      	str	r3, [r7, #8]
}
 80063f8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80063fa:	bf00      	nop
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d0fc      	beq.n	80063fc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006402:	bf00      	nop
 8006404:	bf00      	nop
 8006406:	3714      	adds	r7, #20
 8006408:	46bd      	mov	sp, r7
 800640a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640e:	4770      	bx	lr
 8006410:	2000000c 	.word	0x2000000c
	...

08006420 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006420:	4b07      	ldr	r3, [pc, #28]	; (8006440 <pxCurrentTCBConst2>)
 8006422:	6819      	ldr	r1, [r3, #0]
 8006424:	6808      	ldr	r0, [r1, #0]
 8006426:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800642a:	f380 8809 	msr	PSP, r0
 800642e:	f3bf 8f6f 	isb	sy
 8006432:	f04f 0000 	mov.w	r0, #0
 8006436:	f380 8811 	msr	BASEPRI, r0
 800643a:	4770      	bx	lr
 800643c:	f3af 8000 	nop.w

08006440 <pxCurrentTCBConst2>:
 8006440:	20000a18 	.word	0x20000a18
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006444:	bf00      	nop
 8006446:	bf00      	nop

08006448 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006448:	4808      	ldr	r0, [pc, #32]	; (800646c <prvPortStartFirstTask+0x24>)
 800644a:	6800      	ldr	r0, [r0, #0]
 800644c:	6800      	ldr	r0, [r0, #0]
 800644e:	f380 8808 	msr	MSP, r0
 8006452:	f04f 0000 	mov.w	r0, #0
 8006456:	f380 8814 	msr	CONTROL, r0
 800645a:	b662      	cpsie	i
 800645c:	b661      	cpsie	f
 800645e:	f3bf 8f4f 	dsb	sy
 8006462:	f3bf 8f6f 	isb	sy
 8006466:	df00      	svc	0
 8006468:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800646a:	bf00      	nop
 800646c:	e000ed08 	.word	0xe000ed08

08006470 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006470:	b580      	push	{r7, lr}
 8006472:	b086      	sub	sp, #24
 8006474:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006476:	4b46      	ldr	r3, [pc, #280]	; (8006590 <xPortStartScheduler+0x120>)
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	4a46      	ldr	r2, [pc, #280]	; (8006594 <xPortStartScheduler+0x124>)
 800647c:	4293      	cmp	r3, r2
 800647e:	d10a      	bne.n	8006496 <xPortStartScheduler+0x26>
	__asm volatile
 8006480:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006484:	f383 8811 	msr	BASEPRI, r3
 8006488:	f3bf 8f6f 	isb	sy
 800648c:	f3bf 8f4f 	dsb	sy
 8006490:	613b      	str	r3, [r7, #16]
}
 8006492:	bf00      	nop
 8006494:	e7fe      	b.n	8006494 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006496:	4b3e      	ldr	r3, [pc, #248]	; (8006590 <xPortStartScheduler+0x120>)
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	4a3f      	ldr	r2, [pc, #252]	; (8006598 <xPortStartScheduler+0x128>)
 800649c:	4293      	cmp	r3, r2
 800649e:	d10a      	bne.n	80064b6 <xPortStartScheduler+0x46>
	__asm volatile
 80064a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064a4:	f383 8811 	msr	BASEPRI, r3
 80064a8:	f3bf 8f6f 	isb	sy
 80064ac:	f3bf 8f4f 	dsb	sy
 80064b0:	60fb      	str	r3, [r7, #12]
}
 80064b2:	bf00      	nop
 80064b4:	e7fe      	b.n	80064b4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80064b6:	4b39      	ldr	r3, [pc, #228]	; (800659c <xPortStartScheduler+0x12c>)
 80064b8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80064ba:	697b      	ldr	r3, [r7, #20]
 80064bc:	781b      	ldrb	r3, [r3, #0]
 80064be:	b2db      	uxtb	r3, r3
 80064c0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80064c2:	697b      	ldr	r3, [r7, #20]
 80064c4:	22ff      	movs	r2, #255	; 0xff
 80064c6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80064c8:	697b      	ldr	r3, [r7, #20]
 80064ca:	781b      	ldrb	r3, [r3, #0]
 80064cc:	b2db      	uxtb	r3, r3
 80064ce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80064d0:	78fb      	ldrb	r3, [r7, #3]
 80064d2:	b2db      	uxtb	r3, r3
 80064d4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80064d8:	b2da      	uxtb	r2, r3
 80064da:	4b31      	ldr	r3, [pc, #196]	; (80065a0 <xPortStartScheduler+0x130>)
 80064dc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80064de:	4b31      	ldr	r3, [pc, #196]	; (80065a4 <xPortStartScheduler+0x134>)
 80064e0:	2207      	movs	r2, #7
 80064e2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80064e4:	e009      	b.n	80064fa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80064e6:	4b2f      	ldr	r3, [pc, #188]	; (80065a4 <xPortStartScheduler+0x134>)
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	3b01      	subs	r3, #1
 80064ec:	4a2d      	ldr	r2, [pc, #180]	; (80065a4 <xPortStartScheduler+0x134>)
 80064ee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80064f0:	78fb      	ldrb	r3, [r7, #3]
 80064f2:	b2db      	uxtb	r3, r3
 80064f4:	005b      	lsls	r3, r3, #1
 80064f6:	b2db      	uxtb	r3, r3
 80064f8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80064fa:	78fb      	ldrb	r3, [r7, #3]
 80064fc:	b2db      	uxtb	r3, r3
 80064fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006502:	2b80      	cmp	r3, #128	; 0x80
 8006504:	d0ef      	beq.n	80064e6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006506:	4b27      	ldr	r3, [pc, #156]	; (80065a4 <xPortStartScheduler+0x134>)
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f1c3 0307 	rsb	r3, r3, #7
 800650e:	2b04      	cmp	r3, #4
 8006510:	d00a      	beq.n	8006528 <xPortStartScheduler+0xb8>
	__asm volatile
 8006512:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006516:	f383 8811 	msr	BASEPRI, r3
 800651a:	f3bf 8f6f 	isb	sy
 800651e:	f3bf 8f4f 	dsb	sy
 8006522:	60bb      	str	r3, [r7, #8]
}
 8006524:	bf00      	nop
 8006526:	e7fe      	b.n	8006526 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006528:	4b1e      	ldr	r3, [pc, #120]	; (80065a4 <xPortStartScheduler+0x134>)
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	021b      	lsls	r3, r3, #8
 800652e:	4a1d      	ldr	r2, [pc, #116]	; (80065a4 <xPortStartScheduler+0x134>)
 8006530:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006532:	4b1c      	ldr	r3, [pc, #112]	; (80065a4 <xPortStartScheduler+0x134>)
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800653a:	4a1a      	ldr	r2, [pc, #104]	; (80065a4 <xPortStartScheduler+0x134>)
 800653c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	b2da      	uxtb	r2, r3
 8006542:	697b      	ldr	r3, [r7, #20]
 8006544:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006546:	4b18      	ldr	r3, [pc, #96]	; (80065a8 <xPortStartScheduler+0x138>)
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	4a17      	ldr	r2, [pc, #92]	; (80065a8 <xPortStartScheduler+0x138>)
 800654c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006550:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006552:	4b15      	ldr	r3, [pc, #84]	; (80065a8 <xPortStartScheduler+0x138>)
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	4a14      	ldr	r2, [pc, #80]	; (80065a8 <xPortStartScheduler+0x138>)
 8006558:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800655c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800655e:	f000 f8dd 	bl	800671c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006562:	4b12      	ldr	r3, [pc, #72]	; (80065ac <xPortStartScheduler+0x13c>)
 8006564:	2200      	movs	r2, #0
 8006566:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006568:	f000 f8fc 	bl	8006764 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800656c:	4b10      	ldr	r3, [pc, #64]	; (80065b0 <xPortStartScheduler+0x140>)
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	4a0f      	ldr	r2, [pc, #60]	; (80065b0 <xPortStartScheduler+0x140>)
 8006572:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006576:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006578:	f7ff ff66 	bl	8006448 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800657c:	f7fe fe7e 	bl	800527c <vTaskSwitchContext>
	prvTaskExitError();
 8006580:	f7ff ff1c 	bl	80063bc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006584:	2300      	movs	r3, #0
}
 8006586:	4618      	mov	r0, r3
 8006588:	3718      	adds	r7, #24
 800658a:	46bd      	mov	sp, r7
 800658c:	bd80      	pop	{r7, pc}
 800658e:	bf00      	nop
 8006590:	e000ed00 	.word	0xe000ed00
 8006594:	410fc271 	.word	0x410fc271
 8006598:	410fc270 	.word	0x410fc270
 800659c:	e000e400 	.word	0xe000e400
 80065a0:	20001044 	.word	0x20001044
 80065a4:	20001048 	.word	0x20001048
 80065a8:	e000ed20 	.word	0xe000ed20
 80065ac:	2000000c 	.word	0x2000000c
 80065b0:	e000ef34 	.word	0xe000ef34

080065b4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80065b4:	b480      	push	{r7}
 80065b6:	b083      	sub	sp, #12
 80065b8:	af00      	add	r7, sp, #0
	__asm volatile
 80065ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065be:	f383 8811 	msr	BASEPRI, r3
 80065c2:	f3bf 8f6f 	isb	sy
 80065c6:	f3bf 8f4f 	dsb	sy
 80065ca:	607b      	str	r3, [r7, #4]
}
 80065cc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80065ce:	4b0f      	ldr	r3, [pc, #60]	; (800660c <vPortEnterCritical+0x58>)
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	3301      	adds	r3, #1
 80065d4:	4a0d      	ldr	r2, [pc, #52]	; (800660c <vPortEnterCritical+0x58>)
 80065d6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80065d8:	4b0c      	ldr	r3, [pc, #48]	; (800660c <vPortEnterCritical+0x58>)
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	2b01      	cmp	r3, #1
 80065de:	d10f      	bne.n	8006600 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80065e0:	4b0b      	ldr	r3, [pc, #44]	; (8006610 <vPortEnterCritical+0x5c>)
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	b2db      	uxtb	r3, r3
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d00a      	beq.n	8006600 <vPortEnterCritical+0x4c>
	__asm volatile
 80065ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065ee:	f383 8811 	msr	BASEPRI, r3
 80065f2:	f3bf 8f6f 	isb	sy
 80065f6:	f3bf 8f4f 	dsb	sy
 80065fa:	603b      	str	r3, [r7, #0]
}
 80065fc:	bf00      	nop
 80065fe:	e7fe      	b.n	80065fe <vPortEnterCritical+0x4a>
	}
}
 8006600:	bf00      	nop
 8006602:	370c      	adds	r7, #12
 8006604:	46bd      	mov	sp, r7
 8006606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660a:	4770      	bx	lr
 800660c:	2000000c 	.word	0x2000000c
 8006610:	e000ed04 	.word	0xe000ed04

08006614 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006614:	b480      	push	{r7}
 8006616:	b083      	sub	sp, #12
 8006618:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800661a:	4b12      	ldr	r3, [pc, #72]	; (8006664 <vPortExitCritical+0x50>)
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d10a      	bne.n	8006638 <vPortExitCritical+0x24>
	__asm volatile
 8006622:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006626:	f383 8811 	msr	BASEPRI, r3
 800662a:	f3bf 8f6f 	isb	sy
 800662e:	f3bf 8f4f 	dsb	sy
 8006632:	607b      	str	r3, [r7, #4]
}
 8006634:	bf00      	nop
 8006636:	e7fe      	b.n	8006636 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006638:	4b0a      	ldr	r3, [pc, #40]	; (8006664 <vPortExitCritical+0x50>)
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	3b01      	subs	r3, #1
 800663e:	4a09      	ldr	r2, [pc, #36]	; (8006664 <vPortExitCritical+0x50>)
 8006640:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006642:	4b08      	ldr	r3, [pc, #32]	; (8006664 <vPortExitCritical+0x50>)
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d105      	bne.n	8006656 <vPortExitCritical+0x42>
 800664a:	2300      	movs	r3, #0
 800664c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	f383 8811 	msr	BASEPRI, r3
}
 8006654:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006656:	bf00      	nop
 8006658:	370c      	adds	r7, #12
 800665a:	46bd      	mov	sp, r7
 800665c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006660:	4770      	bx	lr
 8006662:	bf00      	nop
 8006664:	2000000c 	.word	0x2000000c
	...

08006670 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006670:	f3ef 8009 	mrs	r0, PSP
 8006674:	f3bf 8f6f 	isb	sy
 8006678:	4b15      	ldr	r3, [pc, #84]	; (80066d0 <pxCurrentTCBConst>)
 800667a:	681a      	ldr	r2, [r3, #0]
 800667c:	f01e 0f10 	tst.w	lr, #16
 8006680:	bf08      	it	eq
 8006682:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006686:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800668a:	6010      	str	r0, [r2, #0]
 800668c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006690:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006694:	f380 8811 	msr	BASEPRI, r0
 8006698:	f3bf 8f4f 	dsb	sy
 800669c:	f3bf 8f6f 	isb	sy
 80066a0:	f7fe fdec 	bl	800527c <vTaskSwitchContext>
 80066a4:	f04f 0000 	mov.w	r0, #0
 80066a8:	f380 8811 	msr	BASEPRI, r0
 80066ac:	bc09      	pop	{r0, r3}
 80066ae:	6819      	ldr	r1, [r3, #0]
 80066b0:	6808      	ldr	r0, [r1, #0]
 80066b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066b6:	f01e 0f10 	tst.w	lr, #16
 80066ba:	bf08      	it	eq
 80066bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80066c0:	f380 8809 	msr	PSP, r0
 80066c4:	f3bf 8f6f 	isb	sy
 80066c8:	4770      	bx	lr
 80066ca:	bf00      	nop
 80066cc:	f3af 8000 	nop.w

080066d0 <pxCurrentTCBConst>:
 80066d0:	20000a18 	.word	0x20000a18
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80066d4:	bf00      	nop
 80066d6:	bf00      	nop

080066d8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b082      	sub	sp, #8
 80066dc:	af00      	add	r7, sp, #0
	__asm volatile
 80066de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066e2:	f383 8811 	msr	BASEPRI, r3
 80066e6:	f3bf 8f6f 	isb	sy
 80066ea:	f3bf 8f4f 	dsb	sy
 80066ee:	607b      	str	r3, [r7, #4]
}
 80066f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80066f2:	f7fe fd09 	bl	8005108 <xTaskIncrementTick>
 80066f6:	4603      	mov	r3, r0
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d003      	beq.n	8006704 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80066fc:	4b06      	ldr	r3, [pc, #24]	; (8006718 <xPortSysTickHandler+0x40>)
 80066fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006702:	601a      	str	r2, [r3, #0]
 8006704:	2300      	movs	r3, #0
 8006706:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	f383 8811 	msr	BASEPRI, r3
}
 800670e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006710:	bf00      	nop
 8006712:	3708      	adds	r7, #8
 8006714:	46bd      	mov	sp, r7
 8006716:	bd80      	pop	{r7, pc}
 8006718:	e000ed04 	.word	0xe000ed04

0800671c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800671c:	b480      	push	{r7}
 800671e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006720:	4b0b      	ldr	r3, [pc, #44]	; (8006750 <vPortSetupTimerInterrupt+0x34>)
 8006722:	2200      	movs	r2, #0
 8006724:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006726:	4b0b      	ldr	r3, [pc, #44]	; (8006754 <vPortSetupTimerInterrupt+0x38>)
 8006728:	2200      	movs	r2, #0
 800672a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800672c:	4b0a      	ldr	r3, [pc, #40]	; (8006758 <vPortSetupTimerInterrupt+0x3c>)
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	4a0a      	ldr	r2, [pc, #40]	; (800675c <vPortSetupTimerInterrupt+0x40>)
 8006732:	fba2 2303 	umull	r2, r3, r2, r3
 8006736:	099b      	lsrs	r3, r3, #6
 8006738:	4a09      	ldr	r2, [pc, #36]	; (8006760 <vPortSetupTimerInterrupt+0x44>)
 800673a:	3b01      	subs	r3, #1
 800673c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800673e:	4b04      	ldr	r3, [pc, #16]	; (8006750 <vPortSetupTimerInterrupt+0x34>)
 8006740:	2207      	movs	r2, #7
 8006742:	601a      	str	r2, [r3, #0]
}
 8006744:	bf00      	nop
 8006746:	46bd      	mov	sp, r7
 8006748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674c:	4770      	bx	lr
 800674e:	bf00      	nop
 8006750:	e000e010 	.word	0xe000e010
 8006754:	e000e018 	.word	0xe000e018
 8006758:	20000000 	.word	0x20000000
 800675c:	10624dd3 	.word	0x10624dd3
 8006760:	e000e014 	.word	0xe000e014

08006764 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006764:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006774 <vPortEnableVFP+0x10>
 8006768:	6801      	ldr	r1, [r0, #0]
 800676a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800676e:	6001      	str	r1, [r0, #0]
 8006770:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006772:	bf00      	nop
 8006774:	e000ed88 	.word	0xe000ed88

08006778 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006778:	b480      	push	{r7}
 800677a:	b085      	sub	sp, #20
 800677c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800677e:	f3ef 8305 	mrs	r3, IPSR
 8006782:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	2b0f      	cmp	r3, #15
 8006788:	d914      	bls.n	80067b4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800678a:	4a17      	ldr	r2, [pc, #92]	; (80067e8 <vPortValidateInterruptPriority+0x70>)
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	4413      	add	r3, r2
 8006790:	781b      	ldrb	r3, [r3, #0]
 8006792:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006794:	4b15      	ldr	r3, [pc, #84]	; (80067ec <vPortValidateInterruptPriority+0x74>)
 8006796:	781b      	ldrb	r3, [r3, #0]
 8006798:	7afa      	ldrb	r2, [r7, #11]
 800679a:	429a      	cmp	r2, r3
 800679c:	d20a      	bcs.n	80067b4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800679e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067a2:	f383 8811 	msr	BASEPRI, r3
 80067a6:	f3bf 8f6f 	isb	sy
 80067aa:	f3bf 8f4f 	dsb	sy
 80067ae:	607b      	str	r3, [r7, #4]
}
 80067b0:	bf00      	nop
 80067b2:	e7fe      	b.n	80067b2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80067b4:	4b0e      	ldr	r3, [pc, #56]	; (80067f0 <vPortValidateInterruptPriority+0x78>)
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80067bc:	4b0d      	ldr	r3, [pc, #52]	; (80067f4 <vPortValidateInterruptPriority+0x7c>)
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	429a      	cmp	r2, r3
 80067c2:	d90a      	bls.n	80067da <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80067c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067c8:	f383 8811 	msr	BASEPRI, r3
 80067cc:	f3bf 8f6f 	isb	sy
 80067d0:	f3bf 8f4f 	dsb	sy
 80067d4:	603b      	str	r3, [r7, #0]
}
 80067d6:	bf00      	nop
 80067d8:	e7fe      	b.n	80067d8 <vPortValidateInterruptPriority+0x60>
	}
 80067da:	bf00      	nop
 80067dc:	3714      	adds	r7, #20
 80067de:	46bd      	mov	sp, r7
 80067e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e4:	4770      	bx	lr
 80067e6:	bf00      	nop
 80067e8:	e000e3f0 	.word	0xe000e3f0
 80067ec:	20001044 	.word	0x20001044
 80067f0:	e000ed0c 	.word	0xe000ed0c
 80067f4:	20001048 	.word	0x20001048

080067f8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b08a      	sub	sp, #40	; 0x28
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006800:	2300      	movs	r3, #0
 8006802:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006804:	f7fe fbc4 	bl	8004f90 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006808:	4b5b      	ldr	r3, [pc, #364]	; (8006978 <pvPortMalloc+0x180>)
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d101      	bne.n	8006814 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006810:	f000 f920 	bl	8006a54 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006814:	4b59      	ldr	r3, [pc, #356]	; (800697c <pvPortMalloc+0x184>)
 8006816:	681a      	ldr	r2, [r3, #0]
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	4013      	ands	r3, r2
 800681c:	2b00      	cmp	r3, #0
 800681e:	f040 8093 	bne.w	8006948 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	2b00      	cmp	r3, #0
 8006826:	d01d      	beq.n	8006864 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006828:	2208      	movs	r2, #8
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	4413      	add	r3, r2
 800682e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	f003 0307 	and.w	r3, r3, #7
 8006836:	2b00      	cmp	r3, #0
 8006838:	d014      	beq.n	8006864 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	f023 0307 	bic.w	r3, r3, #7
 8006840:	3308      	adds	r3, #8
 8006842:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	f003 0307 	and.w	r3, r3, #7
 800684a:	2b00      	cmp	r3, #0
 800684c:	d00a      	beq.n	8006864 <pvPortMalloc+0x6c>
	__asm volatile
 800684e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006852:	f383 8811 	msr	BASEPRI, r3
 8006856:	f3bf 8f6f 	isb	sy
 800685a:	f3bf 8f4f 	dsb	sy
 800685e:	617b      	str	r3, [r7, #20]
}
 8006860:	bf00      	nop
 8006862:	e7fe      	b.n	8006862 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d06e      	beq.n	8006948 <pvPortMalloc+0x150>
 800686a:	4b45      	ldr	r3, [pc, #276]	; (8006980 <pvPortMalloc+0x188>)
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	687a      	ldr	r2, [r7, #4]
 8006870:	429a      	cmp	r2, r3
 8006872:	d869      	bhi.n	8006948 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006874:	4b43      	ldr	r3, [pc, #268]	; (8006984 <pvPortMalloc+0x18c>)
 8006876:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006878:	4b42      	ldr	r3, [pc, #264]	; (8006984 <pvPortMalloc+0x18c>)
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800687e:	e004      	b.n	800688a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006882:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800688a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800688c:	685b      	ldr	r3, [r3, #4]
 800688e:	687a      	ldr	r2, [r7, #4]
 8006890:	429a      	cmp	r2, r3
 8006892:	d903      	bls.n	800689c <pvPortMalloc+0xa4>
 8006894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d1f1      	bne.n	8006880 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800689c:	4b36      	ldr	r3, [pc, #216]	; (8006978 <pvPortMalloc+0x180>)
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068a2:	429a      	cmp	r2, r3
 80068a4:	d050      	beq.n	8006948 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80068a6:	6a3b      	ldr	r3, [r7, #32]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	2208      	movs	r2, #8
 80068ac:	4413      	add	r3, r2
 80068ae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80068b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068b2:	681a      	ldr	r2, [r3, #0]
 80068b4:	6a3b      	ldr	r3, [r7, #32]
 80068b6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80068b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ba:	685a      	ldr	r2, [r3, #4]
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	1ad2      	subs	r2, r2, r3
 80068c0:	2308      	movs	r3, #8
 80068c2:	005b      	lsls	r3, r3, #1
 80068c4:	429a      	cmp	r2, r3
 80068c6:	d91f      	bls.n	8006908 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80068c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	4413      	add	r3, r2
 80068ce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80068d0:	69bb      	ldr	r3, [r7, #24]
 80068d2:	f003 0307 	and.w	r3, r3, #7
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d00a      	beq.n	80068f0 <pvPortMalloc+0xf8>
	__asm volatile
 80068da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068de:	f383 8811 	msr	BASEPRI, r3
 80068e2:	f3bf 8f6f 	isb	sy
 80068e6:	f3bf 8f4f 	dsb	sy
 80068ea:	613b      	str	r3, [r7, #16]
}
 80068ec:	bf00      	nop
 80068ee:	e7fe      	b.n	80068ee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80068f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068f2:	685a      	ldr	r2, [r3, #4]
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	1ad2      	subs	r2, r2, r3
 80068f8:	69bb      	ldr	r3, [r7, #24]
 80068fa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80068fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068fe:	687a      	ldr	r2, [r7, #4]
 8006900:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006902:	69b8      	ldr	r0, [r7, #24]
 8006904:	f000 f908 	bl	8006b18 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006908:	4b1d      	ldr	r3, [pc, #116]	; (8006980 <pvPortMalloc+0x188>)
 800690a:	681a      	ldr	r2, [r3, #0]
 800690c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800690e:	685b      	ldr	r3, [r3, #4]
 8006910:	1ad3      	subs	r3, r2, r3
 8006912:	4a1b      	ldr	r2, [pc, #108]	; (8006980 <pvPortMalloc+0x188>)
 8006914:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006916:	4b1a      	ldr	r3, [pc, #104]	; (8006980 <pvPortMalloc+0x188>)
 8006918:	681a      	ldr	r2, [r3, #0]
 800691a:	4b1b      	ldr	r3, [pc, #108]	; (8006988 <pvPortMalloc+0x190>)
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	429a      	cmp	r2, r3
 8006920:	d203      	bcs.n	800692a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006922:	4b17      	ldr	r3, [pc, #92]	; (8006980 <pvPortMalloc+0x188>)
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	4a18      	ldr	r2, [pc, #96]	; (8006988 <pvPortMalloc+0x190>)
 8006928:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800692a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800692c:	685a      	ldr	r2, [r3, #4]
 800692e:	4b13      	ldr	r3, [pc, #76]	; (800697c <pvPortMalloc+0x184>)
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	431a      	orrs	r2, r3
 8006934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006936:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800693a:	2200      	movs	r2, #0
 800693c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800693e:	4b13      	ldr	r3, [pc, #76]	; (800698c <pvPortMalloc+0x194>)
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	3301      	adds	r3, #1
 8006944:	4a11      	ldr	r2, [pc, #68]	; (800698c <pvPortMalloc+0x194>)
 8006946:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006948:	f7fe fb30 	bl	8004fac <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800694c:	69fb      	ldr	r3, [r7, #28]
 800694e:	f003 0307 	and.w	r3, r3, #7
 8006952:	2b00      	cmp	r3, #0
 8006954:	d00a      	beq.n	800696c <pvPortMalloc+0x174>
	__asm volatile
 8006956:	f04f 0350 	mov.w	r3, #80	; 0x50
 800695a:	f383 8811 	msr	BASEPRI, r3
 800695e:	f3bf 8f6f 	isb	sy
 8006962:	f3bf 8f4f 	dsb	sy
 8006966:	60fb      	str	r3, [r7, #12]
}
 8006968:	bf00      	nop
 800696a:	e7fe      	b.n	800696a <pvPortMalloc+0x172>
	return pvReturn;
 800696c:	69fb      	ldr	r3, [r7, #28]
}
 800696e:	4618      	mov	r0, r3
 8006970:	3728      	adds	r7, #40	; 0x28
 8006972:	46bd      	mov	sp, r7
 8006974:	bd80      	pop	{r7, pc}
 8006976:	bf00      	nop
 8006978:	20004c54 	.word	0x20004c54
 800697c:	20004c68 	.word	0x20004c68
 8006980:	20004c58 	.word	0x20004c58
 8006984:	20004c4c 	.word	0x20004c4c
 8006988:	20004c5c 	.word	0x20004c5c
 800698c:	20004c60 	.word	0x20004c60

08006990 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006990:	b580      	push	{r7, lr}
 8006992:	b086      	sub	sp, #24
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d04d      	beq.n	8006a3e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80069a2:	2308      	movs	r3, #8
 80069a4:	425b      	negs	r3, r3
 80069a6:	697a      	ldr	r2, [r7, #20]
 80069a8:	4413      	add	r3, r2
 80069aa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80069ac:	697b      	ldr	r3, [r7, #20]
 80069ae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80069b0:	693b      	ldr	r3, [r7, #16]
 80069b2:	685a      	ldr	r2, [r3, #4]
 80069b4:	4b24      	ldr	r3, [pc, #144]	; (8006a48 <vPortFree+0xb8>)
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	4013      	ands	r3, r2
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d10a      	bne.n	80069d4 <vPortFree+0x44>
	__asm volatile
 80069be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069c2:	f383 8811 	msr	BASEPRI, r3
 80069c6:	f3bf 8f6f 	isb	sy
 80069ca:	f3bf 8f4f 	dsb	sy
 80069ce:	60fb      	str	r3, [r7, #12]
}
 80069d0:	bf00      	nop
 80069d2:	e7fe      	b.n	80069d2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80069d4:	693b      	ldr	r3, [r7, #16]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d00a      	beq.n	80069f2 <vPortFree+0x62>
	__asm volatile
 80069dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069e0:	f383 8811 	msr	BASEPRI, r3
 80069e4:	f3bf 8f6f 	isb	sy
 80069e8:	f3bf 8f4f 	dsb	sy
 80069ec:	60bb      	str	r3, [r7, #8]
}
 80069ee:	bf00      	nop
 80069f0:	e7fe      	b.n	80069f0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80069f2:	693b      	ldr	r3, [r7, #16]
 80069f4:	685a      	ldr	r2, [r3, #4]
 80069f6:	4b14      	ldr	r3, [pc, #80]	; (8006a48 <vPortFree+0xb8>)
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	4013      	ands	r3, r2
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d01e      	beq.n	8006a3e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006a00:	693b      	ldr	r3, [r7, #16]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d11a      	bne.n	8006a3e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006a08:	693b      	ldr	r3, [r7, #16]
 8006a0a:	685a      	ldr	r2, [r3, #4]
 8006a0c:	4b0e      	ldr	r3, [pc, #56]	; (8006a48 <vPortFree+0xb8>)
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	43db      	mvns	r3, r3
 8006a12:	401a      	ands	r2, r3
 8006a14:	693b      	ldr	r3, [r7, #16]
 8006a16:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006a18:	f7fe faba 	bl	8004f90 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006a1c:	693b      	ldr	r3, [r7, #16]
 8006a1e:	685a      	ldr	r2, [r3, #4]
 8006a20:	4b0a      	ldr	r3, [pc, #40]	; (8006a4c <vPortFree+0xbc>)
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	4413      	add	r3, r2
 8006a26:	4a09      	ldr	r2, [pc, #36]	; (8006a4c <vPortFree+0xbc>)
 8006a28:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006a2a:	6938      	ldr	r0, [r7, #16]
 8006a2c:	f000 f874 	bl	8006b18 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006a30:	4b07      	ldr	r3, [pc, #28]	; (8006a50 <vPortFree+0xc0>)
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	3301      	adds	r3, #1
 8006a36:	4a06      	ldr	r2, [pc, #24]	; (8006a50 <vPortFree+0xc0>)
 8006a38:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006a3a:	f7fe fab7 	bl	8004fac <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006a3e:	bf00      	nop
 8006a40:	3718      	adds	r7, #24
 8006a42:	46bd      	mov	sp, r7
 8006a44:	bd80      	pop	{r7, pc}
 8006a46:	bf00      	nop
 8006a48:	20004c68 	.word	0x20004c68
 8006a4c:	20004c58 	.word	0x20004c58
 8006a50:	20004c64 	.word	0x20004c64

08006a54 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006a54:	b480      	push	{r7}
 8006a56:	b085      	sub	sp, #20
 8006a58:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006a5a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006a5e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006a60:	4b27      	ldr	r3, [pc, #156]	; (8006b00 <prvHeapInit+0xac>)
 8006a62:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	f003 0307 	and.w	r3, r3, #7
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d00c      	beq.n	8006a88 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	3307      	adds	r3, #7
 8006a72:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	f023 0307 	bic.w	r3, r3, #7
 8006a7a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006a7c:	68ba      	ldr	r2, [r7, #8]
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	1ad3      	subs	r3, r2, r3
 8006a82:	4a1f      	ldr	r2, [pc, #124]	; (8006b00 <prvHeapInit+0xac>)
 8006a84:	4413      	add	r3, r2
 8006a86:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006a8c:	4a1d      	ldr	r2, [pc, #116]	; (8006b04 <prvHeapInit+0xb0>)
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006a92:	4b1c      	ldr	r3, [pc, #112]	; (8006b04 <prvHeapInit+0xb0>)
 8006a94:	2200      	movs	r2, #0
 8006a96:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	68ba      	ldr	r2, [r7, #8]
 8006a9c:	4413      	add	r3, r2
 8006a9e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006aa0:	2208      	movs	r2, #8
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	1a9b      	subs	r3, r3, r2
 8006aa6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	f023 0307 	bic.w	r3, r3, #7
 8006aae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	4a15      	ldr	r2, [pc, #84]	; (8006b08 <prvHeapInit+0xb4>)
 8006ab4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006ab6:	4b14      	ldr	r3, [pc, #80]	; (8006b08 <prvHeapInit+0xb4>)
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	2200      	movs	r2, #0
 8006abc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006abe:	4b12      	ldr	r3, [pc, #72]	; (8006b08 <prvHeapInit+0xb4>)
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	68fa      	ldr	r2, [r7, #12]
 8006ace:	1ad2      	subs	r2, r2, r3
 8006ad0:	683b      	ldr	r3, [r7, #0]
 8006ad2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006ad4:	4b0c      	ldr	r3, [pc, #48]	; (8006b08 <prvHeapInit+0xb4>)
 8006ad6:	681a      	ldr	r2, [r3, #0]
 8006ad8:	683b      	ldr	r3, [r7, #0]
 8006ada:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	685b      	ldr	r3, [r3, #4]
 8006ae0:	4a0a      	ldr	r2, [pc, #40]	; (8006b0c <prvHeapInit+0xb8>)
 8006ae2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	685b      	ldr	r3, [r3, #4]
 8006ae8:	4a09      	ldr	r2, [pc, #36]	; (8006b10 <prvHeapInit+0xbc>)
 8006aea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006aec:	4b09      	ldr	r3, [pc, #36]	; (8006b14 <prvHeapInit+0xc0>)
 8006aee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006af2:	601a      	str	r2, [r3, #0]
}
 8006af4:	bf00      	nop
 8006af6:	3714      	adds	r7, #20
 8006af8:	46bd      	mov	sp, r7
 8006afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afe:	4770      	bx	lr
 8006b00:	2000104c 	.word	0x2000104c
 8006b04:	20004c4c 	.word	0x20004c4c
 8006b08:	20004c54 	.word	0x20004c54
 8006b0c:	20004c5c 	.word	0x20004c5c
 8006b10:	20004c58 	.word	0x20004c58
 8006b14:	20004c68 	.word	0x20004c68

08006b18 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006b18:	b480      	push	{r7}
 8006b1a:	b085      	sub	sp, #20
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006b20:	4b28      	ldr	r3, [pc, #160]	; (8006bc4 <prvInsertBlockIntoFreeList+0xac>)
 8006b22:	60fb      	str	r3, [r7, #12]
 8006b24:	e002      	b.n	8006b2c <prvInsertBlockIntoFreeList+0x14>
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	60fb      	str	r3, [r7, #12]
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	687a      	ldr	r2, [r7, #4]
 8006b32:	429a      	cmp	r2, r3
 8006b34:	d8f7      	bhi.n	8006b26 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	685b      	ldr	r3, [r3, #4]
 8006b3e:	68ba      	ldr	r2, [r7, #8]
 8006b40:	4413      	add	r3, r2
 8006b42:	687a      	ldr	r2, [r7, #4]
 8006b44:	429a      	cmp	r2, r3
 8006b46:	d108      	bne.n	8006b5a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	685a      	ldr	r2, [r3, #4]
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	685b      	ldr	r3, [r3, #4]
 8006b50:	441a      	add	r2, r3
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	685b      	ldr	r3, [r3, #4]
 8006b62:	68ba      	ldr	r2, [r7, #8]
 8006b64:	441a      	add	r2, r3
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	429a      	cmp	r2, r3
 8006b6c:	d118      	bne.n	8006ba0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	681a      	ldr	r2, [r3, #0]
 8006b72:	4b15      	ldr	r3, [pc, #84]	; (8006bc8 <prvInsertBlockIntoFreeList+0xb0>)
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	429a      	cmp	r2, r3
 8006b78:	d00d      	beq.n	8006b96 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	685a      	ldr	r2, [r3, #4]
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	685b      	ldr	r3, [r3, #4]
 8006b84:	441a      	add	r2, r3
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	681a      	ldr	r2, [r3, #0]
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	601a      	str	r2, [r3, #0]
 8006b94:	e008      	b.n	8006ba8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006b96:	4b0c      	ldr	r3, [pc, #48]	; (8006bc8 <prvInsertBlockIntoFreeList+0xb0>)
 8006b98:	681a      	ldr	r2, [r3, #0]
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	601a      	str	r2, [r3, #0]
 8006b9e:	e003      	b.n	8006ba8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	681a      	ldr	r2, [r3, #0]
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006ba8:	68fa      	ldr	r2, [r7, #12]
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	429a      	cmp	r2, r3
 8006bae:	d002      	beq.n	8006bb6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	687a      	ldr	r2, [r7, #4]
 8006bb4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006bb6:	bf00      	nop
 8006bb8:	3714      	adds	r7, #20
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc0:	4770      	bx	lr
 8006bc2:	bf00      	nop
 8006bc4:	20004c4c 	.word	0x20004c4c
 8006bc8:	20004c54 	.word	0x20004c54

08006bcc <__errno>:
 8006bcc:	4b01      	ldr	r3, [pc, #4]	; (8006bd4 <__errno+0x8>)
 8006bce:	6818      	ldr	r0, [r3, #0]
 8006bd0:	4770      	bx	lr
 8006bd2:	bf00      	nop
 8006bd4:	20000010 	.word	0x20000010

08006bd8 <std>:
 8006bd8:	2300      	movs	r3, #0
 8006bda:	b510      	push	{r4, lr}
 8006bdc:	4604      	mov	r4, r0
 8006bde:	e9c0 3300 	strd	r3, r3, [r0]
 8006be2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006be6:	6083      	str	r3, [r0, #8]
 8006be8:	8181      	strh	r1, [r0, #12]
 8006bea:	6643      	str	r3, [r0, #100]	; 0x64
 8006bec:	81c2      	strh	r2, [r0, #14]
 8006bee:	6183      	str	r3, [r0, #24]
 8006bf0:	4619      	mov	r1, r3
 8006bf2:	2208      	movs	r2, #8
 8006bf4:	305c      	adds	r0, #92	; 0x5c
 8006bf6:	f000 f91a 	bl	8006e2e <memset>
 8006bfa:	4b05      	ldr	r3, [pc, #20]	; (8006c10 <std+0x38>)
 8006bfc:	6263      	str	r3, [r4, #36]	; 0x24
 8006bfe:	4b05      	ldr	r3, [pc, #20]	; (8006c14 <std+0x3c>)
 8006c00:	62a3      	str	r3, [r4, #40]	; 0x28
 8006c02:	4b05      	ldr	r3, [pc, #20]	; (8006c18 <std+0x40>)
 8006c04:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006c06:	4b05      	ldr	r3, [pc, #20]	; (8006c1c <std+0x44>)
 8006c08:	6224      	str	r4, [r4, #32]
 8006c0a:	6323      	str	r3, [r4, #48]	; 0x30
 8006c0c:	bd10      	pop	{r4, pc}
 8006c0e:	bf00      	nop
 8006c10:	0800708d 	.word	0x0800708d
 8006c14:	080070af 	.word	0x080070af
 8006c18:	080070e7 	.word	0x080070e7
 8006c1c:	0800710b 	.word	0x0800710b

08006c20 <_cleanup_r>:
 8006c20:	4901      	ldr	r1, [pc, #4]	; (8006c28 <_cleanup_r+0x8>)
 8006c22:	f000 b8af 	b.w	8006d84 <_fwalk_reent>
 8006c26:	bf00      	nop
 8006c28:	080072e1 	.word	0x080072e1

08006c2c <__sfmoreglue>:
 8006c2c:	b570      	push	{r4, r5, r6, lr}
 8006c2e:	2268      	movs	r2, #104	; 0x68
 8006c30:	1e4d      	subs	r5, r1, #1
 8006c32:	4355      	muls	r5, r2
 8006c34:	460e      	mov	r6, r1
 8006c36:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006c3a:	f000 f921 	bl	8006e80 <_malloc_r>
 8006c3e:	4604      	mov	r4, r0
 8006c40:	b140      	cbz	r0, 8006c54 <__sfmoreglue+0x28>
 8006c42:	2100      	movs	r1, #0
 8006c44:	e9c0 1600 	strd	r1, r6, [r0]
 8006c48:	300c      	adds	r0, #12
 8006c4a:	60a0      	str	r0, [r4, #8]
 8006c4c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006c50:	f000 f8ed 	bl	8006e2e <memset>
 8006c54:	4620      	mov	r0, r4
 8006c56:	bd70      	pop	{r4, r5, r6, pc}

08006c58 <__sfp_lock_acquire>:
 8006c58:	4801      	ldr	r0, [pc, #4]	; (8006c60 <__sfp_lock_acquire+0x8>)
 8006c5a:	f000 b8d8 	b.w	8006e0e <__retarget_lock_acquire_recursive>
 8006c5e:	bf00      	nop
 8006c60:	20004c6d 	.word	0x20004c6d

08006c64 <__sfp_lock_release>:
 8006c64:	4801      	ldr	r0, [pc, #4]	; (8006c6c <__sfp_lock_release+0x8>)
 8006c66:	f000 b8d3 	b.w	8006e10 <__retarget_lock_release_recursive>
 8006c6a:	bf00      	nop
 8006c6c:	20004c6d 	.word	0x20004c6d

08006c70 <__sinit_lock_acquire>:
 8006c70:	4801      	ldr	r0, [pc, #4]	; (8006c78 <__sinit_lock_acquire+0x8>)
 8006c72:	f000 b8cc 	b.w	8006e0e <__retarget_lock_acquire_recursive>
 8006c76:	bf00      	nop
 8006c78:	20004c6e 	.word	0x20004c6e

08006c7c <__sinit_lock_release>:
 8006c7c:	4801      	ldr	r0, [pc, #4]	; (8006c84 <__sinit_lock_release+0x8>)
 8006c7e:	f000 b8c7 	b.w	8006e10 <__retarget_lock_release_recursive>
 8006c82:	bf00      	nop
 8006c84:	20004c6e 	.word	0x20004c6e

08006c88 <__sinit>:
 8006c88:	b510      	push	{r4, lr}
 8006c8a:	4604      	mov	r4, r0
 8006c8c:	f7ff fff0 	bl	8006c70 <__sinit_lock_acquire>
 8006c90:	69a3      	ldr	r3, [r4, #24]
 8006c92:	b11b      	cbz	r3, 8006c9c <__sinit+0x14>
 8006c94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c98:	f7ff bff0 	b.w	8006c7c <__sinit_lock_release>
 8006c9c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006ca0:	6523      	str	r3, [r4, #80]	; 0x50
 8006ca2:	4b13      	ldr	r3, [pc, #76]	; (8006cf0 <__sinit+0x68>)
 8006ca4:	4a13      	ldr	r2, [pc, #76]	; (8006cf4 <__sinit+0x6c>)
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	62a2      	str	r2, [r4, #40]	; 0x28
 8006caa:	42a3      	cmp	r3, r4
 8006cac:	bf04      	itt	eq
 8006cae:	2301      	moveq	r3, #1
 8006cb0:	61a3      	streq	r3, [r4, #24]
 8006cb2:	4620      	mov	r0, r4
 8006cb4:	f000 f820 	bl	8006cf8 <__sfp>
 8006cb8:	6060      	str	r0, [r4, #4]
 8006cba:	4620      	mov	r0, r4
 8006cbc:	f000 f81c 	bl	8006cf8 <__sfp>
 8006cc0:	60a0      	str	r0, [r4, #8]
 8006cc2:	4620      	mov	r0, r4
 8006cc4:	f000 f818 	bl	8006cf8 <__sfp>
 8006cc8:	2200      	movs	r2, #0
 8006cca:	60e0      	str	r0, [r4, #12]
 8006ccc:	2104      	movs	r1, #4
 8006cce:	6860      	ldr	r0, [r4, #4]
 8006cd0:	f7ff ff82 	bl	8006bd8 <std>
 8006cd4:	68a0      	ldr	r0, [r4, #8]
 8006cd6:	2201      	movs	r2, #1
 8006cd8:	2109      	movs	r1, #9
 8006cda:	f7ff ff7d 	bl	8006bd8 <std>
 8006cde:	68e0      	ldr	r0, [r4, #12]
 8006ce0:	2202      	movs	r2, #2
 8006ce2:	2112      	movs	r1, #18
 8006ce4:	f7ff ff78 	bl	8006bd8 <std>
 8006ce8:	2301      	movs	r3, #1
 8006cea:	61a3      	str	r3, [r4, #24]
 8006cec:	e7d2      	b.n	8006c94 <__sinit+0xc>
 8006cee:	bf00      	nop
 8006cf0:	08008190 	.word	0x08008190
 8006cf4:	08006c21 	.word	0x08006c21

08006cf8 <__sfp>:
 8006cf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cfa:	4607      	mov	r7, r0
 8006cfc:	f7ff ffac 	bl	8006c58 <__sfp_lock_acquire>
 8006d00:	4b1e      	ldr	r3, [pc, #120]	; (8006d7c <__sfp+0x84>)
 8006d02:	681e      	ldr	r6, [r3, #0]
 8006d04:	69b3      	ldr	r3, [r6, #24]
 8006d06:	b913      	cbnz	r3, 8006d0e <__sfp+0x16>
 8006d08:	4630      	mov	r0, r6
 8006d0a:	f7ff ffbd 	bl	8006c88 <__sinit>
 8006d0e:	3648      	adds	r6, #72	; 0x48
 8006d10:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006d14:	3b01      	subs	r3, #1
 8006d16:	d503      	bpl.n	8006d20 <__sfp+0x28>
 8006d18:	6833      	ldr	r3, [r6, #0]
 8006d1a:	b30b      	cbz	r3, 8006d60 <__sfp+0x68>
 8006d1c:	6836      	ldr	r6, [r6, #0]
 8006d1e:	e7f7      	b.n	8006d10 <__sfp+0x18>
 8006d20:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006d24:	b9d5      	cbnz	r5, 8006d5c <__sfp+0x64>
 8006d26:	4b16      	ldr	r3, [pc, #88]	; (8006d80 <__sfp+0x88>)
 8006d28:	60e3      	str	r3, [r4, #12]
 8006d2a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006d2e:	6665      	str	r5, [r4, #100]	; 0x64
 8006d30:	f000 f86c 	bl	8006e0c <__retarget_lock_init_recursive>
 8006d34:	f7ff ff96 	bl	8006c64 <__sfp_lock_release>
 8006d38:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006d3c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006d40:	6025      	str	r5, [r4, #0]
 8006d42:	61a5      	str	r5, [r4, #24]
 8006d44:	2208      	movs	r2, #8
 8006d46:	4629      	mov	r1, r5
 8006d48:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006d4c:	f000 f86f 	bl	8006e2e <memset>
 8006d50:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006d54:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006d58:	4620      	mov	r0, r4
 8006d5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d5c:	3468      	adds	r4, #104	; 0x68
 8006d5e:	e7d9      	b.n	8006d14 <__sfp+0x1c>
 8006d60:	2104      	movs	r1, #4
 8006d62:	4638      	mov	r0, r7
 8006d64:	f7ff ff62 	bl	8006c2c <__sfmoreglue>
 8006d68:	4604      	mov	r4, r0
 8006d6a:	6030      	str	r0, [r6, #0]
 8006d6c:	2800      	cmp	r0, #0
 8006d6e:	d1d5      	bne.n	8006d1c <__sfp+0x24>
 8006d70:	f7ff ff78 	bl	8006c64 <__sfp_lock_release>
 8006d74:	230c      	movs	r3, #12
 8006d76:	603b      	str	r3, [r7, #0]
 8006d78:	e7ee      	b.n	8006d58 <__sfp+0x60>
 8006d7a:	bf00      	nop
 8006d7c:	08008190 	.word	0x08008190
 8006d80:	ffff0001 	.word	0xffff0001

08006d84 <_fwalk_reent>:
 8006d84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d88:	4606      	mov	r6, r0
 8006d8a:	4688      	mov	r8, r1
 8006d8c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006d90:	2700      	movs	r7, #0
 8006d92:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006d96:	f1b9 0901 	subs.w	r9, r9, #1
 8006d9a:	d505      	bpl.n	8006da8 <_fwalk_reent+0x24>
 8006d9c:	6824      	ldr	r4, [r4, #0]
 8006d9e:	2c00      	cmp	r4, #0
 8006da0:	d1f7      	bne.n	8006d92 <_fwalk_reent+0xe>
 8006da2:	4638      	mov	r0, r7
 8006da4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006da8:	89ab      	ldrh	r3, [r5, #12]
 8006daa:	2b01      	cmp	r3, #1
 8006dac:	d907      	bls.n	8006dbe <_fwalk_reent+0x3a>
 8006dae:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006db2:	3301      	adds	r3, #1
 8006db4:	d003      	beq.n	8006dbe <_fwalk_reent+0x3a>
 8006db6:	4629      	mov	r1, r5
 8006db8:	4630      	mov	r0, r6
 8006dba:	47c0      	blx	r8
 8006dbc:	4307      	orrs	r7, r0
 8006dbe:	3568      	adds	r5, #104	; 0x68
 8006dc0:	e7e9      	b.n	8006d96 <_fwalk_reent+0x12>
	...

08006dc4 <__libc_init_array>:
 8006dc4:	b570      	push	{r4, r5, r6, lr}
 8006dc6:	4d0d      	ldr	r5, [pc, #52]	; (8006dfc <__libc_init_array+0x38>)
 8006dc8:	4c0d      	ldr	r4, [pc, #52]	; (8006e00 <__libc_init_array+0x3c>)
 8006dca:	1b64      	subs	r4, r4, r5
 8006dcc:	10a4      	asrs	r4, r4, #2
 8006dce:	2600      	movs	r6, #0
 8006dd0:	42a6      	cmp	r6, r4
 8006dd2:	d109      	bne.n	8006de8 <__libc_init_array+0x24>
 8006dd4:	4d0b      	ldr	r5, [pc, #44]	; (8006e04 <__libc_init_array+0x40>)
 8006dd6:	4c0c      	ldr	r4, [pc, #48]	; (8006e08 <__libc_init_array+0x44>)
 8006dd8:	f001 f91e 	bl	8008018 <_init>
 8006ddc:	1b64      	subs	r4, r4, r5
 8006dde:	10a4      	asrs	r4, r4, #2
 8006de0:	2600      	movs	r6, #0
 8006de2:	42a6      	cmp	r6, r4
 8006de4:	d105      	bne.n	8006df2 <__libc_init_array+0x2e>
 8006de6:	bd70      	pop	{r4, r5, r6, pc}
 8006de8:	f855 3b04 	ldr.w	r3, [r5], #4
 8006dec:	4798      	blx	r3
 8006dee:	3601      	adds	r6, #1
 8006df0:	e7ee      	b.n	8006dd0 <__libc_init_array+0xc>
 8006df2:	f855 3b04 	ldr.w	r3, [r5], #4
 8006df6:	4798      	blx	r3
 8006df8:	3601      	adds	r6, #1
 8006dfa:	e7f2      	b.n	8006de2 <__libc_init_array+0x1e>
 8006dfc:	080081d0 	.word	0x080081d0
 8006e00:	080081d0 	.word	0x080081d0
 8006e04:	080081d0 	.word	0x080081d0
 8006e08:	080081d4 	.word	0x080081d4

08006e0c <__retarget_lock_init_recursive>:
 8006e0c:	4770      	bx	lr

08006e0e <__retarget_lock_acquire_recursive>:
 8006e0e:	4770      	bx	lr

08006e10 <__retarget_lock_release_recursive>:
 8006e10:	4770      	bx	lr

08006e12 <memcpy>:
 8006e12:	440a      	add	r2, r1
 8006e14:	4291      	cmp	r1, r2
 8006e16:	f100 33ff 	add.w	r3, r0, #4294967295
 8006e1a:	d100      	bne.n	8006e1e <memcpy+0xc>
 8006e1c:	4770      	bx	lr
 8006e1e:	b510      	push	{r4, lr}
 8006e20:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006e24:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006e28:	4291      	cmp	r1, r2
 8006e2a:	d1f9      	bne.n	8006e20 <memcpy+0xe>
 8006e2c:	bd10      	pop	{r4, pc}

08006e2e <memset>:
 8006e2e:	4402      	add	r2, r0
 8006e30:	4603      	mov	r3, r0
 8006e32:	4293      	cmp	r3, r2
 8006e34:	d100      	bne.n	8006e38 <memset+0xa>
 8006e36:	4770      	bx	lr
 8006e38:	f803 1b01 	strb.w	r1, [r3], #1
 8006e3c:	e7f9      	b.n	8006e32 <memset+0x4>
	...

08006e40 <sbrk_aligned>:
 8006e40:	b570      	push	{r4, r5, r6, lr}
 8006e42:	4e0e      	ldr	r6, [pc, #56]	; (8006e7c <sbrk_aligned+0x3c>)
 8006e44:	460c      	mov	r4, r1
 8006e46:	6831      	ldr	r1, [r6, #0]
 8006e48:	4605      	mov	r5, r0
 8006e4a:	b911      	cbnz	r1, 8006e52 <sbrk_aligned+0x12>
 8006e4c:	f000 f90e 	bl	800706c <_sbrk_r>
 8006e50:	6030      	str	r0, [r6, #0]
 8006e52:	4621      	mov	r1, r4
 8006e54:	4628      	mov	r0, r5
 8006e56:	f000 f909 	bl	800706c <_sbrk_r>
 8006e5a:	1c43      	adds	r3, r0, #1
 8006e5c:	d00a      	beq.n	8006e74 <sbrk_aligned+0x34>
 8006e5e:	1cc4      	adds	r4, r0, #3
 8006e60:	f024 0403 	bic.w	r4, r4, #3
 8006e64:	42a0      	cmp	r0, r4
 8006e66:	d007      	beq.n	8006e78 <sbrk_aligned+0x38>
 8006e68:	1a21      	subs	r1, r4, r0
 8006e6a:	4628      	mov	r0, r5
 8006e6c:	f000 f8fe 	bl	800706c <_sbrk_r>
 8006e70:	3001      	adds	r0, #1
 8006e72:	d101      	bne.n	8006e78 <sbrk_aligned+0x38>
 8006e74:	f04f 34ff 	mov.w	r4, #4294967295
 8006e78:	4620      	mov	r0, r4
 8006e7a:	bd70      	pop	{r4, r5, r6, pc}
 8006e7c:	20004c74 	.word	0x20004c74

08006e80 <_malloc_r>:
 8006e80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e84:	1ccd      	adds	r5, r1, #3
 8006e86:	f025 0503 	bic.w	r5, r5, #3
 8006e8a:	3508      	adds	r5, #8
 8006e8c:	2d0c      	cmp	r5, #12
 8006e8e:	bf38      	it	cc
 8006e90:	250c      	movcc	r5, #12
 8006e92:	2d00      	cmp	r5, #0
 8006e94:	4607      	mov	r7, r0
 8006e96:	db01      	blt.n	8006e9c <_malloc_r+0x1c>
 8006e98:	42a9      	cmp	r1, r5
 8006e9a:	d905      	bls.n	8006ea8 <_malloc_r+0x28>
 8006e9c:	230c      	movs	r3, #12
 8006e9e:	603b      	str	r3, [r7, #0]
 8006ea0:	2600      	movs	r6, #0
 8006ea2:	4630      	mov	r0, r6
 8006ea4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ea8:	4e2e      	ldr	r6, [pc, #184]	; (8006f64 <_malloc_r+0xe4>)
 8006eaa:	f000 fa67 	bl	800737c <__malloc_lock>
 8006eae:	6833      	ldr	r3, [r6, #0]
 8006eb0:	461c      	mov	r4, r3
 8006eb2:	bb34      	cbnz	r4, 8006f02 <_malloc_r+0x82>
 8006eb4:	4629      	mov	r1, r5
 8006eb6:	4638      	mov	r0, r7
 8006eb8:	f7ff ffc2 	bl	8006e40 <sbrk_aligned>
 8006ebc:	1c43      	adds	r3, r0, #1
 8006ebe:	4604      	mov	r4, r0
 8006ec0:	d14d      	bne.n	8006f5e <_malloc_r+0xde>
 8006ec2:	6834      	ldr	r4, [r6, #0]
 8006ec4:	4626      	mov	r6, r4
 8006ec6:	2e00      	cmp	r6, #0
 8006ec8:	d140      	bne.n	8006f4c <_malloc_r+0xcc>
 8006eca:	6823      	ldr	r3, [r4, #0]
 8006ecc:	4631      	mov	r1, r6
 8006ece:	4638      	mov	r0, r7
 8006ed0:	eb04 0803 	add.w	r8, r4, r3
 8006ed4:	f000 f8ca 	bl	800706c <_sbrk_r>
 8006ed8:	4580      	cmp	r8, r0
 8006eda:	d13a      	bne.n	8006f52 <_malloc_r+0xd2>
 8006edc:	6821      	ldr	r1, [r4, #0]
 8006ede:	3503      	adds	r5, #3
 8006ee0:	1a6d      	subs	r5, r5, r1
 8006ee2:	f025 0503 	bic.w	r5, r5, #3
 8006ee6:	3508      	adds	r5, #8
 8006ee8:	2d0c      	cmp	r5, #12
 8006eea:	bf38      	it	cc
 8006eec:	250c      	movcc	r5, #12
 8006eee:	4629      	mov	r1, r5
 8006ef0:	4638      	mov	r0, r7
 8006ef2:	f7ff ffa5 	bl	8006e40 <sbrk_aligned>
 8006ef6:	3001      	adds	r0, #1
 8006ef8:	d02b      	beq.n	8006f52 <_malloc_r+0xd2>
 8006efa:	6823      	ldr	r3, [r4, #0]
 8006efc:	442b      	add	r3, r5
 8006efe:	6023      	str	r3, [r4, #0]
 8006f00:	e00e      	b.n	8006f20 <_malloc_r+0xa0>
 8006f02:	6822      	ldr	r2, [r4, #0]
 8006f04:	1b52      	subs	r2, r2, r5
 8006f06:	d41e      	bmi.n	8006f46 <_malloc_r+0xc6>
 8006f08:	2a0b      	cmp	r2, #11
 8006f0a:	d916      	bls.n	8006f3a <_malloc_r+0xba>
 8006f0c:	1961      	adds	r1, r4, r5
 8006f0e:	42a3      	cmp	r3, r4
 8006f10:	6025      	str	r5, [r4, #0]
 8006f12:	bf18      	it	ne
 8006f14:	6059      	strne	r1, [r3, #4]
 8006f16:	6863      	ldr	r3, [r4, #4]
 8006f18:	bf08      	it	eq
 8006f1a:	6031      	streq	r1, [r6, #0]
 8006f1c:	5162      	str	r2, [r4, r5]
 8006f1e:	604b      	str	r3, [r1, #4]
 8006f20:	4638      	mov	r0, r7
 8006f22:	f104 060b 	add.w	r6, r4, #11
 8006f26:	f000 fa2f 	bl	8007388 <__malloc_unlock>
 8006f2a:	f026 0607 	bic.w	r6, r6, #7
 8006f2e:	1d23      	adds	r3, r4, #4
 8006f30:	1af2      	subs	r2, r6, r3
 8006f32:	d0b6      	beq.n	8006ea2 <_malloc_r+0x22>
 8006f34:	1b9b      	subs	r3, r3, r6
 8006f36:	50a3      	str	r3, [r4, r2]
 8006f38:	e7b3      	b.n	8006ea2 <_malloc_r+0x22>
 8006f3a:	6862      	ldr	r2, [r4, #4]
 8006f3c:	42a3      	cmp	r3, r4
 8006f3e:	bf0c      	ite	eq
 8006f40:	6032      	streq	r2, [r6, #0]
 8006f42:	605a      	strne	r2, [r3, #4]
 8006f44:	e7ec      	b.n	8006f20 <_malloc_r+0xa0>
 8006f46:	4623      	mov	r3, r4
 8006f48:	6864      	ldr	r4, [r4, #4]
 8006f4a:	e7b2      	b.n	8006eb2 <_malloc_r+0x32>
 8006f4c:	4634      	mov	r4, r6
 8006f4e:	6876      	ldr	r6, [r6, #4]
 8006f50:	e7b9      	b.n	8006ec6 <_malloc_r+0x46>
 8006f52:	230c      	movs	r3, #12
 8006f54:	603b      	str	r3, [r7, #0]
 8006f56:	4638      	mov	r0, r7
 8006f58:	f000 fa16 	bl	8007388 <__malloc_unlock>
 8006f5c:	e7a1      	b.n	8006ea2 <_malloc_r+0x22>
 8006f5e:	6025      	str	r5, [r4, #0]
 8006f60:	e7de      	b.n	8006f20 <_malloc_r+0xa0>
 8006f62:	bf00      	nop
 8006f64:	20004c70 	.word	0x20004c70

08006f68 <iprintf>:
 8006f68:	b40f      	push	{r0, r1, r2, r3}
 8006f6a:	4b0a      	ldr	r3, [pc, #40]	; (8006f94 <iprintf+0x2c>)
 8006f6c:	b513      	push	{r0, r1, r4, lr}
 8006f6e:	681c      	ldr	r4, [r3, #0]
 8006f70:	b124      	cbz	r4, 8006f7c <iprintf+0x14>
 8006f72:	69a3      	ldr	r3, [r4, #24]
 8006f74:	b913      	cbnz	r3, 8006f7c <iprintf+0x14>
 8006f76:	4620      	mov	r0, r4
 8006f78:	f7ff fe86 	bl	8006c88 <__sinit>
 8006f7c:	ab05      	add	r3, sp, #20
 8006f7e:	9a04      	ldr	r2, [sp, #16]
 8006f80:	68a1      	ldr	r1, [r4, #8]
 8006f82:	9301      	str	r3, [sp, #4]
 8006f84:	4620      	mov	r0, r4
 8006f86:	f000 fbd7 	bl	8007738 <_vfiprintf_r>
 8006f8a:	b002      	add	sp, #8
 8006f8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f90:	b004      	add	sp, #16
 8006f92:	4770      	bx	lr
 8006f94:	20000010 	.word	0x20000010

08006f98 <cleanup_glue>:
 8006f98:	b538      	push	{r3, r4, r5, lr}
 8006f9a:	460c      	mov	r4, r1
 8006f9c:	6809      	ldr	r1, [r1, #0]
 8006f9e:	4605      	mov	r5, r0
 8006fa0:	b109      	cbz	r1, 8006fa6 <cleanup_glue+0xe>
 8006fa2:	f7ff fff9 	bl	8006f98 <cleanup_glue>
 8006fa6:	4621      	mov	r1, r4
 8006fa8:	4628      	mov	r0, r5
 8006faa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006fae:	f000 b9f1 	b.w	8007394 <_free_r>
	...

08006fb4 <_reclaim_reent>:
 8006fb4:	4b2c      	ldr	r3, [pc, #176]	; (8007068 <_reclaim_reent+0xb4>)
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	4283      	cmp	r3, r0
 8006fba:	b570      	push	{r4, r5, r6, lr}
 8006fbc:	4604      	mov	r4, r0
 8006fbe:	d051      	beq.n	8007064 <_reclaim_reent+0xb0>
 8006fc0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006fc2:	b143      	cbz	r3, 8006fd6 <_reclaim_reent+0x22>
 8006fc4:	68db      	ldr	r3, [r3, #12]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d14a      	bne.n	8007060 <_reclaim_reent+0xac>
 8006fca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006fcc:	6819      	ldr	r1, [r3, #0]
 8006fce:	b111      	cbz	r1, 8006fd6 <_reclaim_reent+0x22>
 8006fd0:	4620      	mov	r0, r4
 8006fd2:	f000 f9df 	bl	8007394 <_free_r>
 8006fd6:	6961      	ldr	r1, [r4, #20]
 8006fd8:	b111      	cbz	r1, 8006fe0 <_reclaim_reent+0x2c>
 8006fda:	4620      	mov	r0, r4
 8006fdc:	f000 f9da 	bl	8007394 <_free_r>
 8006fe0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006fe2:	b111      	cbz	r1, 8006fea <_reclaim_reent+0x36>
 8006fe4:	4620      	mov	r0, r4
 8006fe6:	f000 f9d5 	bl	8007394 <_free_r>
 8006fea:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006fec:	b111      	cbz	r1, 8006ff4 <_reclaim_reent+0x40>
 8006fee:	4620      	mov	r0, r4
 8006ff0:	f000 f9d0 	bl	8007394 <_free_r>
 8006ff4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8006ff6:	b111      	cbz	r1, 8006ffe <_reclaim_reent+0x4a>
 8006ff8:	4620      	mov	r0, r4
 8006ffa:	f000 f9cb 	bl	8007394 <_free_r>
 8006ffe:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8007000:	b111      	cbz	r1, 8007008 <_reclaim_reent+0x54>
 8007002:	4620      	mov	r0, r4
 8007004:	f000 f9c6 	bl	8007394 <_free_r>
 8007008:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800700a:	b111      	cbz	r1, 8007012 <_reclaim_reent+0x5e>
 800700c:	4620      	mov	r0, r4
 800700e:	f000 f9c1 	bl	8007394 <_free_r>
 8007012:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8007014:	b111      	cbz	r1, 800701c <_reclaim_reent+0x68>
 8007016:	4620      	mov	r0, r4
 8007018:	f000 f9bc 	bl	8007394 <_free_r>
 800701c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800701e:	b111      	cbz	r1, 8007026 <_reclaim_reent+0x72>
 8007020:	4620      	mov	r0, r4
 8007022:	f000 f9b7 	bl	8007394 <_free_r>
 8007026:	69a3      	ldr	r3, [r4, #24]
 8007028:	b1e3      	cbz	r3, 8007064 <_reclaim_reent+0xb0>
 800702a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800702c:	4620      	mov	r0, r4
 800702e:	4798      	blx	r3
 8007030:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8007032:	b1b9      	cbz	r1, 8007064 <_reclaim_reent+0xb0>
 8007034:	4620      	mov	r0, r4
 8007036:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800703a:	f7ff bfad 	b.w	8006f98 <cleanup_glue>
 800703e:	5949      	ldr	r1, [r1, r5]
 8007040:	b941      	cbnz	r1, 8007054 <_reclaim_reent+0xa0>
 8007042:	3504      	adds	r5, #4
 8007044:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007046:	2d80      	cmp	r5, #128	; 0x80
 8007048:	68d9      	ldr	r1, [r3, #12]
 800704a:	d1f8      	bne.n	800703e <_reclaim_reent+0x8a>
 800704c:	4620      	mov	r0, r4
 800704e:	f000 f9a1 	bl	8007394 <_free_r>
 8007052:	e7ba      	b.n	8006fca <_reclaim_reent+0x16>
 8007054:	680e      	ldr	r6, [r1, #0]
 8007056:	4620      	mov	r0, r4
 8007058:	f000 f99c 	bl	8007394 <_free_r>
 800705c:	4631      	mov	r1, r6
 800705e:	e7ef      	b.n	8007040 <_reclaim_reent+0x8c>
 8007060:	2500      	movs	r5, #0
 8007062:	e7ef      	b.n	8007044 <_reclaim_reent+0x90>
 8007064:	bd70      	pop	{r4, r5, r6, pc}
 8007066:	bf00      	nop
 8007068:	20000010 	.word	0x20000010

0800706c <_sbrk_r>:
 800706c:	b538      	push	{r3, r4, r5, lr}
 800706e:	4d06      	ldr	r5, [pc, #24]	; (8007088 <_sbrk_r+0x1c>)
 8007070:	2300      	movs	r3, #0
 8007072:	4604      	mov	r4, r0
 8007074:	4608      	mov	r0, r1
 8007076:	602b      	str	r3, [r5, #0]
 8007078:	f7f9 ff56 	bl	8000f28 <_sbrk>
 800707c:	1c43      	adds	r3, r0, #1
 800707e:	d102      	bne.n	8007086 <_sbrk_r+0x1a>
 8007080:	682b      	ldr	r3, [r5, #0]
 8007082:	b103      	cbz	r3, 8007086 <_sbrk_r+0x1a>
 8007084:	6023      	str	r3, [r4, #0]
 8007086:	bd38      	pop	{r3, r4, r5, pc}
 8007088:	20004c78 	.word	0x20004c78

0800708c <__sread>:
 800708c:	b510      	push	{r4, lr}
 800708e:	460c      	mov	r4, r1
 8007090:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007094:	f000 fe14 	bl	8007cc0 <_read_r>
 8007098:	2800      	cmp	r0, #0
 800709a:	bfab      	itete	ge
 800709c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800709e:	89a3      	ldrhlt	r3, [r4, #12]
 80070a0:	181b      	addge	r3, r3, r0
 80070a2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80070a6:	bfac      	ite	ge
 80070a8:	6563      	strge	r3, [r4, #84]	; 0x54
 80070aa:	81a3      	strhlt	r3, [r4, #12]
 80070ac:	bd10      	pop	{r4, pc}

080070ae <__swrite>:
 80070ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80070b2:	461f      	mov	r7, r3
 80070b4:	898b      	ldrh	r3, [r1, #12]
 80070b6:	05db      	lsls	r3, r3, #23
 80070b8:	4605      	mov	r5, r0
 80070ba:	460c      	mov	r4, r1
 80070bc:	4616      	mov	r6, r2
 80070be:	d505      	bpl.n	80070cc <__swrite+0x1e>
 80070c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070c4:	2302      	movs	r3, #2
 80070c6:	2200      	movs	r2, #0
 80070c8:	f000 f946 	bl	8007358 <_lseek_r>
 80070cc:	89a3      	ldrh	r3, [r4, #12]
 80070ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80070d2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80070d6:	81a3      	strh	r3, [r4, #12]
 80070d8:	4632      	mov	r2, r6
 80070da:	463b      	mov	r3, r7
 80070dc:	4628      	mov	r0, r5
 80070de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80070e2:	f000 b855 	b.w	8007190 <_write_r>

080070e6 <__sseek>:
 80070e6:	b510      	push	{r4, lr}
 80070e8:	460c      	mov	r4, r1
 80070ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070ee:	f000 f933 	bl	8007358 <_lseek_r>
 80070f2:	1c43      	adds	r3, r0, #1
 80070f4:	89a3      	ldrh	r3, [r4, #12]
 80070f6:	bf15      	itete	ne
 80070f8:	6560      	strne	r0, [r4, #84]	; 0x54
 80070fa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80070fe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007102:	81a3      	strheq	r3, [r4, #12]
 8007104:	bf18      	it	ne
 8007106:	81a3      	strhne	r3, [r4, #12]
 8007108:	bd10      	pop	{r4, pc}

0800710a <__sclose>:
 800710a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800710e:	f000 b851 	b.w	80071b4 <_close_r>

08007112 <_vasniprintf_r>:
 8007112:	b530      	push	{r4, r5, lr}
 8007114:	4615      	mov	r5, r2
 8007116:	b09b      	sub	sp, #108	; 0x6c
 8007118:	682c      	ldr	r4, [r5, #0]
 800711a:	461a      	mov	r2, r3
 800711c:	b189      	cbz	r1, 8007142 <_vasniprintf_r+0x30>
 800711e:	2c00      	cmp	r4, #0
 8007120:	bf12      	itee	ne
 8007122:	f44f 63c1 	movne.w	r3, #1544	; 0x608
 8007126:	f44f 7322 	moveq.w	r3, #648	; 0x288
 800712a:	2100      	moveq	r1, #0
 800712c:	2c00      	cmp	r4, #0
 800712e:	f8ad 300c 	strh.w	r3, [sp, #12]
 8007132:	9100      	str	r1, [sp, #0]
 8007134:	9104      	str	r1, [sp, #16]
 8007136:	da08      	bge.n	800714a <_vasniprintf_r+0x38>
 8007138:	238b      	movs	r3, #139	; 0x8b
 800713a:	6003      	str	r3, [r0, #0]
 800713c:	2000      	movs	r0, #0
 800713e:	b01b      	add	sp, #108	; 0x6c
 8007140:	bd30      	pop	{r4, r5, pc}
 8007142:	f44f 7322 	mov.w	r3, #648	; 0x288
 8007146:	460c      	mov	r4, r1
 8007148:	e7f0      	b.n	800712c <_vasniprintf_r+0x1a>
 800714a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800714e:	f8ad 300e 	strh.w	r3, [sp, #14]
 8007152:	4669      	mov	r1, sp
 8007154:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007156:	9402      	str	r4, [sp, #8]
 8007158:	9405      	str	r4, [sp, #20]
 800715a:	f000 f9c3 	bl	80074e4 <_svfiprintf_r>
 800715e:	1e03      	subs	r3, r0, #0
 8007160:	bfa4      	itt	ge
 8007162:	602b      	strge	r3, [r5, #0]
 8007164:	9b00      	ldrge	r3, [sp, #0]
 8007166:	f04f 0000 	mov.w	r0, #0
 800716a:	bfa4      	itt	ge
 800716c:	7018      	strbge	r0, [r3, #0]
 800716e:	9804      	ldrge	r0, [sp, #16]
 8007170:	e7e5      	b.n	800713e <_vasniprintf_r+0x2c>
	...

08007174 <vasniprintf>:
 8007174:	b507      	push	{r0, r1, r2, lr}
 8007176:	9300      	str	r3, [sp, #0]
 8007178:	4613      	mov	r3, r2
 800717a:	460a      	mov	r2, r1
 800717c:	4601      	mov	r1, r0
 800717e:	4803      	ldr	r0, [pc, #12]	; (800718c <vasniprintf+0x18>)
 8007180:	6800      	ldr	r0, [r0, #0]
 8007182:	f7ff ffc6 	bl	8007112 <_vasniprintf_r>
 8007186:	b003      	add	sp, #12
 8007188:	f85d fb04 	ldr.w	pc, [sp], #4
 800718c:	20000010 	.word	0x20000010

08007190 <_write_r>:
 8007190:	b538      	push	{r3, r4, r5, lr}
 8007192:	4d07      	ldr	r5, [pc, #28]	; (80071b0 <_write_r+0x20>)
 8007194:	4604      	mov	r4, r0
 8007196:	4608      	mov	r0, r1
 8007198:	4611      	mov	r1, r2
 800719a:	2200      	movs	r2, #0
 800719c:	602a      	str	r2, [r5, #0]
 800719e:	461a      	mov	r2, r3
 80071a0:	f7f9 fe71 	bl	8000e86 <_write>
 80071a4:	1c43      	adds	r3, r0, #1
 80071a6:	d102      	bne.n	80071ae <_write_r+0x1e>
 80071a8:	682b      	ldr	r3, [r5, #0]
 80071aa:	b103      	cbz	r3, 80071ae <_write_r+0x1e>
 80071ac:	6023      	str	r3, [r4, #0]
 80071ae:	bd38      	pop	{r3, r4, r5, pc}
 80071b0:	20004c78 	.word	0x20004c78

080071b4 <_close_r>:
 80071b4:	b538      	push	{r3, r4, r5, lr}
 80071b6:	4d06      	ldr	r5, [pc, #24]	; (80071d0 <_close_r+0x1c>)
 80071b8:	2300      	movs	r3, #0
 80071ba:	4604      	mov	r4, r0
 80071bc:	4608      	mov	r0, r1
 80071be:	602b      	str	r3, [r5, #0]
 80071c0:	f7f9 fe7d 	bl	8000ebe <_close>
 80071c4:	1c43      	adds	r3, r0, #1
 80071c6:	d102      	bne.n	80071ce <_close_r+0x1a>
 80071c8:	682b      	ldr	r3, [r5, #0]
 80071ca:	b103      	cbz	r3, 80071ce <_close_r+0x1a>
 80071cc:	6023      	str	r3, [r4, #0]
 80071ce:	bd38      	pop	{r3, r4, r5, pc}
 80071d0:	20004c78 	.word	0x20004c78

080071d4 <__sflush_r>:
 80071d4:	898a      	ldrh	r2, [r1, #12]
 80071d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80071da:	4605      	mov	r5, r0
 80071dc:	0710      	lsls	r0, r2, #28
 80071de:	460c      	mov	r4, r1
 80071e0:	d458      	bmi.n	8007294 <__sflush_r+0xc0>
 80071e2:	684b      	ldr	r3, [r1, #4]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	dc05      	bgt.n	80071f4 <__sflush_r+0x20>
 80071e8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	dc02      	bgt.n	80071f4 <__sflush_r+0x20>
 80071ee:	2000      	movs	r0, #0
 80071f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80071f4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80071f6:	2e00      	cmp	r6, #0
 80071f8:	d0f9      	beq.n	80071ee <__sflush_r+0x1a>
 80071fa:	2300      	movs	r3, #0
 80071fc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007200:	682f      	ldr	r7, [r5, #0]
 8007202:	602b      	str	r3, [r5, #0]
 8007204:	d032      	beq.n	800726c <__sflush_r+0x98>
 8007206:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007208:	89a3      	ldrh	r3, [r4, #12]
 800720a:	075a      	lsls	r2, r3, #29
 800720c:	d505      	bpl.n	800721a <__sflush_r+0x46>
 800720e:	6863      	ldr	r3, [r4, #4]
 8007210:	1ac0      	subs	r0, r0, r3
 8007212:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007214:	b10b      	cbz	r3, 800721a <__sflush_r+0x46>
 8007216:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007218:	1ac0      	subs	r0, r0, r3
 800721a:	2300      	movs	r3, #0
 800721c:	4602      	mov	r2, r0
 800721e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007220:	6a21      	ldr	r1, [r4, #32]
 8007222:	4628      	mov	r0, r5
 8007224:	47b0      	blx	r6
 8007226:	1c43      	adds	r3, r0, #1
 8007228:	89a3      	ldrh	r3, [r4, #12]
 800722a:	d106      	bne.n	800723a <__sflush_r+0x66>
 800722c:	6829      	ldr	r1, [r5, #0]
 800722e:	291d      	cmp	r1, #29
 8007230:	d82c      	bhi.n	800728c <__sflush_r+0xb8>
 8007232:	4a2a      	ldr	r2, [pc, #168]	; (80072dc <__sflush_r+0x108>)
 8007234:	40ca      	lsrs	r2, r1
 8007236:	07d6      	lsls	r6, r2, #31
 8007238:	d528      	bpl.n	800728c <__sflush_r+0xb8>
 800723a:	2200      	movs	r2, #0
 800723c:	6062      	str	r2, [r4, #4]
 800723e:	04d9      	lsls	r1, r3, #19
 8007240:	6922      	ldr	r2, [r4, #16]
 8007242:	6022      	str	r2, [r4, #0]
 8007244:	d504      	bpl.n	8007250 <__sflush_r+0x7c>
 8007246:	1c42      	adds	r2, r0, #1
 8007248:	d101      	bne.n	800724e <__sflush_r+0x7a>
 800724a:	682b      	ldr	r3, [r5, #0]
 800724c:	b903      	cbnz	r3, 8007250 <__sflush_r+0x7c>
 800724e:	6560      	str	r0, [r4, #84]	; 0x54
 8007250:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007252:	602f      	str	r7, [r5, #0]
 8007254:	2900      	cmp	r1, #0
 8007256:	d0ca      	beq.n	80071ee <__sflush_r+0x1a>
 8007258:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800725c:	4299      	cmp	r1, r3
 800725e:	d002      	beq.n	8007266 <__sflush_r+0x92>
 8007260:	4628      	mov	r0, r5
 8007262:	f000 f897 	bl	8007394 <_free_r>
 8007266:	2000      	movs	r0, #0
 8007268:	6360      	str	r0, [r4, #52]	; 0x34
 800726a:	e7c1      	b.n	80071f0 <__sflush_r+0x1c>
 800726c:	6a21      	ldr	r1, [r4, #32]
 800726e:	2301      	movs	r3, #1
 8007270:	4628      	mov	r0, r5
 8007272:	47b0      	blx	r6
 8007274:	1c41      	adds	r1, r0, #1
 8007276:	d1c7      	bne.n	8007208 <__sflush_r+0x34>
 8007278:	682b      	ldr	r3, [r5, #0]
 800727a:	2b00      	cmp	r3, #0
 800727c:	d0c4      	beq.n	8007208 <__sflush_r+0x34>
 800727e:	2b1d      	cmp	r3, #29
 8007280:	d001      	beq.n	8007286 <__sflush_r+0xb2>
 8007282:	2b16      	cmp	r3, #22
 8007284:	d101      	bne.n	800728a <__sflush_r+0xb6>
 8007286:	602f      	str	r7, [r5, #0]
 8007288:	e7b1      	b.n	80071ee <__sflush_r+0x1a>
 800728a:	89a3      	ldrh	r3, [r4, #12]
 800728c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007290:	81a3      	strh	r3, [r4, #12]
 8007292:	e7ad      	b.n	80071f0 <__sflush_r+0x1c>
 8007294:	690f      	ldr	r7, [r1, #16]
 8007296:	2f00      	cmp	r7, #0
 8007298:	d0a9      	beq.n	80071ee <__sflush_r+0x1a>
 800729a:	0793      	lsls	r3, r2, #30
 800729c:	680e      	ldr	r6, [r1, #0]
 800729e:	bf08      	it	eq
 80072a0:	694b      	ldreq	r3, [r1, #20]
 80072a2:	600f      	str	r7, [r1, #0]
 80072a4:	bf18      	it	ne
 80072a6:	2300      	movne	r3, #0
 80072a8:	eba6 0807 	sub.w	r8, r6, r7
 80072ac:	608b      	str	r3, [r1, #8]
 80072ae:	f1b8 0f00 	cmp.w	r8, #0
 80072b2:	dd9c      	ble.n	80071ee <__sflush_r+0x1a>
 80072b4:	6a21      	ldr	r1, [r4, #32]
 80072b6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80072b8:	4643      	mov	r3, r8
 80072ba:	463a      	mov	r2, r7
 80072bc:	4628      	mov	r0, r5
 80072be:	47b0      	blx	r6
 80072c0:	2800      	cmp	r0, #0
 80072c2:	dc06      	bgt.n	80072d2 <__sflush_r+0xfe>
 80072c4:	89a3      	ldrh	r3, [r4, #12]
 80072c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80072ca:	81a3      	strh	r3, [r4, #12]
 80072cc:	f04f 30ff 	mov.w	r0, #4294967295
 80072d0:	e78e      	b.n	80071f0 <__sflush_r+0x1c>
 80072d2:	4407      	add	r7, r0
 80072d4:	eba8 0800 	sub.w	r8, r8, r0
 80072d8:	e7e9      	b.n	80072ae <__sflush_r+0xda>
 80072da:	bf00      	nop
 80072dc:	20400001 	.word	0x20400001

080072e0 <_fflush_r>:
 80072e0:	b538      	push	{r3, r4, r5, lr}
 80072e2:	690b      	ldr	r3, [r1, #16]
 80072e4:	4605      	mov	r5, r0
 80072e6:	460c      	mov	r4, r1
 80072e8:	b913      	cbnz	r3, 80072f0 <_fflush_r+0x10>
 80072ea:	2500      	movs	r5, #0
 80072ec:	4628      	mov	r0, r5
 80072ee:	bd38      	pop	{r3, r4, r5, pc}
 80072f0:	b118      	cbz	r0, 80072fa <_fflush_r+0x1a>
 80072f2:	6983      	ldr	r3, [r0, #24]
 80072f4:	b90b      	cbnz	r3, 80072fa <_fflush_r+0x1a>
 80072f6:	f7ff fcc7 	bl	8006c88 <__sinit>
 80072fa:	4b14      	ldr	r3, [pc, #80]	; (800734c <_fflush_r+0x6c>)
 80072fc:	429c      	cmp	r4, r3
 80072fe:	d11b      	bne.n	8007338 <_fflush_r+0x58>
 8007300:	686c      	ldr	r4, [r5, #4]
 8007302:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007306:	2b00      	cmp	r3, #0
 8007308:	d0ef      	beq.n	80072ea <_fflush_r+0xa>
 800730a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800730c:	07d0      	lsls	r0, r2, #31
 800730e:	d404      	bmi.n	800731a <_fflush_r+0x3a>
 8007310:	0599      	lsls	r1, r3, #22
 8007312:	d402      	bmi.n	800731a <_fflush_r+0x3a>
 8007314:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007316:	f7ff fd7a 	bl	8006e0e <__retarget_lock_acquire_recursive>
 800731a:	4628      	mov	r0, r5
 800731c:	4621      	mov	r1, r4
 800731e:	f7ff ff59 	bl	80071d4 <__sflush_r>
 8007322:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007324:	07da      	lsls	r2, r3, #31
 8007326:	4605      	mov	r5, r0
 8007328:	d4e0      	bmi.n	80072ec <_fflush_r+0xc>
 800732a:	89a3      	ldrh	r3, [r4, #12]
 800732c:	059b      	lsls	r3, r3, #22
 800732e:	d4dd      	bmi.n	80072ec <_fflush_r+0xc>
 8007330:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007332:	f7ff fd6d 	bl	8006e10 <__retarget_lock_release_recursive>
 8007336:	e7d9      	b.n	80072ec <_fflush_r+0xc>
 8007338:	4b05      	ldr	r3, [pc, #20]	; (8007350 <_fflush_r+0x70>)
 800733a:	429c      	cmp	r4, r3
 800733c:	d101      	bne.n	8007342 <_fflush_r+0x62>
 800733e:	68ac      	ldr	r4, [r5, #8]
 8007340:	e7df      	b.n	8007302 <_fflush_r+0x22>
 8007342:	4b04      	ldr	r3, [pc, #16]	; (8007354 <_fflush_r+0x74>)
 8007344:	429c      	cmp	r4, r3
 8007346:	bf08      	it	eq
 8007348:	68ec      	ldreq	r4, [r5, #12]
 800734a:	e7da      	b.n	8007302 <_fflush_r+0x22>
 800734c:	08008150 	.word	0x08008150
 8007350:	08008170 	.word	0x08008170
 8007354:	08008130 	.word	0x08008130

08007358 <_lseek_r>:
 8007358:	b538      	push	{r3, r4, r5, lr}
 800735a:	4d07      	ldr	r5, [pc, #28]	; (8007378 <_lseek_r+0x20>)
 800735c:	4604      	mov	r4, r0
 800735e:	4608      	mov	r0, r1
 8007360:	4611      	mov	r1, r2
 8007362:	2200      	movs	r2, #0
 8007364:	602a      	str	r2, [r5, #0]
 8007366:	461a      	mov	r2, r3
 8007368:	f7f9 fdd0 	bl	8000f0c <_lseek>
 800736c:	1c43      	adds	r3, r0, #1
 800736e:	d102      	bne.n	8007376 <_lseek_r+0x1e>
 8007370:	682b      	ldr	r3, [r5, #0]
 8007372:	b103      	cbz	r3, 8007376 <_lseek_r+0x1e>
 8007374:	6023      	str	r3, [r4, #0]
 8007376:	bd38      	pop	{r3, r4, r5, pc}
 8007378:	20004c78 	.word	0x20004c78

0800737c <__malloc_lock>:
 800737c:	4801      	ldr	r0, [pc, #4]	; (8007384 <__malloc_lock+0x8>)
 800737e:	f7ff bd46 	b.w	8006e0e <__retarget_lock_acquire_recursive>
 8007382:	bf00      	nop
 8007384:	20004c6c 	.word	0x20004c6c

08007388 <__malloc_unlock>:
 8007388:	4801      	ldr	r0, [pc, #4]	; (8007390 <__malloc_unlock+0x8>)
 800738a:	f7ff bd41 	b.w	8006e10 <__retarget_lock_release_recursive>
 800738e:	bf00      	nop
 8007390:	20004c6c 	.word	0x20004c6c

08007394 <_free_r>:
 8007394:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007396:	2900      	cmp	r1, #0
 8007398:	d044      	beq.n	8007424 <_free_r+0x90>
 800739a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800739e:	9001      	str	r0, [sp, #4]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	f1a1 0404 	sub.w	r4, r1, #4
 80073a6:	bfb8      	it	lt
 80073a8:	18e4      	addlt	r4, r4, r3
 80073aa:	f7ff ffe7 	bl	800737c <__malloc_lock>
 80073ae:	4a1e      	ldr	r2, [pc, #120]	; (8007428 <_free_r+0x94>)
 80073b0:	9801      	ldr	r0, [sp, #4]
 80073b2:	6813      	ldr	r3, [r2, #0]
 80073b4:	b933      	cbnz	r3, 80073c4 <_free_r+0x30>
 80073b6:	6063      	str	r3, [r4, #4]
 80073b8:	6014      	str	r4, [r2, #0]
 80073ba:	b003      	add	sp, #12
 80073bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80073c0:	f7ff bfe2 	b.w	8007388 <__malloc_unlock>
 80073c4:	42a3      	cmp	r3, r4
 80073c6:	d908      	bls.n	80073da <_free_r+0x46>
 80073c8:	6825      	ldr	r5, [r4, #0]
 80073ca:	1961      	adds	r1, r4, r5
 80073cc:	428b      	cmp	r3, r1
 80073ce:	bf01      	itttt	eq
 80073d0:	6819      	ldreq	r1, [r3, #0]
 80073d2:	685b      	ldreq	r3, [r3, #4]
 80073d4:	1949      	addeq	r1, r1, r5
 80073d6:	6021      	streq	r1, [r4, #0]
 80073d8:	e7ed      	b.n	80073b6 <_free_r+0x22>
 80073da:	461a      	mov	r2, r3
 80073dc:	685b      	ldr	r3, [r3, #4]
 80073de:	b10b      	cbz	r3, 80073e4 <_free_r+0x50>
 80073e0:	42a3      	cmp	r3, r4
 80073e2:	d9fa      	bls.n	80073da <_free_r+0x46>
 80073e4:	6811      	ldr	r1, [r2, #0]
 80073e6:	1855      	adds	r5, r2, r1
 80073e8:	42a5      	cmp	r5, r4
 80073ea:	d10b      	bne.n	8007404 <_free_r+0x70>
 80073ec:	6824      	ldr	r4, [r4, #0]
 80073ee:	4421      	add	r1, r4
 80073f0:	1854      	adds	r4, r2, r1
 80073f2:	42a3      	cmp	r3, r4
 80073f4:	6011      	str	r1, [r2, #0]
 80073f6:	d1e0      	bne.n	80073ba <_free_r+0x26>
 80073f8:	681c      	ldr	r4, [r3, #0]
 80073fa:	685b      	ldr	r3, [r3, #4]
 80073fc:	6053      	str	r3, [r2, #4]
 80073fe:	4421      	add	r1, r4
 8007400:	6011      	str	r1, [r2, #0]
 8007402:	e7da      	b.n	80073ba <_free_r+0x26>
 8007404:	d902      	bls.n	800740c <_free_r+0x78>
 8007406:	230c      	movs	r3, #12
 8007408:	6003      	str	r3, [r0, #0]
 800740a:	e7d6      	b.n	80073ba <_free_r+0x26>
 800740c:	6825      	ldr	r5, [r4, #0]
 800740e:	1961      	adds	r1, r4, r5
 8007410:	428b      	cmp	r3, r1
 8007412:	bf04      	itt	eq
 8007414:	6819      	ldreq	r1, [r3, #0]
 8007416:	685b      	ldreq	r3, [r3, #4]
 8007418:	6063      	str	r3, [r4, #4]
 800741a:	bf04      	itt	eq
 800741c:	1949      	addeq	r1, r1, r5
 800741e:	6021      	streq	r1, [r4, #0]
 8007420:	6054      	str	r4, [r2, #4]
 8007422:	e7ca      	b.n	80073ba <_free_r+0x26>
 8007424:	b003      	add	sp, #12
 8007426:	bd30      	pop	{r4, r5, pc}
 8007428:	20004c70 	.word	0x20004c70

0800742c <__ssputs_r>:
 800742c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007430:	688e      	ldr	r6, [r1, #8]
 8007432:	429e      	cmp	r6, r3
 8007434:	4682      	mov	sl, r0
 8007436:	460c      	mov	r4, r1
 8007438:	4690      	mov	r8, r2
 800743a:	461f      	mov	r7, r3
 800743c:	d838      	bhi.n	80074b0 <__ssputs_r+0x84>
 800743e:	898a      	ldrh	r2, [r1, #12]
 8007440:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007444:	d032      	beq.n	80074ac <__ssputs_r+0x80>
 8007446:	6825      	ldr	r5, [r4, #0]
 8007448:	6909      	ldr	r1, [r1, #16]
 800744a:	eba5 0901 	sub.w	r9, r5, r1
 800744e:	6965      	ldr	r5, [r4, #20]
 8007450:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007454:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007458:	3301      	adds	r3, #1
 800745a:	444b      	add	r3, r9
 800745c:	106d      	asrs	r5, r5, #1
 800745e:	429d      	cmp	r5, r3
 8007460:	bf38      	it	cc
 8007462:	461d      	movcc	r5, r3
 8007464:	0553      	lsls	r3, r2, #21
 8007466:	d531      	bpl.n	80074cc <__ssputs_r+0xa0>
 8007468:	4629      	mov	r1, r5
 800746a:	f7ff fd09 	bl	8006e80 <_malloc_r>
 800746e:	4606      	mov	r6, r0
 8007470:	b950      	cbnz	r0, 8007488 <__ssputs_r+0x5c>
 8007472:	230c      	movs	r3, #12
 8007474:	f8ca 3000 	str.w	r3, [sl]
 8007478:	89a3      	ldrh	r3, [r4, #12]
 800747a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800747e:	81a3      	strh	r3, [r4, #12]
 8007480:	f04f 30ff 	mov.w	r0, #4294967295
 8007484:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007488:	6921      	ldr	r1, [r4, #16]
 800748a:	464a      	mov	r2, r9
 800748c:	f7ff fcc1 	bl	8006e12 <memcpy>
 8007490:	89a3      	ldrh	r3, [r4, #12]
 8007492:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007496:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800749a:	81a3      	strh	r3, [r4, #12]
 800749c:	6126      	str	r6, [r4, #16]
 800749e:	6165      	str	r5, [r4, #20]
 80074a0:	444e      	add	r6, r9
 80074a2:	eba5 0509 	sub.w	r5, r5, r9
 80074a6:	6026      	str	r6, [r4, #0]
 80074a8:	60a5      	str	r5, [r4, #8]
 80074aa:	463e      	mov	r6, r7
 80074ac:	42be      	cmp	r6, r7
 80074ae:	d900      	bls.n	80074b2 <__ssputs_r+0x86>
 80074b0:	463e      	mov	r6, r7
 80074b2:	6820      	ldr	r0, [r4, #0]
 80074b4:	4632      	mov	r2, r6
 80074b6:	4641      	mov	r1, r8
 80074b8:	f000 fd3a 	bl	8007f30 <memmove>
 80074bc:	68a3      	ldr	r3, [r4, #8]
 80074be:	1b9b      	subs	r3, r3, r6
 80074c0:	60a3      	str	r3, [r4, #8]
 80074c2:	6823      	ldr	r3, [r4, #0]
 80074c4:	4433      	add	r3, r6
 80074c6:	6023      	str	r3, [r4, #0]
 80074c8:	2000      	movs	r0, #0
 80074ca:	e7db      	b.n	8007484 <__ssputs_r+0x58>
 80074cc:	462a      	mov	r2, r5
 80074ce:	f000 fd49 	bl	8007f64 <_realloc_r>
 80074d2:	4606      	mov	r6, r0
 80074d4:	2800      	cmp	r0, #0
 80074d6:	d1e1      	bne.n	800749c <__ssputs_r+0x70>
 80074d8:	6921      	ldr	r1, [r4, #16]
 80074da:	4650      	mov	r0, sl
 80074dc:	f7ff ff5a 	bl	8007394 <_free_r>
 80074e0:	e7c7      	b.n	8007472 <__ssputs_r+0x46>
	...

080074e4 <_svfiprintf_r>:
 80074e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074e8:	4698      	mov	r8, r3
 80074ea:	898b      	ldrh	r3, [r1, #12]
 80074ec:	061b      	lsls	r3, r3, #24
 80074ee:	b09d      	sub	sp, #116	; 0x74
 80074f0:	4607      	mov	r7, r0
 80074f2:	460d      	mov	r5, r1
 80074f4:	4614      	mov	r4, r2
 80074f6:	d50e      	bpl.n	8007516 <_svfiprintf_r+0x32>
 80074f8:	690b      	ldr	r3, [r1, #16]
 80074fa:	b963      	cbnz	r3, 8007516 <_svfiprintf_r+0x32>
 80074fc:	2140      	movs	r1, #64	; 0x40
 80074fe:	f7ff fcbf 	bl	8006e80 <_malloc_r>
 8007502:	6028      	str	r0, [r5, #0]
 8007504:	6128      	str	r0, [r5, #16]
 8007506:	b920      	cbnz	r0, 8007512 <_svfiprintf_r+0x2e>
 8007508:	230c      	movs	r3, #12
 800750a:	603b      	str	r3, [r7, #0]
 800750c:	f04f 30ff 	mov.w	r0, #4294967295
 8007510:	e0d1      	b.n	80076b6 <_svfiprintf_r+0x1d2>
 8007512:	2340      	movs	r3, #64	; 0x40
 8007514:	616b      	str	r3, [r5, #20]
 8007516:	2300      	movs	r3, #0
 8007518:	9309      	str	r3, [sp, #36]	; 0x24
 800751a:	2320      	movs	r3, #32
 800751c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007520:	f8cd 800c 	str.w	r8, [sp, #12]
 8007524:	2330      	movs	r3, #48	; 0x30
 8007526:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80076d0 <_svfiprintf_r+0x1ec>
 800752a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800752e:	f04f 0901 	mov.w	r9, #1
 8007532:	4623      	mov	r3, r4
 8007534:	469a      	mov	sl, r3
 8007536:	f813 2b01 	ldrb.w	r2, [r3], #1
 800753a:	b10a      	cbz	r2, 8007540 <_svfiprintf_r+0x5c>
 800753c:	2a25      	cmp	r2, #37	; 0x25
 800753e:	d1f9      	bne.n	8007534 <_svfiprintf_r+0x50>
 8007540:	ebba 0b04 	subs.w	fp, sl, r4
 8007544:	d00b      	beq.n	800755e <_svfiprintf_r+0x7a>
 8007546:	465b      	mov	r3, fp
 8007548:	4622      	mov	r2, r4
 800754a:	4629      	mov	r1, r5
 800754c:	4638      	mov	r0, r7
 800754e:	f7ff ff6d 	bl	800742c <__ssputs_r>
 8007552:	3001      	adds	r0, #1
 8007554:	f000 80aa 	beq.w	80076ac <_svfiprintf_r+0x1c8>
 8007558:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800755a:	445a      	add	r2, fp
 800755c:	9209      	str	r2, [sp, #36]	; 0x24
 800755e:	f89a 3000 	ldrb.w	r3, [sl]
 8007562:	2b00      	cmp	r3, #0
 8007564:	f000 80a2 	beq.w	80076ac <_svfiprintf_r+0x1c8>
 8007568:	2300      	movs	r3, #0
 800756a:	f04f 32ff 	mov.w	r2, #4294967295
 800756e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007572:	f10a 0a01 	add.w	sl, sl, #1
 8007576:	9304      	str	r3, [sp, #16]
 8007578:	9307      	str	r3, [sp, #28]
 800757a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800757e:	931a      	str	r3, [sp, #104]	; 0x68
 8007580:	4654      	mov	r4, sl
 8007582:	2205      	movs	r2, #5
 8007584:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007588:	4851      	ldr	r0, [pc, #324]	; (80076d0 <_svfiprintf_r+0x1ec>)
 800758a:	f7f8 fe31 	bl	80001f0 <memchr>
 800758e:	9a04      	ldr	r2, [sp, #16]
 8007590:	b9d8      	cbnz	r0, 80075ca <_svfiprintf_r+0xe6>
 8007592:	06d0      	lsls	r0, r2, #27
 8007594:	bf44      	itt	mi
 8007596:	2320      	movmi	r3, #32
 8007598:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800759c:	0711      	lsls	r1, r2, #28
 800759e:	bf44      	itt	mi
 80075a0:	232b      	movmi	r3, #43	; 0x2b
 80075a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80075a6:	f89a 3000 	ldrb.w	r3, [sl]
 80075aa:	2b2a      	cmp	r3, #42	; 0x2a
 80075ac:	d015      	beq.n	80075da <_svfiprintf_r+0xf6>
 80075ae:	9a07      	ldr	r2, [sp, #28]
 80075b0:	4654      	mov	r4, sl
 80075b2:	2000      	movs	r0, #0
 80075b4:	f04f 0c0a 	mov.w	ip, #10
 80075b8:	4621      	mov	r1, r4
 80075ba:	f811 3b01 	ldrb.w	r3, [r1], #1
 80075be:	3b30      	subs	r3, #48	; 0x30
 80075c0:	2b09      	cmp	r3, #9
 80075c2:	d94e      	bls.n	8007662 <_svfiprintf_r+0x17e>
 80075c4:	b1b0      	cbz	r0, 80075f4 <_svfiprintf_r+0x110>
 80075c6:	9207      	str	r2, [sp, #28]
 80075c8:	e014      	b.n	80075f4 <_svfiprintf_r+0x110>
 80075ca:	eba0 0308 	sub.w	r3, r0, r8
 80075ce:	fa09 f303 	lsl.w	r3, r9, r3
 80075d2:	4313      	orrs	r3, r2
 80075d4:	9304      	str	r3, [sp, #16]
 80075d6:	46a2      	mov	sl, r4
 80075d8:	e7d2      	b.n	8007580 <_svfiprintf_r+0x9c>
 80075da:	9b03      	ldr	r3, [sp, #12]
 80075dc:	1d19      	adds	r1, r3, #4
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	9103      	str	r1, [sp, #12]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	bfbb      	ittet	lt
 80075e6:	425b      	neglt	r3, r3
 80075e8:	f042 0202 	orrlt.w	r2, r2, #2
 80075ec:	9307      	strge	r3, [sp, #28]
 80075ee:	9307      	strlt	r3, [sp, #28]
 80075f0:	bfb8      	it	lt
 80075f2:	9204      	strlt	r2, [sp, #16]
 80075f4:	7823      	ldrb	r3, [r4, #0]
 80075f6:	2b2e      	cmp	r3, #46	; 0x2e
 80075f8:	d10c      	bne.n	8007614 <_svfiprintf_r+0x130>
 80075fa:	7863      	ldrb	r3, [r4, #1]
 80075fc:	2b2a      	cmp	r3, #42	; 0x2a
 80075fe:	d135      	bne.n	800766c <_svfiprintf_r+0x188>
 8007600:	9b03      	ldr	r3, [sp, #12]
 8007602:	1d1a      	adds	r2, r3, #4
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	9203      	str	r2, [sp, #12]
 8007608:	2b00      	cmp	r3, #0
 800760a:	bfb8      	it	lt
 800760c:	f04f 33ff 	movlt.w	r3, #4294967295
 8007610:	3402      	adds	r4, #2
 8007612:	9305      	str	r3, [sp, #20]
 8007614:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80076e0 <_svfiprintf_r+0x1fc>
 8007618:	7821      	ldrb	r1, [r4, #0]
 800761a:	2203      	movs	r2, #3
 800761c:	4650      	mov	r0, sl
 800761e:	f7f8 fde7 	bl	80001f0 <memchr>
 8007622:	b140      	cbz	r0, 8007636 <_svfiprintf_r+0x152>
 8007624:	2340      	movs	r3, #64	; 0x40
 8007626:	eba0 000a 	sub.w	r0, r0, sl
 800762a:	fa03 f000 	lsl.w	r0, r3, r0
 800762e:	9b04      	ldr	r3, [sp, #16]
 8007630:	4303      	orrs	r3, r0
 8007632:	3401      	adds	r4, #1
 8007634:	9304      	str	r3, [sp, #16]
 8007636:	f814 1b01 	ldrb.w	r1, [r4], #1
 800763a:	4826      	ldr	r0, [pc, #152]	; (80076d4 <_svfiprintf_r+0x1f0>)
 800763c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007640:	2206      	movs	r2, #6
 8007642:	f7f8 fdd5 	bl	80001f0 <memchr>
 8007646:	2800      	cmp	r0, #0
 8007648:	d038      	beq.n	80076bc <_svfiprintf_r+0x1d8>
 800764a:	4b23      	ldr	r3, [pc, #140]	; (80076d8 <_svfiprintf_r+0x1f4>)
 800764c:	bb1b      	cbnz	r3, 8007696 <_svfiprintf_r+0x1b2>
 800764e:	9b03      	ldr	r3, [sp, #12]
 8007650:	3307      	adds	r3, #7
 8007652:	f023 0307 	bic.w	r3, r3, #7
 8007656:	3308      	adds	r3, #8
 8007658:	9303      	str	r3, [sp, #12]
 800765a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800765c:	4433      	add	r3, r6
 800765e:	9309      	str	r3, [sp, #36]	; 0x24
 8007660:	e767      	b.n	8007532 <_svfiprintf_r+0x4e>
 8007662:	fb0c 3202 	mla	r2, ip, r2, r3
 8007666:	460c      	mov	r4, r1
 8007668:	2001      	movs	r0, #1
 800766a:	e7a5      	b.n	80075b8 <_svfiprintf_r+0xd4>
 800766c:	2300      	movs	r3, #0
 800766e:	3401      	adds	r4, #1
 8007670:	9305      	str	r3, [sp, #20]
 8007672:	4619      	mov	r1, r3
 8007674:	f04f 0c0a 	mov.w	ip, #10
 8007678:	4620      	mov	r0, r4
 800767a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800767e:	3a30      	subs	r2, #48	; 0x30
 8007680:	2a09      	cmp	r2, #9
 8007682:	d903      	bls.n	800768c <_svfiprintf_r+0x1a8>
 8007684:	2b00      	cmp	r3, #0
 8007686:	d0c5      	beq.n	8007614 <_svfiprintf_r+0x130>
 8007688:	9105      	str	r1, [sp, #20]
 800768a:	e7c3      	b.n	8007614 <_svfiprintf_r+0x130>
 800768c:	fb0c 2101 	mla	r1, ip, r1, r2
 8007690:	4604      	mov	r4, r0
 8007692:	2301      	movs	r3, #1
 8007694:	e7f0      	b.n	8007678 <_svfiprintf_r+0x194>
 8007696:	ab03      	add	r3, sp, #12
 8007698:	9300      	str	r3, [sp, #0]
 800769a:	462a      	mov	r2, r5
 800769c:	4b0f      	ldr	r3, [pc, #60]	; (80076dc <_svfiprintf_r+0x1f8>)
 800769e:	a904      	add	r1, sp, #16
 80076a0:	4638      	mov	r0, r7
 80076a2:	f3af 8000 	nop.w
 80076a6:	1c42      	adds	r2, r0, #1
 80076a8:	4606      	mov	r6, r0
 80076aa:	d1d6      	bne.n	800765a <_svfiprintf_r+0x176>
 80076ac:	89ab      	ldrh	r3, [r5, #12]
 80076ae:	065b      	lsls	r3, r3, #25
 80076b0:	f53f af2c 	bmi.w	800750c <_svfiprintf_r+0x28>
 80076b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80076b6:	b01d      	add	sp, #116	; 0x74
 80076b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076bc:	ab03      	add	r3, sp, #12
 80076be:	9300      	str	r3, [sp, #0]
 80076c0:	462a      	mov	r2, r5
 80076c2:	4b06      	ldr	r3, [pc, #24]	; (80076dc <_svfiprintf_r+0x1f8>)
 80076c4:	a904      	add	r1, sp, #16
 80076c6:	4638      	mov	r0, r7
 80076c8:	f000 f9d4 	bl	8007a74 <_printf_i>
 80076cc:	e7eb      	b.n	80076a6 <_svfiprintf_r+0x1c2>
 80076ce:	bf00      	nop
 80076d0:	08008194 	.word	0x08008194
 80076d4:	0800819e 	.word	0x0800819e
 80076d8:	00000000 	.word	0x00000000
 80076dc:	0800742d 	.word	0x0800742d
 80076e0:	0800819a 	.word	0x0800819a

080076e4 <__sfputc_r>:
 80076e4:	6893      	ldr	r3, [r2, #8]
 80076e6:	3b01      	subs	r3, #1
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	b410      	push	{r4}
 80076ec:	6093      	str	r3, [r2, #8]
 80076ee:	da08      	bge.n	8007702 <__sfputc_r+0x1e>
 80076f0:	6994      	ldr	r4, [r2, #24]
 80076f2:	42a3      	cmp	r3, r4
 80076f4:	db01      	blt.n	80076fa <__sfputc_r+0x16>
 80076f6:	290a      	cmp	r1, #10
 80076f8:	d103      	bne.n	8007702 <__sfputc_r+0x1e>
 80076fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80076fe:	f000 baf1 	b.w	8007ce4 <__swbuf_r>
 8007702:	6813      	ldr	r3, [r2, #0]
 8007704:	1c58      	adds	r0, r3, #1
 8007706:	6010      	str	r0, [r2, #0]
 8007708:	7019      	strb	r1, [r3, #0]
 800770a:	4608      	mov	r0, r1
 800770c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007710:	4770      	bx	lr

08007712 <__sfputs_r>:
 8007712:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007714:	4606      	mov	r6, r0
 8007716:	460f      	mov	r7, r1
 8007718:	4614      	mov	r4, r2
 800771a:	18d5      	adds	r5, r2, r3
 800771c:	42ac      	cmp	r4, r5
 800771e:	d101      	bne.n	8007724 <__sfputs_r+0x12>
 8007720:	2000      	movs	r0, #0
 8007722:	e007      	b.n	8007734 <__sfputs_r+0x22>
 8007724:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007728:	463a      	mov	r2, r7
 800772a:	4630      	mov	r0, r6
 800772c:	f7ff ffda 	bl	80076e4 <__sfputc_r>
 8007730:	1c43      	adds	r3, r0, #1
 8007732:	d1f3      	bne.n	800771c <__sfputs_r+0xa>
 8007734:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007738 <_vfiprintf_r>:
 8007738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800773c:	460d      	mov	r5, r1
 800773e:	b09d      	sub	sp, #116	; 0x74
 8007740:	4614      	mov	r4, r2
 8007742:	4698      	mov	r8, r3
 8007744:	4606      	mov	r6, r0
 8007746:	b118      	cbz	r0, 8007750 <_vfiprintf_r+0x18>
 8007748:	6983      	ldr	r3, [r0, #24]
 800774a:	b90b      	cbnz	r3, 8007750 <_vfiprintf_r+0x18>
 800774c:	f7ff fa9c 	bl	8006c88 <__sinit>
 8007750:	4b89      	ldr	r3, [pc, #548]	; (8007978 <_vfiprintf_r+0x240>)
 8007752:	429d      	cmp	r5, r3
 8007754:	d11b      	bne.n	800778e <_vfiprintf_r+0x56>
 8007756:	6875      	ldr	r5, [r6, #4]
 8007758:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800775a:	07d9      	lsls	r1, r3, #31
 800775c:	d405      	bmi.n	800776a <_vfiprintf_r+0x32>
 800775e:	89ab      	ldrh	r3, [r5, #12]
 8007760:	059a      	lsls	r2, r3, #22
 8007762:	d402      	bmi.n	800776a <_vfiprintf_r+0x32>
 8007764:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007766:	f7ff fb52 	bl	8006e0e <__retarget_lock_acquire_recursive>
 800776a:	89ab      	ldrh	r3, [r5, #12]
 800776c:	071b      	lsls	r3, r3, #28
 800776e:	d501      	bpl.n	8007774 <_vfiprintf_r+0x3c>
 8007770:	692b      	ldr	r3, [r5, #16]
 8007772:	b9eb      	cbnz	r3, 80077b0 <_vfiprintf_r+0x78>
 8007774:	4629      	mov	r1, r5
 8007776:	4630      	mov	r0, r6
 8007778:	f000 fb06 	bl	8007d88 <__swsetup_r>
 800777c:	b1c0      	cbz	r0, 80077b0 <_vfiprintf_r+0x78>
 800777e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007780:	07dc      	lsls	r4, r3, #31
 8007782:	d50e      	bpl.n	80077a2 <_vfiprintf_r+0x6a>
 8007784:	f04f 30ff 	mov.w	r0, #4294967295
 8007788:	b01d      	add	sp, #116	; 0x74
 800778a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800778e:	4b7b      	ldr	r3, [pc, #492]	; (800797c <_vfiprintf_r+0x244>)
 8007790:	429d      	cmp	r5, r3
 8007792:	d101      	bne.n	8007798 <_vfiprintf_r+0x60>
 8007794:	68b5      	ldr	r5, [r6, #8]
 8007796:	e7df      	b.n	8007758 <_vfiprintf_r+0x20>
 8007798:	4b79      	ldr	r3, [pc, #484]	; (8007980 <_vfiprintf_r+0x248>)
 800779a:	429d      	cmp	r5, r3
 800779c:	bf08      	it	eq
 800779e:	68f5      	ldreq	r5, [r6, #12]
 80077a0:	e7da      	b.n	8007758 <_vfiprintf_r+0x20>
 80077a2:	89ab      	ldrh	r3, [r5, #12]
 80077a4:	0598      	lsls	r0, r3, #22
 80077a6:	d4ed      	bmi.n	8007784 <_vfiprintf_r+0x4c>
 80077a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80077aa:	f7ff fb31 	bl	8006e10 <__retarget_lock_release_recursive>
 80077ae:	e7e9      	b.n	8007784 <_vfiprintf_r+0x4c>
 80077b0:	2300      	movs	r3, #0
 80077b2:	9309      	str	r3, [sp, #36]	; 0x24
 80077b4:	2320      	movs	r3, #32
 80077b6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80077ba:	f8cd 800c 	str.w	r8, [sp, #12]
 80077be:	2330      	movs	r3, #48	; 0x30
 80077c0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007984 <_vfiprintf_r+0x24c>
 80077c4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80077c8:	f04f 0901 	mov.w	r9, #1
 80077cc:	4623      	mov	r3, r4
 80077ce:	469a      	mov	sl, r3
 80077d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80077d4:	b10a      	cbz	r2, 80077da <_vfiprintf_r+0xa2>
 80077d6:	2a25      	cmp	r2, #37	; 0x25
 80077d8:	d1f9      	bne.n	80077ce <_vfiprintf_r+0x96>
 80077da:	ebba 0b04 	subs.w	fp, sl, r4
 80077de:	d00b      	beq.n	80077f8 <_vfiprintf_r+0xc0>
 80077e0:	465b      	mov	r3, fp
 80077e2:	4622      	mov	r2, r4
 80077e4:	4629      	mov	r1, r5
 80077e6:	4630      	mov	r0, r6
 80077e8:	f7ff ff93 	bl	8007712 <__sfputs_r>
 80077ec:	3001      	adds	r0, #1
 80077ee:	f000 80aa 	beq.w	8007946 <_vfiprintf_r+0x20e>
 80077f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80077f4:	445a      	add	r2, fp
 80077f6:	9209      	str	r2, [sp, #36]	; 0x24
 80077f8:	f89a 3000 	ldrb.w	r3, [sl]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	f000 80a2 	beq.w	8007946 <_vfiprintf_r+0x20e>
 8007802:	2300      	movs	r3, #0
 8007804:	f04f 32ff 	mov.w	r2, #4294967295
 8007808:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800780c:	f10a 0a01 	add.w	sl, sl, #1
 8007810:	9304      	str	r3, [sp, #16]
 8007812:	9307      	str	r3, [sp, #28]
 8007814:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007818:	931a      	str	r3, [sp, #104]	; 0x68
 800781a:	4654      	mov	r4, sl
 800781c:	2205      	movs	r2, #5
 800781e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007822:	4858      	ldr	r0, [pc, #352]	; (8007984 <_vfiprintf_r+0x24c>)
 8007824:	f7f8 fce4 	bl	80001f0 <memchr>
 8007828:	9a04      	ldr	r2, [sp, #16]
 800782a:	b9d8      	cbnz	r0, 8007864 <_vfiprintf_r+0x12c>
 800782c:	06d1      	lsls	r1, r2, #27
 800782e:	bf44      	itt	mi
 8007830:	2320      	movmi	r3, #32
 8007832:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007836:	0713      	lsls	r3, r2, #28
 8007838:	bf44      	itt	mi
 800783a:	232b      	movmi	r3, #43	; 0x2b
 800783c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007840:	f89a 3000 	ldrb.w	r3, [sl]
 8007844:	2b2a      	cmp	r3, #42	; 0x2a
 8007846:	d015      	beq.n	8007874 <_vfiprintf_r+0x13c>
 8007848:	9a07      	ldr	r2, [sp, #28]
 800784a:	4654      	mov	r4, sl
 800784c:	2000      	movs	r0, #0
 800784e:	f04f 0c0a 	mov.w	ip, #10
 8007852:	4621      	mov	r1, r4
 8007854:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007858:	3b30      	subs	r3, #48	; 0x30
 800785a:	2b09      	cmp	r3, #9
 800785c:	d94e      	bls.n	80078fc <_vfiprintf_r+0x1c4>
 800785e:	b1b0      	cbz	r0, 800788e <_vfiprintf_r+0x156>
 8007860:	9207      	str	r2, [sp, #28]
 8007862:	e014      	b.n	800788e <_vfiprintf_r+0x156>
 8007864:	eba0 0308 	sub.w	r3, r0, r8
 8007868:	fa09 f303 	lsl.w	r3, r9, r3
 800786c:	4313      	orrs	r3, r2
 800786e:	9304      	str	r3, [sp, #16]
 8007870:	46a2      	mov	sl, r4
 8007872:	e7d2      	b.n	800781a <_vfiprintf_r+0xe2>
 8007874:	9b03      	ldr	r3, [sp, #12]
 8007876:	1d19      	adds	r1, r3, #4
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	9103      	str	r1, [sp, #12]
 800787c:	2b00      	cmp	r3, #0
 800787e:	bfbb      	ittet	lt
 8007880:	425b      	neglt	r3, r3
 8007882:	f042 0202 	orrlt.w	r2, r2, #2
 8007886:	9307      	strge	r3, [sp, #28]
 8007888:	9307      	strlt	r3, [sp, #28]
 800788a:	bfb8      	it	lt
 800788c:	9204      	strlt	r2, [sp, #16]
 800788e:	7823      	ldrb	r3, [r4, #0]
 8007890:	2b2e      	cmp	r3, #46	; 0x2e
 8007892:	d10c      	bne.n	80078ae <_vfiprintf_r+0x176>
 8007894:	7863      	ldrb	r3, [r4, #1]
 8007896:	2b2a      	cmp	r3, #42	; 0x2a
 8007898:	d135      	bne.n	8007906 <_vfiprintf_r+0x1ce>
 800789a:	9b03      	ldr	r3, [sp, #12]
 800789c:	1d1a      	adds	r2, r3, #4
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	9203      	str	r2, [sp, #12]
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	bfb8      	it	lt
 80078a6:	f04f 33ff 	movlt.w	r3, #4294967295
 80078aa:	3402      	adds	r4, #2
 80078ac:	9305      	str	r3, [sp, #20]
 80078ae:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007994 <_vfiprintf_r+0x25c>
 80078b2:	7821      	ldrb	r1, [r4, #0]
 80078b4:	2203      	movs	r2, #3
 80078b6:	4650      	mov	r0, sl
 80078b8:	f7f8 fc9a 	bl	80001f0 <memchr>
 80078bc:	b140      	cbz	r0, 80078d0 <_vfiprintf_r+0x198>
 80078be:	2340      	movs	r3, #64	; 0x40
 80078c0:	eba0 000a 	sub.w	r0, r0, sl
 80078c4:	fa03 f000 	lsl.w	r0, r3, r0
 80078c8:	9b04      	ldr	r3, [sp, #16]
 80078ca:	4303      	orrs	r3, r0
 80078cc:	3401      	adds	r4, #1
 80078ce:	9304      	str	r3, [sp, #16]
 80078d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80078d4:	482c      	ldr	r0, [pc, #176]	; (8007988 <_vfiprintf_r+0x250>)
 80078d6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80078da:	2206      	movs	r2, #6
 80078dc:	f7f8 fc88 	bl	80001f0 <memchr>
 80078e0:	2800      	cmp	r0, #0
 80078e2:	d03f      	beq.n	8007964 <_vfiprintf_r+0x22c>
 80078e4:	4b29      	ldr	r3, [pc, #164]	; (800798c <_vfiprintf_r+0x254>)
 80078e6:	bb1b      	cbnz	r3, 8007930 <_vfiprintf_r+0x1f8>
 80078e8:	9b03      	ldr	r3, [sp, #12]
 80078ea:	3307      	adds	r3, #7
 80078ec:	f023 0307 	bic.w	r3, r3, #7
 80078f0:	3308      	adds	r3, #8
 80078f2:	9303      	str	r3, [sp, #12]
 80078f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078f6:	443b      	add	r3, r7
 80078f8:	9309      	str	r3, [sp, #36]	; 0x24
 80078fa:	e767      	b.n	80077cc <_vfiprintf_r+0x94>
 80078fc:	fb0c 3202 	mla	r2, ip, r2, r3
 8007900:	460c      	mov	r4, r1
 8007902:	2001      	movs	r0, #1
 8007904:	e7a5      	b.n	8007852 <_vfiprintf_r+0x11a>
 8007906:	2300      	movs	r3, #0
 8007908:	3401      	adds	r4, #1
 800790a:	9305      	str	r3, [sp, #20]
 800790c:	4619      	mov	r1, r3
 800790e:	f04f 0c0a 	mov.w	ip, #10
 8007912:	4620      	mov	r0, r4
 8007914:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007918:	3a30      	subs	r2, #48	; 0x30
 800791a:	2a09      	cmp	r2, #9
 800791c:	d903      	bls.n	8007926 <_vfiprintf_r+0x1ee>
 800791e:	2b00      	cmp	r3, #0
 8007920:	d0c5      	beq.n	80078ae <_vfiprintf_r+0x176>
 8007922:	9105      	str	r1, [sp, #20]
 8007924:	e7c3      	b.n	80078ae <_vfiprintf_r+0x176>
 8007926:	fb0c 2101 	mla	r1, ip, r1, r2
 800792a:	4604      	mov	r4, r0
 800792c:	2301      	movs	r3, #1
 800792e:	e7f0      	b.n	8007912 <_vfiprintf_r+0x1da>
 8007930:	ab03      	add	r3, sp, #12
 8007932:	9300      	str	r3, [sp, #0]
 8007934:	462a      	mov	r2, r5
 8007936:	4b16      	ldr	r3, [pc, #88]	; (8007990 <_vfiprintf_r+0x258>)
 8007938:	a904      	add	r1, sp, #16
 800793a:	4630      	mov	r0, r6
 800793c:	f3af 8000 	nop.w
 8007940:	4607      	mov	r7, r0
 8007942:	1c78      	adds	r0, r7, #1
 8007944:	d1d6      	bne.n	80078f4 <_vfiprintf_r+0x1bc>
 8007946:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007948:	07d9      	lsls	r1, r3, #31
 800794a:	d405      	bmi.n	8007958 <_vfiprintf_r+0x220>
 800794c:	89ab      	ldrh	r3, [r5, #12]
 800794e:	059a      	lsls	r2, r3, #22
 8007950:	d402      	bmi.n	8007958 <_vfiprintf_r+0x220>
 8007952:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007954:	f7ff fa5c 	bl	8006e10 <__retarget_lock_release_recursive>
 8007958:	89ab      	ldrh	r3, [r5, #12]
 800795a:	065b      	lsls	r3, r3, #25
 800795c:	f53f af12 	bmi.w	8007784 <_vfiprintf_r+0x4c>
 8007960:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007962:	e711      	b.n	8007788 <_vfiprintf_r+0x50>
 8007964:	ab03      	add	r3, sp, #12
 8007966:	9300      	str	r3, [sp, #0]
 8007968:	462a      	mov	r2, r5
 800796a:	4b09      	ldr	r3, [pc, #36]	; (8007990 <_vfiprintf_r+0x258>)
 800796c:	a904      	add	r1, sp, #16
 800796e:	4630      	mov	r0, r6
 8007970:	f000 f880 	bl	8007a74 <_printf_i>
 8007974:	e7e4      	b.n	8007940 <_vfiprintf_r+0x208>
 8007976:	bf00      	nop
 8007978:	08008150 	.word	0x08008150
 800797c:	08008170 	.word	0x08008170
 8007980:	08008130 	.word	0x08008130
 8007984:	08008194 	.word	0x08008194
 8007988:	0800819e 	.word	0x0800819e
 800798c:	00000000 	.word	0x00000000
 8007990:	08007713 	.word	0x08007713
 8007994:	0800819a 	.word	0x0800819a

08007998 <_printf_common>:
 8007998:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800799c:	4616      	mov	r6, r2
 800799e:	4699      	mov	r9, r3
 80079a0:	688a      	ldr	r2, [r1, #8]
 80079a2:	690b      	ldr	r3, [r1, #16]
 80079a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80079a8:	4293      	cmp	r3, r2
 80079aa:	bfb8      	it	lt
 80079ac:	4613      	movlt	r3, r2
 80079ae:	6033      	str	r3, [r6, #0]
 80079b0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80079b4:	4607      	mov	r7, r0
 80079b6:	460c      	mov	r4, r1
 80079b8:	b10a      	cbz	r2, 80079be <_printf_common+0x26>
 80079ba:	3301      	adds	r3, #1
 80079bc:	6033      	str	r3, [r6, #0]
 80079be:	6823      	ldr	r3, [r4, #0]
 80079c0:	0699      	lsls	r1, r3, #26
 80079c2:	bf42      	ittt	mi
 80079c4:	6833      	ldrmi	r3, [r6, #0]
 80079c6:	3302      	addmi	r3, #2
 80079c8:	6033      	strmi	r3, [r6, #0]
 80079ca:	6825      	ldr	r5, [r4, #0]
 80079cc:	f015 0506 	ands.w	r5, r5, #6
 80079d0:	d106      	bne.n	80079e0 <_printf_common+0x48>
 80079d2:	f104 0a19 	add.w	sl, r4, #25
 80079d6:	68e3      	ldr	r3, [r4, #12]
 80079d8:	6832      	ldr	r2, [r6, #0]
 80079da:	1a9b      	subs	r3, r3, r2
 80079dc:	42ab      	cmp	r3, r5
 80079de:	dc26      	bgt.n	8007a2e <_printf_common+0x96>
 80079e0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80079e4:	1e13      	subs	r3, r2, #0
 80079e6:	6822      	ldr	r2, [r4, #0]
 80079e8:	bf18      	it	ne
 80079ea:	2301      	movne	r3, #1
 80079ec:	0692      	lsls	r2, r2, #26
 80079ee:	d42b      	bmi.n	8007a48 <_printf_common+0xb0>
 80079f0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80079f4:	4649      	mov	r1, r9
 80079f6:	4638      	mov	r0, r7
 80079f8:	47c0      	blx	r8
 80079fa:	3001      	adds	r0, #1
 80079fc:	d01e      	beq.n	8007a3c <_printf_common+0xa4>
 80079fe:	6823      	ldr	r3, [r4, #0]
 8007a00:	68e5      	ldr	r5, [r4, #12]
 8007a02:	6832      	ldr	r2, [r6, #0]
 8007a04:	f003 0306 	and.w	r3, r3, #6
 8007a08:	2b04      	cmp	r3, #4
 8007a0a:	bf08      	it	eq
 8007a0c:	1aad      	subeq	r5, r5, r2
 8007a0e:	68a3      	ldr	r3, [r4, #8]
 8007a10:	6922      	ldr	r2, [r4, #16]
 8007a12:	bf0c      	ite	eq
 8007a14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007a18:	2500      	movne	r5, #0
 8007a1a:	4293      	cmp	r3, r2
 8007a1c:	bfc4      	itt	gt
 8007a1e:	1a9b      	subgt	r3, r3, r2
 8007a20:	18ed      	addgt	r5, r5, r3
 8007a22:	2600      	movs	r6, #0
 8007a24:	341a      	adds	r4, #26
 8007a26:	42b5      	cmp	r5, r6
 8007a28:	d11a      	bne.n	8007a60 <_printf_common+0xc8>
 8007a2a:	2000      	movs	r0, #0
 8007a2c:	e008      	b.n	8007a40 <_printf_common+0xa8>
 8007a2e:	2301      	movs	r3, #1
 8007a30:	4652      	mov	r2, sl
 8007a32:	4649      	mov	r1, r9
 8007a34:	4638      	mov	r0, r7
 8007a36:	47c0      	blx	r8
 8007a38:	3001      	adds	r0, #1
 8007a3a:	d103      	bne.n	8007a44 <_printf_common+0xac>
 8007a3c:	f04f 30ff 	mov.w	r0, #4294967295
 8007a40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a44:	3501      	adds	r5, #1
 8007a46:	e7c6      	b.n	80079d6 <_printf_common+0x3e>
 8007a48:	18e1      	adds	r1, r4, r3
 8007a4a:	1c5a      	adds	r2, r3, #1
 8007a4c:	2030      	movs	r0, #48	; 0x30
 8007a4e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007a52:	4422      	add	r2, r4
 8007a54:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007a58:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007a5c:	3302      	adds	r3, #2
 8007a5e:	e7c7      	b.n	80079f0 <_printf_common+0x58>
 8007a60:	2301      	movs	r3, #1
 8007a62:	4622      	mov	r2, r4
 8007a64:	4649      	mov	r1, r9
 8007a66:	4638      	mov	r0, r7
 8007a68:	47c0      	blx	r8
 8007a6a:	3001      	adds	r0, #1
 8007a6c:	d0e6      	beq.n	8007a3c <_printf_common+0xa4>
 8007a6e:	3601      	adds	r6, #1
 8007a70:	e7d9      	b.n	8007a26 <_printf_common+0x8e>
	...

08007a74 <_printf_i>:
 8007a74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007a78:	7e0f      	ldrb	r7, [r1, #24]
 8007a7a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007a7c:	2f78      	cmp	r7, #120	; 0x78
 8007a7e:	4691      	mov	r9, r2
 8007a80:	4680      	mov	r8, r0
 8007a82:	460c      	mov	r4, r1
 8007a84:	469a      	mov	sl, r3
 8007a86:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007a8a:	d807      	bhi.n	8007a9c <_printf_i+0x28>
 8007a8c:	2f62      	cmp	r7, #98	; 0x62
 8007a8e:	d80a      	bhi.n	8007aa6 <_printf_i+0x32>
 8007a90:	2f00      	cmp	r7, #0
 8007a92:	f000 80d8 	beq.w	8007c46 <_printf_i+0x1d2>
 8007a96:	2f58      	cmp	r7, #88	; 0x58
 8007a98:	f000 80a3 	beq.w	8007be2 <_printf_i+0x16e>
 8007a9c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007aa0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007aa4:	e03a      	b.n	8007b1c <_printf_i+0xa8>
 8007aa6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007aaa:	2b15      	cmp	r3, #21
 8007aac:	d8f6      	bhi.n	8007a9c <_printf_i+0x28>
 8007aae:	a101      	add	r1, pc, #4	; (adr r1, 8007ab4 <_printf_i+0x40>)
 8007ab0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007ab4:	08007b0d 	.word	0x08007b0d
 8007ab8:	08007b21 	.word	0x08007b21
 8007abc:	08007a9d 	.word	0x08007a9d
 8007ac0:	08007a9d 	.word	0x08007a9d
 8007ac4:	08007a9d 	.word	0x08007a9d
 8007ac8:	08007a9d 	.word	0x08007a9d
 8007acc:	08007b21 	.word	0x08007b21
 8007ad0:	08007a9d 	.word	0x08007a9d
 8007ad4:	08007a9d 	.word	0x08007a9d
 8007ad8:	08007a9d 	.word	0x08007a9d
 8007adc:	08007a9d 	.word	0x08007a9d
 8007ae0:	08007c2d 	.word	0x08007c2d
 8007ae4:	08007b51 	.word	0x08007b51
 8007ae8:	08007c0f 	.word	0x08007c0f
 8007aec:	08007a9d 	.word	0x08007a9d
 8007af0:	08007a9d 	.word	0x08007a9d
 8007af4:	08007c4f 	.word	0x08007c4f
 8007af8:	08007a9d 	.word	0x08007a9d
 8007afc:	08007b51 	.word	0x08007b51
 8007b00:	08007a9d 	.word	0x08007a9d
 8007b04:	08007a9d 	.word	0x08007a9d
 8007b08:	08007c17 	.word	0x08007c17
 8007b0c:	682b      	ldr	r3, [r5, #0]
 8007b0e:	1d1a      	adds	r2, r3, #4
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	602a      	str	r2, [r5, #0]
 8007b14:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007b18:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007b1c:	2301      	movs	r3, #1
 8007b1e:	e0a3      	b.n	8007c68 <_printf_i+0x1f4>
 8007b20:	6820      	ldr	r0, [r4, #0]
 8007b22:	6829      	ldr	r1, [r5, #0]
 8007b24:	0606      	lsls	r6, r0, #24
 8007b26:	f101 0304 	add.w	r3, r1, #4
 8007b2a:	d50a      	bpl.n	8007b42 <_printf_i+0xce>
 8007b2c:	680e      	ldr	r6, [r1, #0]
 8007b2e:	602b      	str	r3, [r5, #0]
 8007b30:	2e00      	cmp	r6, #0
 8007b32:	da03      	bge.n	8007b3c <_printf_i+0xc8>
 8007b34:	232d      	movs	r3, #45	; 0x2d
 8007b36:	4276      	negs	r6, r6
 8007b38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007b3c:	485e      	ldr	r0, [pc, #376]	; (8007cb8 <_printf_i+0x244>)
 8007b3e:	230a      	movs	r3, #10
 8007b40:	e019      	b.n	8007b76 <_printf_i+0x102>
 8007b42:	680e      	ldr	r6, [r1, #0]
 8007b44:	602b      	str	r3, [r5, #0]
 8007b46:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007b4a:	bf18      	it	ne
 8007b4c:	b236      	sxthne	r6, r6
 8007b4e:	e7ef      	b.n	8007b30 <_printf_i+0xbc>
 8007b50:	682b      	ldr	r3, [r5, #0]
 8007b52:	6820      	ldr	r0, [r4, #0]
 8007b54:	1d19      	adds	r1, r3, #4
 8007b56:	6029      	str	r1, [r5, #0]
 8007b58:	0601      	lsls	r1, r0, #24
 8007b5a:	d501      	bpl.n	8007b60 <_printf_i+0xec>
 8007b5c:	681e      	ldr	r6, [r3, #0]
 8007b5e:	e002      	b.n	8007b66 <_printf_i+0xf2>
 8007b60:	0646      	lsls	r6, r0, #25
 8007b62:	d5fb      	bpl.n	8007b5c <_printf_i+0xe8>
 8007b64:	881e      	ldrh	r6, [r3, #0]
 8007b66:	4854      	ldr	r0, [pc, #336]	; (8007cb8 <_printf_i+0x244>)
 8007b68:	2f6f      	cmp	r7, #111	; 0x6f
 8007b6a:	bf0c      	ite	eq
 8007b6c:	2308      	moveq	r3, #8
 8007b6e:	230a      	movne	r3, #10
 8007b70:	2100      	movs	r1, #0
 8007b72:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007b76:	6865      	ldr	r5, [r4, #4]
 8007b78:	60a5      	str	r5, [r4, #8]
 8007b7a:	2d00      	cmp	r5, #0
 8007b7c:	bfa2      	ittt	ge
 8007b7e:	6821      	ldrge	r1, [r4, #0]
 8007b80:	f021 0104 	bicge.w	r1, r1, #4
 8007b84:	6021      	strge	r1, [r4, #0]
 8007b86:	b90e      	cbnz	r6, 8007b8c <_printf_i+0x118>
 8007b88:	2d00      	cmp	r5, #0
 8007b8a:	d04d      	beq.n	8007c28 <_printf_i+0x1b4>
 8007b8c:	4615      	mov	r5, r2
 8007b8e:	fbb6 f1f3 	udiv	r1, r6, r3
 8007b92:	fb03 6711 	mls	r7, r3, r1, r6
 8007b96:	5dc7      	ldrb	r7, [r0, r7]
 8007b98:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007b9c:	4637      	mov	r7, r6
 8007b9e:	42bb      	cmp	r3, r7
 8007ba0:	460e      	mov	r6, r1
 8007ba2:	d9f4      	bls.n	8007b8e <_printf_i+0x11a>
 8007ba4:	2b08      	cmp	r3, #8
 8007ba6:	d10b      	bne.n	8007bc0 <_printf_i+0x14c>
 8007ba8:	6823      	ldr	r3, [r4, #0]
 8007baa:	07de      	lsls	r6, r3, #31
 8007bac:	d508      	bpl.n	8007bc0 <_printf_i+0x14c>
 8007bae:	6923      	ldr	r3, [r4, #16]
 8007bb0:	6861      	ldr	r1, [r4, #4]
 8007bb2:	4299      	cmp	r1, r3
 8007bb4:	bfde      	ittt	le
 8007bb6:	2330      	movle	r3, #48	; 0x30
 8007bb8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007bbc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007bc0:	1b52      	subs	r2, r2, r5
 8007bc2:	6122      	str	r2, [r4, #16]
 8007bc4:	f8cd a000 	str.w	sl, [sp]
 8007bc8:	464b      	mov	r3, r9
 8007bca:	aa03      	add	r2, sp, #12
 8007bcc:	4621      	mov	r1, r4
 8007bce:	4640      	mov	r0, r8
 8007bd0:	f7ff fee2 	bl	8007998 <_printf_common>
 8007bd4:	3001      	adds	r0, #1
 8007bd6:	d14c      	bne.n	8007c72 <_printf_i+0x1fe>
 8007bd8:	f04f 30ff 	mov.w	r0, #4294967295
 8007bdc:	b004      	add	sp, #16
 8007bde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007be2:	4835      	ldr	r0, [pc, #212]	; (8007cb8 <_printf_i+0x244>)
 8007be4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007be8:	6829      	ldr	r1, [r5, #0]
 8007bea:	6823      	ldr	r3, [r4, #0]
 8007bec:	f851 6b04 	ldr.w	r6, [r1], #4
 8007bf0:	6029      	str	r1, [r5, #0]
 8007bf2:	061d      	lsls	r5, r3, #24
 8007bf4:	d514      	bpl.n	8007c20 <_printf_i+0x1ac>
 8007bf6:	07df      	lsls	r7, r3, #31
 8007bf8:	bf44      	itt	mi
 8007bfa:	f043 0320 	orrmi.w	r3, r3, #32
 8007bfe:	6023      	strmi	r3, [r4, #0]
 8007c00:	b91e      	cbnz	r6, 8007c0a <_printf_i+0x196>
 8007c02:	6823      	ldr	r3, [r4, #0]
 8007c04:	f023 0320 	bic.w	r3, r3, #32
 8007c08:	6023      	str	r3, [r4, #0]
 8007c0a:	2310      	movs	r3, #16
 8007c0c:	e7b0      	b.n	8007b70 <_printf_i+0xfc>
 8007c0e:	6823      	ldr	r3, [r4, #0]
 8007c10:	f043 0320 	orr.w	r3, r3, #32
 8007c14:	6023      	str	r3, [r4, #0]
 8007c16:	2378      	movs	r3, #120	; 0x78
 8007c18:	4828      	ldr	r0, [pc, #160]	; (8007cbc <_printf_i+0x248>)
 8007c1a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007c1e:	e7e3      	b.n	8007be8 <_printf_i+0x174>
 8007c20:	0659      	lsls	r1, r3, #25
 8007c22:	bf48      	it	mi
 8007c24:	b2b6      	uxthmi	r6, r6
 8007c26:	e7e6      	b.n	8007bf6 <_printf_i+0x182>
 8007c28:	4615      	mov	r5, r2
 8007c2a:	e7bb      	b.n	8007ba4 <_printf_i+0x130>
 8007c2c:	682b      	ldr	r3, [r5, #0]
 8007c2e:	6826      	ldr	r6, [r4, #0]
 8007c30:	6961      	ldr	r1, [r4, #20]
 8007c32:	1d18      	adds	r0, r3, #4
 8007c34:	6028      	str	r0, [r5, #0]
 8007c36:	0635      	lsls	r5, r6, #24
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	d501      	bpl.n	8007c40 <_printf_i+0x1cc>
 8007c3c:	6019      	str	r1, [r3, #0]
 8007c3e:	e002      	b.n	8007c46 <_printf_i+0x1d2>
 8007c40:	0670      	lsls	r0, r6, #25
 8007c42:	d5fb      	bpl.n	8007c3c <_printf_i+0x1c8>
 8007c44:	8019      	strh	r1, [r3, #0]
 8007c46:	2300      	movs	r3, #0
 8007c48:	6123      	str	r3, [r4, #16]
 8007c4a:	4615      	mov	r5, r2
 8007c4c:	e7ba      	b.n	8007bc4 <_printf_i+0x150>
 8007c4e:	682b      	ldr	r3, [r5, #0]
 8007c50:	1d1a      	adds	r2, r3, #4
 8007c52:	602a      	str	r2, [r5, #0]
 8007c54:	681d      	ldr	r5, [r3, #0]
 8007c56:	6862      	ldr	r2, [r4, #4]
 8007c58:	2100      	movs	r1, #0
 8007c5a:	4628      	mov	r0, r5
 8007c5c:	f7f8 fac8 	bl	80001f0 <memchr>
 8007c60:	b108      	cbz	r0, 8007c66 <_printf_i+0x1f2>
 8007c62:	1b40      	subs	r0, r0, r5
 8007c64:	6060      	str	r0, [r4, #4]
 8007c66:	6863      	ldr	r3, [r4, #4]
 8007c68:	6123      	str	r3, [r4, #16]
 8007c6a:	2300      	movs	r3, #0
 8007c6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007c70:	e7a8      	b.n	8007bc4 <_printf_i+0x150>
 8007c72:	6923      	ldr	r3, [r4, #16]
 8007c74:	462a      	mov	r2, r5
 8007c76:	4649      	mov	r1, r9
 8007c78:	4640      	mov	r0, r8
 8007c7a:	47d0      	blx	sl
 8007c7c:	3001      	adds	r0, #1
 8007c7e:	d0ab      	beq.n	8007bd8 <_printf_i+0x164>
 8007c80:	6823      	ldr	r3, [r4, #0]
 8007c82:	079b      	lsls	r3, r3, #30
 8007c84:	d413      	bmi.n	8007cae <_printf_i+0x23a>
 8007c86:	68e0      	ldr	r0, [r4, #12]
 8007c88:	9b03      	ldr	r3, [sp, #12]
 8007c8a:	4298      	cmp	r0, r3
 8007c8c:	bfb8      	it	lt
 8007c8e:	4618      	movlt	r0, r3
 8007c90:	e7a4      	b.n	8007bdc <_printf_i+0x168>
 8007c92:	2301      	movs	r3, #1
 8007c94:	4632      	mov	r2, r6
 8007c96:	4649      	mov	r1, r9
 8007c98:	4640      	mov	r0, r8
 8007c9a:	47d0      	blx	sl
 8007c9c:	3001      	adds	r0, #1
 8007c9e:	d09b      	beq.n	8007bd8 <_printf_i+0x164>
 8007ca0:	3501      	adds	r5, #1
 8007ca2:	68e3      	ldr	r3, [r4, #12]
 8007ca4:	9903      	ldr	r1, [sp, #12]
 8007ca6:	1a5b      	subs	r3, r3, r1
 8007ca8:	42ab      	cmp	r3, r5
 8007caa:	dcf2      	bgt.n	8007c92 <_printf_i+0x21e>
 8007cac:	e7eb      	b.n	8007c86 <_printf_i+0x212>
 8007cae:	2500      	movs	r5, #0
 8007cb0:	f104 0619 	add.w	r6, r4, #25
 8007cb4:	e7f5      	b.n	8007ca2 <_printf_i+0x22e>
 8007cb6:	bf00      	nop
 8007cb8:	080081a5 	.word	0x080081a5
 8007cbc:	080081b6 	.word	0x080081b6

08007cc0 <_read_r>:
 8007cc0:	b538      	push	{r3, r4, r5, lr}
 8007cc2:	4d07      	ldr	r5, [pc, #28]	; (8007ce0 <_read_r+0x20>)
 8007cc4:	4604      	mov	r4, r0
 8007cc6:	4608      	mov	r0, r1
 8007cc8:	4611      	mov	r1, r2
 8007cca:	2200      	movs	r2, #0
 8007ccc:	602a      	str	r2, [r5, #0]
 8007cce:	461a      	mov	r2, r3
 8007cd0:	f7f9 f8bc 	bl	8000e4c <_read>
 8007cd4:	1c43      	adds	r3, r0, #1
 8007cd6:	d102      	bne.n	8007cde <_read_r+0x1e>
 8007cd8:	682b      	ldr	r3, [r5, #0]
 8007cda:	b103      	cbz	r3, 8007cde <_read_r+0x1e>
 8007cdc:	6023      	str	r3, [r4, #0]
 8007cde:	bd38      	pop	{r3, r4, r5, pc}
 8007ce0:	20004c78 	.word	0x20004c78

08007ce4 <__swbuf_r>:
 8007ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ce6:	460e      	mov	r6, r1
 8007ce8:	4614      	mov	r4, r2
 8007cea:	4605      	mov	r5, r0
 8007cec:	b118      	cbz	r0, 8007cf6 <__swbuf_r+0x12>
 8007cee:	6983      	ldr	r3, [r0, #24]
 8007cf0:	b90b      	cbnz	r3, 8007cf6 <__swbuf_r+0x12>
 8007cf2:	f7fe ffc9 	bl	8006c88 <__sinit>
 8007cf6:	4b21      	ldr	r3, [pc, #132]	; (8007d7c <__swbuf_r+0x98>)
 8007cf8:	429c      	cmp	r4, r3
 8007cfa:	d12b      	bne.n	8007d54 <__swbuf_r+0x70>
 8007cfc:	686c      	ldr	r4, [r5, #4]
 8007cfe:	69a3      	ldr	r3, [r4, #24]
 8007d00:	60a3      	str	r3, [r4, #8]
 8007d02:	89a3      	ldrh	r3, [r4, #12]
 8007d04:	071a      	lsls	r2, r3, #28
 8007d06:	d52f      	bpl.n	8007d68 <__swbuf_r+0x84>
 8007d08:	6923      	ldr	r3, [r4, #16]
 8007d0a:	b36b      	cbz	r3, 8007d68 <__swbuf_r+0x84>
 8007d0c:	6923      	ldr	r3, [r4, #16]
 8007d0e:	6820      	ldr	r0, [r4, #0]
 8007d10:	1ac0      	subs	r0, r0, r3
 8007d12:	6963      	ldr	r3, [r4, #20]
 8007d14:	b2f6      	uxtb	r6, r6
 8007d16:	4283      	cmp	r3, r0
 8007d18:	4637      	mov	r7, r6
 8007d1a:	dc04      	bgt.n	8007d26 <__swbuf_r+0x42>
 8007d1c:	4621      	mov	r1, r4
 8007d1e:	4628      	mov	r0, r5
 8007d20:	f7ff fade 	bl	80072e0 <_fflush_r>
 8007d24:	bb30      	cbnz	r0, 8007d74 <__swbuf_r+0x90>
 8007d26:	68a3      	ldr	r3, [r4, #8]
 8007d28:	3b01      	subs	r3, #1
 8007d2a:	60a3      	str	r3, [r4, #8]
 8007d2c:	6823      	ldr	r3, [r4, #0]
 8007d2e:	1c5a      	adds	r2, r3, #1
 8007d30:	6022      	str	r2, [r4, #0]
 8007d32:	701e      	strb	r6, [r3, #0]
 8007d34:	6963      	ldr	r3, [r4, #20]
 8007d36:	3001      	adds	r0, #1
 8007d38:	4283      	cmp	r3, r0
 8007d3a:	d004      	beq.n	8007d46 <__swbuf_r+0x62>
 8007d3c:	89a3      	ldrh	r3, [r4, #12]
 8007d3e:	07db      	lsls	r3, r3, #31
 8007d40:	d506      	bpl.n	8007d50 <__swbuf_r+0x6c>
 8007d42:	2e0a      	cmp	r6, #10
 8007d44:	d104      	bne.n	8007d50 <__swbuf_r+0x6c>
 8007d46:	4621      	mov	r1, r4
 8007d48:	4628      	mov	r0, r5
 8007d4a:	f7ff fac9 	bl	80072e0 <_fflush_r>
 8007d4e:	b988      	cbnz	r0, 8007d74 <__swbuf_r+0x90>
 8007d50:	4638      	mov	r0, r7
 8007d52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d54:	4b0a      	ldr	r3, [pc, #40]	; (8007d80 <__swbuf_r+0x9c>)
 8007d56:	429c      	cmp	r4, r3
 8007d58:	d101      	bne.n	8007d5e <__swbuf_r+0x7a>
 8007d5a:	68ac      	ldr	r4, [r5, #8]
 8007d5c:	e7cf      	b.n	8007cfe <__swbuf_r+0x1a>
 8007d5e:	4b09      	ldr	r3, [pc, #36]	; (8007d84 <__swbuf_r+0xa0>)
 8007d60:	429c      	cmp	r4, r3
 8007d62:	bf08      	it	eq
 8007d64:	68ec      	ldreq	r4, [r5, #12]
 8007d66:	e7ca      	b.n	8007cfe <__swbuf_r+0x1a>
 8007d68:	4621      	mov	r1, r4
 8007d6a:	4628      	mov	r0, r5
 8007d6c:	f000 f80c 	bl	8007d88 <__swsetup_r>
 8007d70:	2800      	cmp	r0, #0
 8007d72:	d0cb      	beq.n	8007d0c <__swbuf_r+0x28>
 8007d74:	f04f 37ff 	mov.w	r7, #4294967295
 8007d78:	e7ea      	b.n	8007d50 <__swbuf_r+0x6c>
 8007d7a:	bf00      	nop
 8007d7c:	08008150 	.word	0x08008150
 8007d80:	08008170 	.word	0x08008170
 8007d84:	08008130 	.word	0x08008130

08007d88 <__swsetup_r>:
 8007d88:	4b32      	ldr	r3, [pc, #200]	; (8007e54 <__swsetup_r+0xcc>)
 8007d8a:	b570      	push	{r4, r5, r6, lr}
 8007d8c:	681d      	ldr	r5, [r3, #0]
 8007d8e:	4606      	mov	r6, r0
 8007d90:	460c      	mov	r4, r1
 8007d92:	b125      	cbz	r5, 8007d9e <__swsetup_r+0x16>
 8007d94:	69ab      	ldr	r3, [r5, #24]
 8007d96:	b913      	cbnz	r3, 8007d9e <__swsetup_r+0x16>
 8007d98:	4628      	mov	r0, r5
 8007d9a:	f7fe ff75 	bl	8006c88 <__sinit>
 8007d9e:	4b2e      	ldr	r3, [pc, #184]	; (8007e58 <__swsetup_r+0xd0>)
 8007da0:	429c      	cmp	r4, r3
 8007da2:	d10f      	bne.n	8007dc4 <__swsetup_r+0x3c>
 8007da4:	686c      	ldr	r4, [r5, #4]
 8007da6:	89a3      	ldrh	r3, [r4, #12]
 8007da8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007dac:	0719      	lsls	r1, r3, #28
 8007dae:	d42c      	bmi.n	8007e0a <__swsetup_r+0x82>
 8007db0:	06dd      	lsls	r5, r3, #27
 8007db2:	d411      	bmi.n	8007dd8 <__swsetup_r+0x50>
 8007db4:	2309      	movs	r3, #9
 8007db6:	6033      	str	r3, [r6, #0]
 8007db8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007dbc:	81a3      	strh	r3, [r4, #12]
 8007dbe:	f04f 30ff 	mov.w	r0, #4294967295
 8007dc2:	e03e      	b.n	8007e42 <__swsetup_r+0xba>
 8007dc4:	4b25      	ldr	r3, [pc, #148]	; (8007e5c <__swsetup_r+0xd4>)
 8007dc6:	429c      	cmp	r4, r3
 8007dc8:	d101      	bne.n	8007dce <__swsetup_r+0x46>
 8007dca:	68ac      	ldr	r4, [r5, #8]
 8007dcc:	e7eb      	b.n	8007da6 <__swsetup_r+0x1e>
 8007dce:	4b24      	ldr	r3, [pc, #144]	; (8007e60 <__swsetup_r+0xd8>)
 8007dd0:	429c      	cmp	r4, r3
 8007dd2:	bf08      	it	eq
 8007dd4:	68ec      	ldreq	r4, [r5, #12]
 8007dd6:	e7e6      	b.n	8007da6 <__swsetup_r+0x1e>
 8007dd8:	0758      	lsls	r0, r3, #29
 8007dda:	d512      	bpl.n	8007e02 <__swsetup_r+0x7a>
 8007ddc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007dde:	b141      	cbz	r1, 8007df2 <__swsetup_r+0x6a>
 8007de0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007de4:	4299      	cmp	r1, r3
 8007de6:	d002      	beq.n	8007dee <__swsetup_r+0x66>
 8007de8:	4630      	mov	r0, r6
 8007dea:	f7ff fad3 	bl	8007394 <_free_r>
 8007dee:	2300      	movs	r3, #0
 8007df0:	6363      	str	r3, [r4, #52]	; 0x34
 8007df2:	89a3      	ldrh	r3, [r4, #12]
 8007df4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007df8:	81a3      	strh	r3, [r4, #12]
 8007dfa:	2300      	movs	r3, #0
 8007dfc:	6063      	str	r3, [r4, #4]
 8007dfe:	6923      	ldr	r3, [r4, #16]
 8007e00:	6023      	str	r3, [r4, #0]
 8007e02:	89a3      	ldrh	r3, [r4, #12]
 8007e04:	f043 0308 	orr.w	r3, r3, #8
 8007e08:	81a3      	strh	r3, [r4, #12]
 8007e0a:	6923      	ldr	r3, [r4, #16]
 8007e0c:	b94b      	cbnz	r3, 8007e22 <__swsetup_r+0x9a>
 8007e0e:	89a3      	ldrh	r3, [r4, #12]
 8007e10:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007e14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007e18:	d003      	beq.n	8007e22 <__swsetup_r+0x9a>
 8007e1a:	4621      	mov	r1, r4
 8007e1c:	4630      	mov	r0, r6
 8007e1e:	f000 f847 	bl	8007eb0 <__smakebuf_r>
 8007e22:	89a0      	ldrh	r0, [r4, #12]
 8007e24:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007e28:	f010 0301 	ands.w	r3, r0, #1
 8007e2c:	d00a      	beq.n	8007e44 <__swsetup_r+0xbc>
 8007e2e:	2300      	movs	r3, #0
 8007e30:	60a3      	str	r3, [r4, #8]
 8007e32:	6963      	ldr	r3, [r4, #20]
 8007e34:	425b      	negs	r3, r3
 8007e36:	61a3      	str	r3, [r4, #24]
 8007e38:	6923      	ldr	r3, [r4, #16]
 8007e3a:	b943      	cbnz	r3, 8007e4e <__swsetup_r+0xc6>
 8007e3c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007e40:	d1ba      	bne.n	8007db8 <__swsetup_r+0x30>
 8007e42:	bd70      	pop	{r4, r5, r6, pc}
 8007e44:	0781      	lsls	r1, r0, #30
 8007e46:	bf58      	it	pl
 8007e48:	6963      	ldrpl	r3, [r4, #20]
 8007e4a:	60a3      	str	r3, [r4, #8]
 8007e4c:	e7f4      	b.n	8007e38 <__swsetup_r+0xb0>
 8007e4e:	2000      	movs	r0, #0
 8007e50:	e7f7      	b.n	8007e42 <__swsetup_r+0xba>
 8007e52:	bf00      	nop
 8007e54:	20000010 	.word	0x20000010
 8007e58:	08008150 	.word	0x08008150
 8007e5c:	08008170 	.word	0x08008170
 8007e60:	08008130 	.word	0x08008130

08007e64 <__swhatbuf_r>:
 8007e64:	b570      	push	{r4, r5, r6, lr}
 8007e66:	460e      	mov	r6, r1
 8007e68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e6c:	2900      	cmp	r1, #0
 8007e6e:	b096      	sub	sp, #88	; 0x58
 8007e70:	4614      	mov	r4, r2
 8007e72:	461d      	mov	r5, r3
 8007e74:	da08      	bge.n	8007e88 <__swhatbuf_r+0x24>
 8007e76:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007e7a:	2200      	movs	r2, #0
 8007e7c:	602a      	str	r2, [r5, #0]
 8007e7e:	061a      	lsls	r2, r3, #24
 8007e80:	d410      	bmi.n	8007ea4 <__swhatbuf_r+0x40>
 8007e82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007e86:	e00e      	b.n	8007ea6 <__swhatbuf_r+0x42>
 8007e88:	466a      	mov	r2, sp
 8007e8a:	f000 f89b 	bl	8007fc4 <_fstat_r>
 8007e8e:	2800      	cmp	r0, #0
 8007e90:	dbf1      	blt.n	8007e76 <__swhatbuf_r+0x12>
 8007e92:	9a01      	ldr	r2, [sp, #4]
 8007e94:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007e98:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007e9c:	425a      	negs	r2, r3
 8007e9e:	415a      	adcs	r2, r3
 8007ea0:	602a      	str	r2, [r5, #0]
 8007ea2:	e7ee      	b.n	8007e82 <__swhatbuf_r+0x1e>
 8007ea4:	2340      	movs	r3, #64	; 0x40
 8007ea6:	2000      	movs	r0, #0
 8007ea8:	6023      	str	r3, [r4, #0]
 8007eaa:	b016      	add	sp, #88	; 0x58
 8007eac:	bd70      	pop	{r4, r5, r6, pc}
	...

08007eb0 <__smakebuf_r>:
 8007eb0:	898b      	ldrh	r3, [r1, #12]
 8007eb2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007eb4:	079d      	lsls	r5, r3, #30
 8007eb6:	4606      	mov	r6, r0
 8007eb8:	460c      	mov	r4, r1
 8007eba:	d507      	bpl.n	8007ecc <__smakebuf_r+0x1c>
 8007ebc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007ec0:	6023      	str	r3, [r4, #0]
 8007ec2:	6123      	str	r3, [r4, #16]
 8007ec4:	2301      	movs	r3, #1
 8007ec6:	6163      	str	r3, [r4, #20]
 8007ec8:	b002      	add	sp, #8
 8007eca:	bd70      	pop	{r4, r5, r6, pc}
 8007ecc:	ab01      	add	r3, sp, #4
 8007ece:	466a      	mov	r2, sp
 8007ed0:	f7ff ffc8 	bl	8007e64 <__swhatbuf_r>
 8007ed4:	9900      	ldr	r1, [sp, #0]
 8007ed6:	4605      	mov	r5, r0
 8007ed8:	4630      	mov	r0, r6
 8007eda:	f7fe ffd1 	bl	8006e80 <_malloc_r>
 8007ede:	b948      	cbnz	r0, 8007ef4 <__smakebuf_r+0x44>
 8007ee0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007ee4:	059a      	lsls	r2, r3, #22
 8007ee6:	d4ef      	bmi.n	8007ec8 <__smakebuf_r+0x18>
 8007ee8:	f023 0303 	bic.w	r3, r3, #3
 8007eec:	f043 0302 	orr.w	r3, r3, #2
 8007ef0:	81a3      	strh	r3, [r4, #12]
 8007ef2:	e7e3      	b.n	8007ebc <__smakebuf_r+0xc>
 8007ef4:	4b0d      	ldr	r3, [pc, #52]	; (8007f2c <__smakebuf_r+0x7c>)
 8007ef6:	62b3      	str	r3, [r6, #40]	; 0x28
 8007ef8:	89a3      	ldrh	r3, [r4, #12]
 8007efa:	6020      	str	r0, [r4, #0]
 8007efc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f00:	81a3      	strh	r3, [r4, #12]
 8007f02:	9b00      	ldr	r3, [sp, #0]
 8007f04:	6163      	str	r3, [r4, #20]
 8007f06:	9b01      	ldr	r3, [sp, #4]
 8007f08:	6120      	str	r0, [r4, #16]
 8007f0a:	b15b      	cbz	r3, 8007f24 <__smakebuf_r+0x74>
 8007f0c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007f10:	4630      	mov	r0, r6
 8007f12:	f000 f869 	bl	8007fe8 <_isatty_r>
 8007f16:	b128      	cbz	r0, 8007f24 <__smakebuf_r+0x74>
 8007f18:	89a3      	ldrh	r3, [r4, #12]
 8007f1a:	f023 0303 	bic.w	r3, r3, #3
 8007f1e:	f043 0301 	orr.w	r3, r3, #1
 8007f22:	81a3      	strh	r3, [r4, #12]
 8007f24:	89a0      	ldrh	r0, [r4, #12]
 8007f26:	4305      	orrs	r5, r0
 8007f28:	81a5      	strh	r5, [r4, #12]
 8007f2a:	e7cd      	b.n	8007ec8 <__smakebuf_r+0x18>
 8007f2c:	08006c21 	.word	0x08006c21

08007f30 <memmove>:
 8007f30:	4288      	cmp	r0, r1
 8007f32:	b510      	push	{r4, lr}
 8007f34:	eb01 0402 	add.w	r4, r1, r2
 8007f38:	d902      	bls.n	8007f40 <memmove+0x10>
 8007f3a:	4284      	cmp	r4, r0
 8007f3c:	4623      	mov	r3, r4
 8007f3e:	d807      	bhi.n	8007f50 <memmove+0x20>
 8007f40:	1e43      	subs	r3, r0, #1
 8007f42:	42a1      	cmp	r1, r4
 8007f44:	d008      	beq.n	8007f58 <memmove+0x28>
 8007f46:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007f4a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007f4e:	e7f8      	b.n	8007f42 <memmove+0x12>
 8007f50:	4402      	add	r2, r0
 8007f52:	4601      	mov	r1, r0
 8007f54:	428a      	cmp	r2, r1
 8007f56:	d100      	bne.n	8007f5a <memmove+0x2a>
 8007f58:	bd10      	pop	{r4, pc}
 8007f5a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007f5e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007f62:	e7f7      	b.n	8007f54 <memmove+0x24>

08007f64 <_realloc_r>:
 8007f64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f68:	4680      	mov	r8, r0
 8007f6a:	4614      	mov	r4, r2
 8007f6c:	460e      	mov	r6, r1
 8007f6e:	b921      	cbnz	r1, 8007f7a <_realloc_r+0x16>
 8007f70:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007f74:	4611      	mov	r1, r2
 8007f76:	f7fe bf83 	b.w	8006e80 <_malloc_r>
 8007f7a:	b92a      	cbnz	r2, 8007f88 <_realloc_r+0x24>
 8007f7c:	f7ff fa0a 	bl	8007394 <_free_r>
 8007f80:	4625      	mov	r5, r4
 8007f82:	4628      	mov	r0, r5
 8007f84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f88:	f000 f83e 	bl	8008008 <_malloc_usable_size_r>
 8007f8c:	4284      	cmp	r4, r0
 8007f8e:	4607      	mov	r7, r0
 8007f90:	d802      	bhi.n	8007f98 <_realloc_r+0x34>
 8007f92:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007f96:	d812      	bhi.n	8007fbe <_realloc_r+0x5a>
 8007f98:	4621      	mov	r1, r4
 8007f9a:	4640      	mov	r0, r8
 8007f9c:	f7fe ff70 	bl	8006e80 <_malloc_r>
 8007fa0:	4605      	mov	r5, r0
 8007fa2:	2800      	cmp	r0, #0
 8007fa4:	d0ed      	beq.n	8007f82 <_realloc_r+0x1e>
 8007fa6:	42bc      	cmp	r4, r7
 8007fa8:	4622      	mov	r2, r4
 8007faa:	4631      	mov	r1, r6
 8007fac:	bf28      	it	cs
 8007fae:	463a      	movcs	r2, r7
 8007fb0:	f7fe ff2f 	bl	8006e12 <memcpy>
 8007fb4:	4631      	mov	r1, r6
 8007fb6:	4640      	mov	r0, r8
 8007fb8:	f7ff f9ec 	bl	8007394 <_free_r>
 8007fbc:	e7e1      	b.n	8007f82 <_realloc_r+0x1e>
 8007fbe:	4635      	mov	r5, r6
 8007fc0:	e7df      	b.n	8007f82 <_realloc_r+0x1e>
	...

08007fc4 <_fstat_r>:
 8007fc4:	b538      	push	{r3, r4, r5, lr}
 8007fc6:	4d07      	ldr	r5, [pc, #28]	; (8007fe4 <_fstat_r+0x20>)
 8007fc8:	2300      	movs	r3, #0
 8007fca:	4604      	mov	r4, r0
 8007fcc:	4608      	mov	r0, r1
 8007fce:	4611      	mov	r1, r2
 8007fd0:	602b      	str	r3, [r5, #0]
 8007fd2:	f7f8 ff80 	bl	8000ed6 <_fstat>
 8007fd6:	1c43      	adds	r3, r0, #1
 8007fd8:	d102      	bne.n	8007fe0 <_fstat_r+0x1c>
 8007fda:	682b      	ldr	r3, [r5, #0]
 8007fdc:	b103      	cbz	r3, 8007fe0 <_fstat_r+0x1c>
 8007fde:	6023      	str	r3, [r4, #0]
 8007fe0:	bd38      	pop	{r3, r4, r5, pc}
 8007fe2:	bf00      	nop
 8007fe4:	20004c78 	.word	0x20004c78

08007fe8 <_isatty_r>:
 8007fe8:	b538      	push	{r3, r4, r5, lr}
 8007fea:	4d06      	ldr	r5, [pc, #24]	; (8008004 <_isatty_r+0x1c>)
 8007fec:	2300      	movs	r3, #0
 8007fee:	4604      	mov	r4, r0
 8007ff0:	4608      	mov	r0, r1
 8007ff2:	602b      	str	r3, [r5, #0]
 8007ff4:	f7f8 ff7f 	bl	8000ef6 <_isatty>
 8007ff8:	1c43      	adds	r3, r0, #1
 8007ffa:	d102      	bne.n	8008002 <_isatty_r+0x1a>
 8007ffc:	682b      	ldr	r3, [r5, #0]
 8007ffe:	b103      	cbz	r3, 8008002 <_isatty_r+0x1a>
 8008000:	6023      	str	r3, [r4, #0]
 8008002:	bd38      	pop	{r3, r4, r5, pc}
 8008004:	20004c78 	.word	0x20004c78

08008008 <_malloc_usable_size_r>:
 8008008:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800800c:	1f18      	subs	r0, r3, #4
 800800e:	2b00      	cmp	r3, #0
 8008010:	bfbc      	itt	lt
 8008012:	580b      	ldrlt	r3, [r1, r0]
 8008014:	18c0      	addlt	r0, r0, r3
 8008016:	4770      	bx	lr

08008018 <_init>:
 8008018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800801a:	bf00      	nop
 800801c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800801e:	bc08      	pop	{r3}
 8008020:	469e      	mov	lr, r3
 8008022:	4770      	bx	lr

08008024 <_fini>:
 8008024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008026:	bf00      	nop
 8008028:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800802a:	bc08      	pop	{r3}
 800802c:	469e      	mov	lr, r3
 800802e:	4770      	bx	lr
